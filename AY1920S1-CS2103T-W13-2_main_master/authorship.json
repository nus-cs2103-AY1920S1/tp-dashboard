[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003d Njoy Teaching Assistant"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-W13-2/main[image:https://travis-ci.org/AY1920S1-CS2103T-W13-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level3[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-W13-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-W13-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "* This is a desktop Teacher Assistant application called njoy Assistant. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": "* It aims to help teachers easily manage their students and activities."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": "* With njoy Assistant, teachers will be able to create questions, generate quizzes, view statistics and more with just a few taps of their keyboards!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 1,
      "alages97": 3,
      "Russell-Loh-NUS": 1,
      "-": 28,
      "fabbbbbbyy": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    implementation group: \u0027org.apache.poi\u0027, name: \u0027poi-ooxml\u0027, version: \u00274.0.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    implementation group: \u0027org.apache.commons\u0027, name: \u0027commons-math3\u0027, version: \u00273.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    compile group: \u0027org.jfxtras\u0027, name: \u0027jfxtras-agenda\u0027, version: \u00279.0-r1-SNAPSHOT\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    compile group: \u0027org.jfxtras\u0027, name: \u0027jfxtras-icalendaragenda\u0027, version: \u00278.0-r6-SNAPSHOT\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    compile group: \u0027org.jfxtras\u0027, name: \u0027jfxtras-icalendarfx\u0027, version: \u00278.0-r6-SNAPSHOT\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 3,
      "lumwb": 4,
      "-": 155
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Njoy was developed by the boys. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003d\u003d\u003d Russell Loh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "image::russell-loh-nus.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "{empty}[https://github.com/Russell-Loh-NUS[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003d\u003d\u003d Lum Wei Boon"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "image::lumwb.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": "{empty}[http://github.com/lumwb[github]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003d\u003d\u003d Jeong Yu Han"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "image::jeongyh99.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alages97"
        },
        "content": "{empty}[http://github.com/jeongyh99[github]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003d\u003d\u003d Fabian Chia"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "image::fabbbbbbyy.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alages97"
        },
        "content": "{empty}[http://github.com/fabbbbbbyy[github]]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003d\u003d\u003d K Alages"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "image::alages97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alages97"
        },
        "content": "{empty}[http://github.com/alages97[github]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 7,
      "alages97": 13,
      "-": 32
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level3/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* *Email us* : You can also reach the developers at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "- e0322824@u.nus.edu (Jeong Yu Han)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "- e0309551@u.nus.edu (Alages K)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "- e0310763@u.nus.edu (Russell Loh)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "- e0309657@u.nus.edu (Lum Wei Boon)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "- e0310146@u.nus.edu (Fabian Chia)"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 6,
      "-": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d NJoy - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "By: `Team AY1920S1-CS2103T-W13-2`      Since: `September 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "Njoy"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Question feature"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "The question feature utilises the `QuestionCommandParser` class to parse the user command input into the different"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "command types and validates the input. There are two types of questions `OpenEndedQuestion` and `McqQuestion` which"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "extends the `Question` class. Questions are then added into the `QuestionBank#questions` observable list. +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "The feature comprises of five commands namely,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* \u003c\u003cFeature-Question-Add, `QuestionAddCommand`\u003e\u003e - Adding questions"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* \u003c\u003cFeature-Question-Edit, `QuestionEditCommand`\u003e\u003e - Editing questions"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* \u003c\u003cFeature-Question-Delete, `QuestionDeleteCommand`\u003e\u003e - Deleting questions"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* \u003c\u003cFeature-Question-List, `QuestionListCommand`\u003e\u003e - Listing questions"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* `QuestionSlideshowCommand` - Starting a slideshow (See \u003c\u003cFeature-Slideshow, slideshow feature\u003e\u003e)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "The commands when executed, will interface with the methods exposed by the `Model` interface to perform the related operations"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "(See \u003c\u003cDesign-Logic, logic component\u003e\u003e for the general overview)."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "_To Add: Class diagram of the interaction between the question parser and commands_"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[[Feature-Question-Add]]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d\u003d Add command"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "The following is a detailed explanation of the operations `QuestionAddCommand` performs. +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Step 1*. The `QuestionAddCommand#execute(Model model)` method is executed and it validates type of question defined."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "The type defined will dictate if the resulting question will be a `OpenEndedQuestion` or `McqQuestion` question type."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Step 2*. The method `Model#addQuestion(Question question)` will then be called to add the question and a success message will"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "be generated by the `QuestionAddCommand#generateSuccessMessage(Question question)` method and a new `CommandResult` will be"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "returned with the generated success message."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[[Feature-Question-Edit]]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d\u003d Edit command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "The following is a detailed explanation of the operations `QuestionEditCommand` performs. +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Step 1*. The `QuestionEditCommand#execute(Model model)` method is executed and it checks if the `Index` defined when"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "instantiating `QuestionEditCommand(Index index, HashMap\u003cString, String\u003e fields)` is valid."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Since it is optional for the users to input fields, the fields not entered will reuse the existing value currently defined in"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "the `Question` object."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "If the question type is changed from open ended to mcq, it is necessary for the user to defined all four options i.e a/ b/ c/ d/."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Step 2*. A new `Question` with the updated values will be created and replace the existing question object"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "through the `Model#setQuestion(Index index, Question question)` method at the specified `Index` defined by the user."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Step 3*. A success message will be generated by the `QuestionAddCommand#generateSuccessMessage(Question question)` method"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "and a new `CommandResult` will be returned with the generated success message."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[[Feature-Question-Delete]]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d\u003d Delete command"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "The following is a detailed explanation of the operations `QuestionDeleteCommand` performs. +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Step 1*. The `QuestionDeleteCommand#execute(Model model)` method is executed and it checks if the `Index` defined when"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "instantiating `QuestionDeleteCommand(Index index, HashMap\u003cString, String\u003e fields)` is valid."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Step 2*. The `Question` at the specified `Index` is then removed from the `QuestionBank#questions` observable list through"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "the `Model#deleteQuestion(Index index)` method."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Step 3*. A success message will be generated by the `QuestionAddCommand#generateSuccessMessage(Question question)` method"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "and a new `CommandResult` will be returned with the generated success message."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[[Feature-Question-List]]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d\u003d List command"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "The following is a detailed explanation of the operations `QuestionListCommand` performs. +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Step 1*. The `QuestionListCommand#execute(Model model)` method is executed. No validation is necessary here since it"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "does not write to the question list."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Step 2*. The `Model#getQuestionsSummary()` method is then called and the questions are returned as a `String` to the new `CommandResult`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "object."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Command Syntax"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* ** Current Implementation: **"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** Current implementation of the commands follows the command word syntax e.g question followed by the arguments necessary"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "to execute the add, edit, delete, list and slideshow command."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* ** Alternatives Considered: **"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** Usage of a forward slash `/` and then the command word. Although it makes it clearer that the input is a command, we"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "realised it is redundant as the only input will be commands and will make it more tedious for the user."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Command Length"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* ** Current Implementation: **"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** Commands are currently shortened as much as possible through the use of initials without much loss in clarity."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "For example, instead of using optionA/ to denote the first option, we use a/ instead. Although this may be unfamiliar"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "to the user initially, it should be easy to pick up and will make it less tedious during input."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* ** Alternatives Considered: **"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** Using more descriptive terms as arguments such that each argument will be specified clearly. However, this decreases"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "the user experience as the command will be too long."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[[Feature-Slideshow]]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Slideshow feature"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "The slideshow feature is dependent on the questions added by the `question slideshow [question no(s).]` command and"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "interacts with the `ModelManager` to retrieve the list of questions to be displayed in the slideshow."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "The logic control for displaying the ui resides in the `SlideshowWindow` class and handles the controls and instantiation"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "of the various `QuestionPanel` that contains each question. +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Below is the sequence diagram of the interactions that happen from when the slideshow command is entered, to the corresponding"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "questions displayed in the slideshow."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "image::SlideshowFeatureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "The following is an example and detailed explanation as to how the questions are fetched and displayed on the slideshow. +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Step 1.* The user requests to start a slideshow with a selection of questions using the `question slideshow [question no(s).]` command."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "This will add questions based on the `Index` specified and will be added to the `slideshowQuestions` list under the `SavedQuestions` class."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "The usage of `Index` here is such that it follows the same convention of when the user edits or deletes a question."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "The order of the questions displayed on the slideshow will be *based on the input order*."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Step 2.* The command is executed and the `MainWindow` calls `CommandResult#isShowSlideshow()` to verify if the command specified"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "is to start a slideshow. The `SlideshowWindow` is then displayed through the `SlideshowWindow#slideShowWindow.show()`."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "The slideshow window has already been instantiated on application launch and the window is merely being hidden or shown."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Step 3.* The window is now visible and existing questions are cleared. The list of slideshow questions is then fetched through"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "`Logic#getSlideshowQuestions()` which in turn calls the `ModelManager#getSlideshowQuestions()` that fetches"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "the `slideshowQuestions` list in `SavedQuestions`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Step 4.* The user will then navigate and control the slideshow using the `Left/Right`, `Space` and `Esc` key as defined by the key"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "listeners in `SlideshowWindow#initialiseKeyboardControls(Stage root)`."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Step 5.* The user exits the slideshow when the `Esc` key event is triggered or when the `currQuestionIndex` exceeds the `questionPanels.size()` or"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "it falls below `0`. The behaviour of this follows the common procedure that most presentation programs adopt thus, it will not"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "feel foreign to users."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "image::SlideshowFeatureActivityDiagram.png[]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "_Activity diagram of the actions performed_"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Controls"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* ** Current Implementation: **"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** The choice of using the arrow keys for navigation and the `Escape` key to quit the slideshow is such that it will feel"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "familiar to users who uses presentation programs often as they have similar controls. The only difference will be the usage"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "of the `Space` key to show answers as it will be something new to the users and is unique to Njoy."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* ** Alternatives Considered: **"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** Usage of the `A` key to show answers. However, this is not very feasible as it is easily forgotten and not as user-friendly"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "due to the smaller surface of the key as compared to the `Space` key."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Display"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* ** Current Implementation: **"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** The ordering of the questions is defined based on the user input so it gives flexibility to the user to choose the ordering"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "that they want the questions to be displayed."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** Placement of the question numbering, topic, options and answer follows the common convention where"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "the question numbering will be at the top followed by the topic, options and then the answer. This is such that viewers"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "will not be confused by the layout."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** *Font sizes* are displayed in the following descending order to allow the text for easy viewing:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*** [.big]##Question Number##"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*** Question Topic \u0026 Options"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*** [.small]#Answer#"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* ** Alternatives Considered: **"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** Having a separate answer format for MCQ such that it will have an arrow beside the correct option _e.g A) 1965_ *\u003c (Answer)*."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "However, this is not feasible as it will break the standard formatting of the answers display since both *Open Ended* and *MCQ*"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "questions will have 2 different answer formats and may cause confusion to the user."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "\u003d\u003d\u003d Quiz feature"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "The quiz feature utilises the questions implemented and stored in the `QuestionBank#questions` observable list. The quiz feature utilises the `QuizCommandParser` class to parse the user command input into the different command types and validates the input. Quizzes are then added into the `QuizBank#quizzes` observable list. The quiz feature also relies heavily on the `QuizManager` class for handling commands from `QuizCommand#execute`. This is done to hide the implementation logic from the `ModelManager` class. +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "The feature comprises of five commands namely,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "* \u003c\u003cFeature-Quiz-Create-Manually, `QuizCreateManuallyCommand`\u003e\u003e - Creates a quiz with user input manually"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "* \u003c\u003cFeature-Quiz-Create-Automatically, `QuizCreateAutomaticallyCommand`\u003e\u003e - Creates a quiz automatically"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "* \u003c\u003cFeature-Quiz-Add-Question, `QuizAddQuestionCommand`\u003e\u003e - Adds a question to an existing quiz"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "* \u003c\u003cFeature-Quiz-Remove-Question, `QuizRemoveQuestionCommand`\u003e\u003e - Removes a question from an existing quiz"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "* \u003c\u003cFeature-Quiz-List, `QuizGetQuestionsAndAnswersCommand`\u003e\u003e - Listing questions and answers of an existing quiz"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "The commands when executed, will interface with the methods exposed by the `Model` interface to perform the related operations"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "(See \u003c\u003cDesign-Logic, logic component\u003e\u003e for the general overview)."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "[[Feature-Quiz-Create-Manually]]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "\u003d\u003d\u003d\u003d Create Manually command"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "The following is a detailed explanation of the operations `QuizCreateManuallyCommand` performs. +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Step 1*. The `QuizCreateManuallyCommand#execute(Model model)` method is executed and it validates the quizId, making sure that there is no existing quiz with the same quizId. Then, it validates the question numbers, making sure that all question numbers currently exist within the `QuestionBank#questions` observable list."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Step 2*. The method `Model#createQuizManually(String quizId, ArrayList\u003cInteger\u003e questionNumbers)` will then be called to create the quiz with the specified questions. This calls the method `SavedQuizzes#createQuizManually(String quizId, ArrayList\u003cInteger\u003e questionNumbers, SavedQuestions savedQuestions)` which calls the method `QuizManager#createQuizManually(String quizId, ArrayList\u003cInteger\u003e questionNumbers, SavedQuestions savedQuestions, QuizBank quizBank)`. This creates a `Quiz` class instance with the given quizId and iterates through the `QuestionBank#questions` to obtain the questions that the user has specified. Lastly, it adds this new `Quiz` instance to the `QuizBank#quizzes` for storage."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Step 3*. Then, asuccess message will be generated by the `QuizCreateManuallyCommand#generateSuccessMessage()` method and a new `CommandResult` will be returned with the generated success message."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "[[Feature-Quiz-Create-Automatically]]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "\u003d\u003d\u003d\u003d Create Automatically command"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "The following is a detailed explanation of the operations `QuizCreateAutomaticallyCommand` performs. +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Step 1*. The `QuizCreateAutomaticallyCommand#execute(Model model)` method is executed and it validates the quizId, making sure that there is no existing quiz with the same quizId."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Step 2*. The method `Model#createQuizAutomatically(String quizId, int numQuestions, String type)` will then be called to create the quiz with the specified number of questions. This calls the method `SavedQuizzes#createQuizAutomatically(String quizId, int numQuestions, String type, SavedQuestions savedQuestions)` which calls the method `QuizManager#createQuizAutomatically(String quizId, int numQuestions, String type, SavedQuestions savedQuestions, QuizBank quizBank)`. This creates a `Quiz` class instance with the given quizId and iterates through the `QuestionBank#questions` to obtain random questions to add to the quiz. The method ensures that no duplicate questions are added to the quiz, and continues adding questions to the quiz until the correct number of questions have been added. Lastly, it adds this new `Quiz` instance to the `QuizBank#quizzes` for storage."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Step 3*. Then, a success message will be generated by the `QuizCreateAutomaticallyCommand#generateSuccessMessage()` method and a new `CommandResult` will be returned with the generated success message."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "[[Feature-Quiz-Add-Question]]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "\u003d\u003d\u003d\u003d Add Question command"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "The following is a detailed explanation of the operations `QuizAddQuestionCommand` performs. +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Step 1*. The `QuizAddQuestionCommand#execute(Model model)` method is executed and it validates the question number, making sure that the question number currently exists within the `QuestionBank#questions` observable list."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Step 2*. The method `Model#addQuizQuestion(String quizId, int questionNumber, int quizQuestionNumber)` will then be called to add the specified question to the specified quiz. This calls the method `SavedQuizzes#addQuizQuestion(String quizId, int questionNumber, int quizQuestionNumber, SavedQuestions savedQuestions)` which calls the method `QuizManager#addQuizQuestion(String quizId, int questionNumber, int quizQuestionNumber, SavedQuestions savedQuestions, QuizBank quizBank)`. This obtains the question specified by the user, then adds it to the quiz specified by the quizId. This is done by searching through the `QuizBank#quizzes` for a quiz matching the quizId. Then, it calls the method `Quiz#addQuestion(Question question, int questionIndex)` which adds the question to the appropriate index."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Step 3*. Then, a success message will be generated by the `QuizAddQuestionCommand#generateSuccessMessage()` method and a new `CommandResult` will be returned with the generated success message."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "[[Feature-Quiz-Remove-Question]]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "\u003d\u003d\u003d\u003d Remove Question command"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "The following is a detailed explanation of the operations `QuizRemoveQuestionCommand` performs. +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Step 1*. The `QuizRemoveQuestionCommand#execute(Model model)` method is executed."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Step 2*. The method `Model#removeQuizQuestion(String quizId, int questionNumber)` will then be called to remove a specified question from the specified quiz. This calls the method `SavedQuizzes#removeQuizQuestion(String quizId, int questionNumber, SavedQuestions savedQuestions)` which calls the method `QuizManager#removeQuizQuestion(String quizId, int questionNumber, SavedQuestions savedQuestions, QuizBank quizBank)`. This obtains the quiz specified by searching through the `QuizBank#quizzes` for a quiz matching the quizId. Then, it calls the method `Quiz#removeQuestion(int questionIndex)` which removes the question from the specified question index."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Step 3*. Then, a success message will be generated by the `QuizRemoveQuestionCommand#generateSuccessMessage()` method and a new `CommandResult` will be returned with the generated success message."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "[[Feature-Quiz-List]]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "\u003d\u003d\u003d\u003d List command"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "The following is a detailed explanation of the operations `QuizGetQuestionsAndAnswersCommand` performs. +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Step 1*. The `QuizGetQuestionsAndAnswersCommand#execute(Model model)` method is executed."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Step 2*. The method `Model#getQuestionsAndAnswersCommand(String quizId)` will then be called to obtain the questions and answers in String representation for a specified quizId. This calls the method `SavedQuizzes#getQuestionsAndAnswersCommand(String quizId)` which calls the method `QuizManager#getQuestionsAndAnswersCommand(String quizId, QuizBank quizBank)`. This obtains the quiz specified by searching through the `QuizBank#quizzes` for a quiz matching the quizId. Then, it calls `Quiz#getFormattedQuestions()` and `Quiz#getFormattedAnswers()` before formatting them for output."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Step 3*. Then, a success message will be generated by the `QuizGetQuestionsAndAnswersCommand#generateSuccessMessage()` method and a new `CommandResult` will be returned with the generated success message."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Command Syntax"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "* ** Current Implementation: **"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "** To be done"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "* ** Alternatives Considered: **"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "** To be done"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Command Length"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "* ** Current Implementation: **"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "** To be done"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "* ** Alternatives Considered: **"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "** To be done"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "////"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003d\u003d\u003d Generating Statistics Feature"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "The Statistics feature is facilitated by the Statistics class."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "It takes a HashMap\u003cString, HashMap\u003cString, Double\u003e\u003e type data that matches the students name to their respective subject-score mappings and generates all relevant data available in the report. It implements the following methods."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* `Statistics#initializeData()` -- Sets all relevant counters to their initial values (e.g. zero for score ranges)."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* `Statistics#processData()` -- Assigns all relevant statistics summary, such as number of data entries, min, max, mean, median and standard deviation."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* `Statistics#allocateDistribution ()` -- Counts the number of people of who got a particular score."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* `Statistics#sortIntoGrade ()` -- Counts the number of people of who got a particular range of scores."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "These data are encapsulated in the StatisticsRecord, which is carried by the Model."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "Given below is an example usage scenario and how the statistics are generated at each step."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "Step 1. The user launches the application for the first time. Model currently carries sample statistics data from the SampleStatisticsUtil class. The user types in a command requesting for generation of statistics report. (statistics file/{filePath})"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "Step 2. The parser checks for syntax errors and validity of file format. If the file is in expected format (specified in the user guide), a StatisticsCommand is created with unprocessed data passed as arguments into Statistics object, and the Statistics object as arguments of a StatisticsAddCommand object."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "Step 3. The Statistics object performs data processing to be used later in the report. `StatisticsAddCommand#execute()` is invoked, which replaces the sample statistics data in the model to the one generated by the input file. Success message is returned for rendering in the User Interface. Model has updated, processed statistics."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "Step 4. If the parsing of input file was successful, ‘MainWindow#handleStats()’ opens a new Stage object to render the generated report."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "If the input file was not found or in invalid format, an error message is shown in the result box and no new window is opened."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Rendering UI"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* **Alternative 1 (current choice):** Opens a new window for the report generated."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "** Pros: More space to work with, able to generate more comprehensive report that is easier to view."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "** Cons: Data widgets are no longer stateful, they are newly created every time new report is requested."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* **Alternative 2:** Render data for current state of the model on the original application."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "** Pros: Stateful, no need to recreate the widget every time there is new input data."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "** Cons: Lack of space, hard to render other UI elements such as the timetable."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: [Proposed] Storing of generated data reports."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* ** [Proposed] Alternative 1 (preferred choice):** Generate a pdf report every time user requests for the report."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "** Pros: Available for printing, portable."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "** Cons: Can be difficult to implement, need good understanding of API."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* **Alternative 2:** Render a report from a stored library of reports when requested."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "** Pros: Easy to use, no need to input long file path every time."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "** Cons: User most likely have data stored in respective educational database system. Report generation is not computationally intensive and thus offers little performance advantage for effort."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "// end::Generating Statistics Feature[]"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003d\u003d\u003d Event Feature"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "lumwb"
        },
        "content": "The Event feature is facilitated by the Event class and managed by the EventRecord class"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "lumwb"
        },
        "content": "The EventRecord class converts between an event object and VEvent object which is imported from the vCalendar jfxtras library. VEvent objects are the required type for rendering using the iCalendarAgenda object fromm the iCalendarAgenda jfxtras library."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "lumwb"
        },
        "content": "The question feature utilises the `EventCommandParser` class to parse the user command input into the different"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "lumwb"
        },
        "content": "command types and validates the input."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "lumwb"
        },
        "content": "The included functionalites for event management are:"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "lumwb"
        },
        "content": "* \u003c\u003cFeature-Event-Add, `EventAddCommand`\u003e\u003e - Adding events"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "lumwb"
        },
        "content": "* \u003c\u003cFeature-Event-Edit, `EventEditCommand`\u003e\u003e - Editing events"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "lumwb"
        },
        "content": "* \u003c\u003cFeature-Event-Delete, `EventDeleteCommand`\u003e\u003e - Deleting events"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "lumwb"
        },
        "content": "The included functionalites for event schedule panel management are:"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "lumwb"
        },
        "content": "* \u003c\u003cFeature-Calendar-Daily, `CalendarDailyCommand`\u003e\u003e - Switch to daily view"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "lumwb"
        },
        "content": "* \u003c\u003cFeature-Calendar-Weekly, `CalendarWeeklyCommand`\u003e\u003e - Switch to weekly view"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "lumwb"
        },
        "content": "* \u003c\u003cFeature-Calendar-Date, `CalendarDateCommand`\u003e\u003e - Show calendar range which includes date of user input"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "lumwb"
        },
        "content": "[[Feature-Event-Add]]"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003d\u003d\u003d\u003d Add command"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "lumwb"
        },
        "content": "The following is a detailed explanation of the operations `EventAddCommand` performs. +"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "lumwb"
        },
        "content": "*Step 1*. The `EventAddCommand#execute(Model model)` method is executed and creates a new VEvent based on the user input."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "lumwb"
        },
        "content": "The user is allowed to create recurring events (daily, weekly, none) and also set the color of the VEvent by inputting a number"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "lumwb"
        },
        "content": "from 0-23. The datetime inputs follow the LocalDateTime format."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "lumwb"
        },
        "content": "*Step 2*. The method `Model#addVEvent(VEvent vEvent)` will then be called to add the VEvent and a success message will"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "lumwb"
        },
        "content": "be generated by the `EventAddCommand#generateSuccessMessage(VEvent vEvent)` method and a new `CommandResult` will be"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "lumwb"
        },
        "content": "returned with the generated success message."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "lumwb"
        },
        "content": "The commands when executed, will interface with the methods exposed by the `Model` interface to perform the related operations"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "lumwb"
        },
        "content": "(See \u003c\u003cDesign-Logic, logic component\u003e\u003e for the general overview)."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "////"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* has a need to manage classes of students"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* has a need to create questions easily"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* has a need to generate quizzes with previously created questions"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* requires a timetable manager"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* prefers efficient viewing statistics of students rather than manually computing it"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "*Value proposition*: manage classes of students faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* * *` [Epic] |teacher |manage classes virtually |have more time for other duties"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* * *` |teacher |add a student | deal with possible changes"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* * *` |teacher |remove a student | deal with possible changes"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* * *` |teacher |mark attendance | ensure the student was present for class"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* * *` |teacher |record scores | tally the marks accurately instead of manually inputting them into the system"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "|`* * *` [Epic] |teacher |write questions to a question bank |store questions to be used later on"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "|`* * *` |teacher |have the option to format the questions as either MCQ or Open Ended |have different types of questions"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* * *` |teacher |generate quizzes with randomised questions for assignments |students are unable to copy solutions"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "from one another"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* * *` |teacher |the generated quizzes to be in a text document |easily print and distribute them to students"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* * *` |teacher |find a student by name |locate details of students without having to go through the entire list"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* *` |student |view the teacher\u0027s schedule |request for consultations in appropriate slots"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* *` |student |view my past results |track my progress and check for updates"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* *` |student |have an editable timetable |view my timetable and request for consultations at appropriate slots"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "when the teacher is free"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`*` |teacher |have an editable timetable |view my timetable and let students request for consultations at"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "appropriate slots when I am free"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "(For all use cases below, the *System* is `NJoy` and the *Actor* is the `Teacher`, unless specified otherwise)"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Add a student (UC01)"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher enter details of student"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  NJoy saves the record of the student"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 1a. Missing student details"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** 1a1. NJoy shows error message."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Edit a student (UC02)"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Preconditions*"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  User exist in the system"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher finds a student (UC05)"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  Teacher requests to edit a student details"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "3.  NJoy returns list of fields able to edit"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "4.  Teacher enter the field to edit"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "5.  NJoy save the edited record"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* *a. Teacher chooses to cancel the edit"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Delete a student (UC03)"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Preconditions*"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  User exist in the system"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher finds a student (UC05)"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  Teacher requests to delete a student"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "3.  NJoy request for confirmation"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "4.  Teacher confirms the deletion"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "5.  NJoy deletes the student"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 3a. Teacher chooses not to delete the student"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Find a student (UC04)"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher enter name of student to find"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  NJoy display the student details"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 1a. Name of student cannot be found"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** 1a1. NJoy shows error message"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Create a class (UC05)"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher enter new class details"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  NJoy saves the new class"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 1a. Class name already taken"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** 1a1. NJoy shows error message"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Edit a class (UC06)"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Preconditions*"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Class exist in the system"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher requests to edit class description"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  Teacher enters new class description"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "3.  NJoy save the edited record"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* *a. Teacher chooses to cancel the edit"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Delete a class (UC07)"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Preconditions*"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Class exist in the system"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher requests to delete a class"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  NJoy request for confirmation"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "3.  Teacher confirms the deletion"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "4.  NJoy deletes the class"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 2a. Teacher chooses not to delete the class"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Add student to class (UC08)"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Preconditions*"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  User exist in the system"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  Class exist in the system"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher requests to add a student to class"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  NJoy adds the student to the class"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Remove student from class (UC09)"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Preconditions*"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  User exist in the system"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  Class exist in the system"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher requests to remove a student from class"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  NJoy request for confirmation"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "3.  Teacher confirms the deletion"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "4.  NJoy remove the student from the class"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 2a. Teacher chooses not to remove the student from the class"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Schedule class time (UC10)"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher requests to add an item to the timetable"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  Teacher enter details of the item"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "3.  NJoy save the item"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 2a. Missing item details"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** 2a1. NJoy shows error message."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 2b. Invalid class id"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** 2b1. NJoy shows error message."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: View timetable (UC11)"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher requests for the timetable"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  NJoy returns list of items in the timetable"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 2a. List is empty"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Delete item on timetable (UC12)"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Preconditions*"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Item exist in timetable"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher list items in timetable (UC11)"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  Teacher request to delete item in timetable"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "3.  NJoy request for confirmation"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "4.  Teacher confirms the deletion"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "5.  NJoy remove the item from the timetable"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 2a. Teacher chooses not to remove the item from the timetable"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Creating a mcq question (UC13)"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher enter topic and answers to the question"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  NJoy save the question"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 1a. Teacher did not enter answers"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** 1a1. NJoy shows error message."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 1b. Teacher did not enter topic"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** 1b1. NJoy shows error message."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ".  Should be able to hold up to 1000 students without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ".  The system should work on both 32-bit and 64-bit environments"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ".  The assistant should never take more than 5 seconds to process any command"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ".  The assistant should be usable by any teacher from any academic background without much of a learning curve"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ".  The teacher should be able to have as many classes as desired"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ".  The assistant is not required to synchronize timetables / quizzes between 2 teachers"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*MCQ* - Multiple Choice Question, a question with four possible answers, and only one correct."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Open Ended* - Open Ended Question, a question that cannot be answered with a yes or a no but with a proper sentence."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Timetable* - A chart showing the schedule to take place at particular times."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Njoy* - A shortened version of the word \"Enjoy\"."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "*Teacher* - User of the Njoy assistant who manages his/her students."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "*Student* - Entity that Teacher manages."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "*Class* - A manageable unit of Student that Teacher can create, read, edit and delete."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*UI* - User Interface that users use to interact with the application."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Njoy*"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* Faster than existing market solutions, particularly for Teachers who can type fast."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* Integrated management of taking attendance, managing classes and creating quizzes"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "as opposed to managing them separately on multiple different platforms."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* Integrated management exists on the PC only, no cloud functionality for management from home."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* Require understanding of CLI as well as the commands to carry out the functionality of Njoy effectively."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 89,
      "lumwb": 37,
      "Russell-Loh-NUS": 427,
      "-": 405,
      "fabbbbbbyy": 118
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d NJoy - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W13-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "By: `Team AY1920S1-CS2103T-W13-2`      Since: `September 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Creating and managing your students and classes have never been easier.* Njoy assistant aims to enable teachers to easily manage their students and activities right from their keyboard. With just a few commands, you will be able to *manage your classes, create questions, generate quizzes and much more!*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Manage your classes* easily with just a few strokes of your keyboard."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Attendance taking"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "//.. Note taking"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Record student scores"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Creating questions* is simple. Simply type a topic and an answer and it is done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Easy input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Repeatable"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Generate quizzes* for your students."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Type once, generate anytime"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Randomised"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Distribute"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Timetable Manager* for scheduling your classes."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Create and manage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Schedule classes"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Class Reminders"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Repeatable daily/monthly and even yearly"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Statistics* provide a comprehensive view of your students\u0027 performance."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. View underperforming students"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Trends of the academic year"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d Getting Started"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Running .jar file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". Download the njoy.jar file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". Double click on ‘njoy.jar’ file to run the application"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "_If you are not able to run the application using the method above, use the following:_ +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". Open Terminal(Mac)/Command Prompt(Windows)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". Type cd [path to directory containing jar file]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". Type ‘java -jar njoy.jar’ to run the application."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d Commands"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "All commands start with a forward slash “/” followed by the command name. Certain commands may include additional options and will be specified in the description. An optional field will be marked ​(optional) b​ eside the field."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Student ​- `/student`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Create and edit students."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Create student* - `/student create [name] [birthdate in DD/MM/YYYY format]​(optional)` +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/student create “John” “20/09/2006”` +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Return*: student no."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Edit student* ​- `/student edit [student no.]` +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/student edit 1` +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Return*:​ Options to edit name or birthdate"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Delete student* ​- `/student delete [student no.]`  +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/student delete 1`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Find student* ​- `/student find [name]` +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/student find “John”` +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Return*:​ student no."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Class​ - `​/class`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Manage classes and manage students within the class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Create class*​ - `/class create [class id] [description]​(optional)` +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/class create unity “My First Class”`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Edit class description* ​- `/class edit [class id] [description]​(optional)` +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/class edit unity “My Second Class”`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Delete class* ​- `/class delete [class id]` +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/class delete unity`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Add student to class* ​ - `/class add [class id] [student no.]` +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/class add unity 1`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Remove student from class* ​ - `/class remove [class id] [student no.]` +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/class remove unity 1`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Timetable​ - `​/timetable`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Manage timetable and schedule class timings"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Schedule class time* ​- `/timetable schedule [class id] [date \u0026 time in DD/MM/YYYY HH:mm format] [description]​(optional)` +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/timetable schedule unity “18/11/2019 11:00” “Math class”` +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Return*: ​schedule id."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *View schedule for all classes​* - `/timetable view all` +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/timetable view all` +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Return*: ​schedule id, class id, class name, date time, description"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *View schedule for specific class​* - `/timetable view [class id]` +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/timetable view unity` +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Return*: ​schedule id, class id, class name, date time, description"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Delete scheduled class time* ​- `/timetable delete [schedule id]` +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/timetable delete 1`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Attendance ​-​ `/attendance`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "View and mark student’s attendance."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *View attendance* ​- `/attendance show` +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/attendance show`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Mark attendance* ​- `/attendance check [class id] [student no.]` +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/attendance check unity 1`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "////"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Notes ​- ​`/notes`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Notes can be specified under general or class. Specifying a class note will allow you to view"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "notes specific to a class."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *View all notes* ​- `/note view all` +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/note view all`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *View general note* ​- `/note view general` +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/note view general`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *View class note* ​- `/note view class [class id]` +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/note view class unity`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Create general note​* - `/note create general “[description]”` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/note create general “Remember to attend cca briefing”`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Create class note* ​- `/note create class “[class id]” “[description]”` +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/note create class unity “Remember to meet john after class”`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "////"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Generating Questions ​-​ `/question`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Create and store questions according to the type specified."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Open ended questions* ​- `/question open “[topic]” “[answer]”` +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/question open “Which year did Singapore gain independence?” “1965”`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *MCQs* ​- `/question mcq “[topic]” “[answer]” “[option1]” “[option2]” “[option3]” “[option 4]”` +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g `​/question mcq “Which year did Singapore gain independence?” “1965” “1963” “2019” “1926” “1965”`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "\u003d\u003d\u003d Quizzes ​-​ `/quiz`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "Create and store quizzes using questions specified. Users are also able to edit the quizzes after creation."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ". *Creating quizzes manually* ​- `/quiz manual/ quizID/[quizName] questionNumbers/[questionNumbers]` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "e.g. `/quiz manual/ quizID/CS2103T_Quiz questionNumbers/1 2 3`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "This creates a quiz named \"CS2103T_Quiz\" and adds question numbers 1, 2 and 3 from the question bank to the quiz."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ". *Creating quizzes automatically* ​- `/quiz auto/ quizID/[quizName] numQuestions/[numberOfQuestions] type/[typeOfQuestion]` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "e.g. `/quiz auto/ quizID/CS2103T_Quiz numQuestions/3 type/open`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "This creates a quiz named \"CS2103T_Quiz\" and adds 3 questions from the question bank to the quiz, ensuring there are no duplicates."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ". *Adding questions to quizzes* ​- `/quiz add quizID/[quizName] questionNumber/[questionNumber] quizQuestionNumber/[quizQuestionNumber]` +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "e.g. `/quiz add quizID/CS2103T_Quiz questionNumber/1 quizQuestionNumber/3`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "This adds the question number 1 from the question bank to the quiz \"CS2103T_Quiz\"\u0027s question number 3, shifting questions previously at or after question 3, down by 1 question. I.e question 3 becomes question 4, question 4 becomes question 5 to accomodate for the added question."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ". *Removing questions from quizzes* ​- `/quiz remove quizID/[quizName] quizQuestionNumber/[quizQuestionNumber]` +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "e.g. `/quiz remove quizID/CS2103T_Quiz quizQuestionNumber/3`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "This removes the question number 3 from the quiz \"CS2103T_Quiz\", shifting questions previously after question 3, up by 1 question. I.e question 4 becomes question 3, question 5 becomes question 4 to acoomodate for the removed question."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ". *List all questions and answers in a readable format* ​- `/quiz list quizID/[quizName]` +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "e.g. `/quiz list quizID/CS2103T_Quiz`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "This fetches the quiz named \"CS2103T_Quiz\" and displays all the questions followed by answers of the quiz."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Help ​-​ `/help`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Show all available commands usable in the application."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Q*: Typing a command result in “Invalid command entered.” +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*A*: Please ensure that the command is entered as specified in the format above. Note that all fields all mandatory except those marked as ​(optional).​"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 108,
      "-": 46,
      "fabbbbbbyy": 20
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "include::../UserGuide.adoc"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "include::../UserGuide.adoc"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "lumwb": 2,
      "-": 70
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "lumwb": 2,
      "-": 423
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "lumwb": 2,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.EventRecord;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.ReadOnlyEvents;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.NotesRecord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.ReadOnlyNotesRecord;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.ReadOnlyQuestions;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.SavedQuestions;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyQuizzes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.quiz.SavedQuizzes;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.statistics.ReadOnlyStatisticsRecord;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.statistics.StatisticsRecord;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudentRecord;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.student.StudentRecord;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.util.SampleNotesUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.util.SampleStatisticUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.storage.event.EventStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.storage.event.JsonEventStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.storage.note.JsonNotesRecordStorage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.storage.note.NotesRecordStorage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.storage.question.JsonQuestionStorage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.storage.question.QuestionStorage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.storage.quiz.JsonQuizStorage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.storage.quiz.QuizStorage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.storage.student.JsonStudentRecordStorage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.storage.student.StudentRecordStorage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        StudentRecordStorage studentRecordStorage \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            new JsonStudentRecordStorage(userPrefs.getStudentRecordFilePath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionStorage savedQuestionStorage \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            new JsonQuestionStorage(userPrefs.getSavedQuestionsFilePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        EventStorage eventStorage \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            new JsonEventStorage(userPrefs.getEventRecordFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        QuizStorage savedQuizStorage \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                new JsonQuizStorage(userPrefs.getSavedQuizzesFilePath());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        NotesRecordStorage notesRecordStorage \u003d new JsonNotesRecordStorage(userPrefs.getNotesRecordFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, studentRecordStorage,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            savedQuestionStorage, savedQuizStorage, notesRecordStorage, eventStorage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * userPrefs}. \u003cbr\u003e The data from the sample address book will be used instead if {@code"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * storage}\u0027s address book is not found, or an empty address book will be used instead if errors"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Optional\u003cReadOnlyStudentRecord\u003e studentRecordOptional;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Optional\u003cReadOnlyQuestions\u003e questionsOptional;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        Optional\u003cReadOnlyEvents\u003e eventsOptional;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        Optional\u003cReadOnlyQuizzes\u003e quizzesOptional;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Optional\u003cReadOnlyNotesRecord\u003e notesRecordOptional;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        ReadOnlyAddressBook initialAddressBook;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        ReadOnlyStudentRecord initialStudentRecord;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        ReadOnlyQuestions initialQuestions;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        ReadOnlyEvents initialEvents;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        ReadOnlyQuizzes initialQuizzes;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        ReadOnlyNotesRecord initialNotesRecord;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        ReadOnlyStatisticsRecord initialStatisticsRecord;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            studentRecordOptional \u003d storage.readStudentRecord();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            questionsOptional \u003d storage.readQuestions();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            eventsOptional \u003d storage.readEvents();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            quizzesOptional \u003d storage.readQuizzes();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            notesRecordOptional \u003d storage.readNotesRecord();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            if (!studentRecordOptional.isPresent()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alages97"
        },
        "content": "                logger.info(\"Student file not found. Will be starting with a student record with a sample student.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            if (!questionsOptional.isPresent()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                logger.info(\"Question file not found. Will create an empty one.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            if (!eventsOptional.isPresent()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                logger.info(\"Events file not found. Will create an empty one.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            if (!quizzesOptional.isPresent()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                logger.info(\"Quiz file not found. Will create an empty one.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            if (!notesRecordOptional.isPresent()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                logger.info(\"Notes Record not found. Will start with sample NotesRecord\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            initialAddressBook \u003d addressBookOptional"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                .orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alages97"
        },
        "content": "            initialStudentRecord \u003d studentRecordOptional.orElseGet(SampleDataUtil::getSampleStudents);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            initialQuestions \u003d questionsOptional.orElseGet(SampleDataUtil::getSampleQuestionList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            initialEvents \u003d eventsOptional.orElseGet(SampleDataUtil::getSampleEventsList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            initialNotesRecord \u003d notesRecordOptional.orElseGet(SampleNotesUtil::getSampleNotesRecord);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            initialStatisticsRecord \u003d SampleStatisticUtil.getSampleStatisticsRecord();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            initialQuizzes \u003d quizzesOptional.orElseGet(SampleDataUtil::getSampleQuizList);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                \"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            initialAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            initialStudentRecord \u003d new StudentRecord();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            initialQuestions \u003d new SavedQuestions();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            initialEvents \u003d new EventRecord();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            initialQuizzes \u003d new SavedQuizzes();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            initialNotesRecord \u003d new NotesRecord();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            initialStatisticsRecord \u003d new StatisticsRecord(); //later"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                \"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            initialAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            initialStudentRecord \u003d new StudentRecord();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            initialQuestions \u003d new SavedQuestions();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            initialEvents \u003d new EventRecord();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            initialQuizzes \u003d new SavedQuizzes();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            initialNotesRecord \u003d new NotesRecord();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            initialStatisticsRecord \u003d new StatisticsRecord(); //later"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return new ModelManager(initialAddressBook, initialStudentRecord, initialQuestions, initialQuizzes,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                initialNotesRecord, initialEvents, initialStatisticsRecord, userPrefs);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e The default file path"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * {@code Config#DEFAULT_CONFIG_FILE} will be used instead if {@code configFilePath} is null."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            logger"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                .warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path, or a"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * new {@code UserPrefs} with default configuration if errors occur when reading from the file."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                \"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 35,
      "lumwb": 21,
      "Russell-Loh-NUS": 45,
      "alages97": 2,
      "-": 161,
      "fabbbbbbyy": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    // Address book"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX \u003d \"The question index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX \u003d \"The student index provided is invalid\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_INVALID_NOTE_DISPLAYED_INDEX \u003d \"The note index provided is invalid\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"This note already exists in the notes record\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String EXCEL_FILE_NOT_FOUND \u003d \"Excel file was not found. Please ensure file path is valid.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String EXCEL_FILE_NOT_PARSED \u003d \"Error occurred retrieving file. Please try with another file\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String EXCEL_FILE_TYPE_ISSUE \u003d \"File path must be of type /\u0027.xlsx/\u0027. Please try again.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String EXCEL_FILE_ILLEGAL_INPUT \u003d \"File has illegal input. Please refer to user guide.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String EXCEL_FILE_ILLEGAL_FORMAT \u003d \"File has illegal format. PLease refer to user guide.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 12,
      "lumwb": 1,
      "Russell-Loh-NUS": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/EventUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import jfxtras.icalendarfx.properties.component.recurrence.RecurrenceRule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.RecurrenceType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * EventUtil contains methods for manipulation of Event and VEvents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class EventUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private static final String DAILY_RECUR_RULE_STRING \u003d \"FREQ\u003dDAILY;INTERVAL\u003d1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private static final String WEEKLY_RECUR_RULE_STRING \u003d \"FREQ\u003dWEEKLY;INTERVAL\u003d1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Maps a event to VEvent"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static VEvent eventToVEventMapper(Event eventToMap) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        VEvent resultVEvent \u003d new VEvent();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        resultVEvent.setDateTimeStart(eventToMap.getStartDateTime());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        resultVEvent.setDateTimeEnd(eventToMap.getEndDateTime());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        resultVEvent.setUniqueIdentifier(eventToMap.getUniqueIdentifier());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        resultVEvent.setSummary(eventToMap.getEventName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (eventToMap.getRecurrenceType() \u003d\u003d RecurrenceType.DAILY) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            resultVEvent.setRecurrenceRule(DAILY_RECUR_RULE_STRING);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } else if (eventToMap.getRecurrenceType() \u003d\u003d RecurrenceType.WEEKLY) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            resultVEvent.setRecurrenceRule(WEEKLY_RECUR_RULE_STRING);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        resultVEvent.withCategories(eventToMap.getColorCategory());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return resultVEvent;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Maps a vEvent to event"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static Event vEventToEventMapper(VEvent vEventToMap) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        Event resultEvent \u003d new Event();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        LocalDateTime startDateTime \u003d LocalDateTime.parse(vEventToMap.getDateTimeStart().getValue().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        LocalDateTime endDateTime \u003d LocalDateTime.parse(vEventToMap.getDateTimeEnd().getValue().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        String uniqueIdentifier \u003d vEventToMap.getUniqueIdentifier().getValue();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        String eventName \u003d vEventToMap.getSummary().getValue();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        resultEvent.setStartDateTime(startDateTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        resultEvent.setEndDateTime(endDateTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        resultEvent.setUniqueIdentifier(uniqueIdentifier);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        resultEvent.setEventName(eventName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (vEventToMap.getRecurrenceRule() \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            resultEvent.setRecurrenceType(RecurrenceType.NONE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } else if (vEventToMap.getRecurrenceRule().toString().contains(\"DAILY\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            resultEvent.setRecurrenceType(RecurrenceType.DAILY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } else if (vEventToMap.getRecurrenceRule().toString().contains(\"WEEKLY\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            resultEvent.setRecurrenceType(RecurrenceType.WEEKLY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        String colorCategory \u003d vEventToMap.getCategories().get(0).getValue().get(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        resultEvent.setColorCategory(colorCategory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return resultEvent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param recurrenceString"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @return returns a RecurrenceRule object which is used to configure VEVents"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static RecurrenceRule stringToRecurrenceRule(String recurrenceString) throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        recurrenceString \u003d recurrenceString.toLowerCase();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (recurrenceString.equals(\"weekly\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return RecurrenceRule.parse(recurrenceString);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } else if (recurrenceString.equals(\"daily\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return RecurrenceRule.parse(recurrenceString);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } else if (recurrenceString.equals(\"none\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return new RecurrenceRule();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new IllegalValueException(\"recurrence string type is not valid. value passedL \" + recurrenceString);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns true if the string similarity between {@code string1} and {@code string2}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * is greater than {@code requiredSimilarityPercentage}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws NullPointerException if {@code string1} or {@code string2} is null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static boolean isSimilarWord(String string1, String string2, Double requiredSimilarityPercentage) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        double stringSimilarity \u003d calculateStringSimilarity(string1, string2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return stringSimilarity \u003e\u003d requiredSimilarityPercentage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns string similarity  between {@code string1} and {@code string2} as a double from 0.0 - 1.0"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws NullPointerException if {@code string1} or {@code string2} is null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static double calculateStringSimilarity(String string1, String string2) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(string1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(string2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        Integer longerStringLength \u003d Math.max(string1.length(), string2.length());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        Integer levenshteinDistance \u003d calculateLevenshteinDistance(string1, string2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        Double similarityPercentage \u003d ((longerStringLength - levenshteinDistance) / (double) longerStringLength);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return similarityPercentage;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns the cost of inserting / deleting / swapping a character. Used in {@code calculateLevenshteinDistance}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private static int costOfSubstitution(char a, char b) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return a \u003d\u003d b ? 0 : 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns the smallest value from a variable amount of int."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns Integer.MAXVALUE as default value"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private static int min(int... numbers) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return Arrays.stream(numbers)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                .min().orElse(Integer.MAX_VALUE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns the Levenshtein Distance (an algorithm to compare the difference between strings)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * of {@code string1} and {@code string2}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private static int calculateLevenshteinDistance(String string1, String string2) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        int[][] dp \u003d new int[string1.length() + 1][string2.length() + 1];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d string1.length(); i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            for (int j \u003d 0; j \u003c\u003d string2.length(); j++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                    dp[i][j] \u003d j;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                } else if (j \u003d\u003d 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                    dp[i][j] \u003d i;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                    dp[i][j] \u003d min(dp[i - 1][j - 1] + costOfSubstitution(string1.charAt(i - 1), string2.charAt(j - 1)),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                            dp[i - 1][j] + 1, dp[i][j - 1] + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return dp[string1.length()][string2.length()];"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 61,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region AddressBook"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    //region Questions"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the list of slideshow questions"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @see seedu.address.model.Model#getSlideshowQuestions()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    ObservableList\u003cQuestion\u003e getSlideshowQuestions();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region Statistics"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Returns an unmodifiable view of the processed statistics of students"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    ObservableList\u003cStatistics\u003e getProcessedStatistics();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region Notes"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of notes"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    ObservableList\u003cNote\u003e getFilteredNotesList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns the user prefs\u0027 notes record file path."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    Path getNotesRecordFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of students"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //region VEvents"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    ObservableList\u003cVEvent\u003e getVEventList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 22,
      "lumwb": 4,
      "Russell-Loh-NUS": 18,
      "alages97": 4,
      "-": 50,
      "fabbbbbbyy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.parser.NjoyParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final NjoyParser njoyParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        njoyParser \u003d new NjoyParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Command command \u003d njoyParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            storage.saveStudentRecord(model.getStudentRecord());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            storage.saveQuestions(model.getSavedQuestions());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            storage.saveEvents(model.getEventRecord());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            storage.saveQuizzes(model.getSavedQuizzes());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            storage.saveNotesRecord(model.getNotesRecord());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return model.getFilteredStudentList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getSlideshowQuestions() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return model.getSlideshowQuestions();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public ObservableList\u003cStatistics\u003e getProcessedStatistics() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return model.getProcessedStatistics();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public ObservableList\u003cNote\u003e getFilteredNotesList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return model.getFilteredNotesList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public Path getNotesRecordFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return model.getNotesRecordFilePath();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public ObservableList\u003cVEvent\u003e getVEventList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return model.getVEventList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 20,
      "lumwb": 7,
      "Russell-Loh-NUS": 11,
      "alages97": 6,
      "-": 73,
      "fabbbbbbyy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "fabbbbbbyy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Represents the type of Command entered."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private CommandResultType commandResultType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.commandResultType \u003d CommandResultType.OTHER;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public CommandResult(String feedbackToUser, CommandResultType commandResultType) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.commandResultType \u003d commandResultType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public CommandResultType getCommandResultType() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return commandResultType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setResultType(CommandResultType resultType) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.commandResultType \u003d resultType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u0026\u0026 commandResultType \u003d\u003d otherCommandResult.commandResultType;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return Objects.hash(feedbackToUser, commandResultType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 13,
      "Russell-Loh-NUS": 2,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResultType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Represents the type of Command entered and the actionable task from the result."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public enum CommandResultType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    SHOW_HELP,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    SHOW_SLIDESHOW,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    SHOW_STATISTIC,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    SHOW_STUDENT,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    SHOW_SCHEDULE,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    EXIT,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    OTHER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, CommandResultType.EXIT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, CommandResultType.SHOW_HELP);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/EventAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import jfxtras.icalendarfx.properties.component.descriptive.Categories;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.CommandResultType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Creates a new event to be added to the event list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class EventAddCommand extends EventCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new event\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            + \"eventName/ [EVENTNAME]\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            + \"startDateTime/ [STARTDATETIME]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            + \"endDateTime/ [ENDDATETIME]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            + \"recur/ [DAILY/WEEKLY/NONE]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            + \"color/ [0 - 23]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            + \"Example: event eventName/cs2100 lecture startDateTime/2019-10-21T14:00 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            + \"endDateTime/2019-10-21T15:00 recur/none color/1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final String UNIQUE_IDENTIFIER \u003d \"njoyassistant\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final String weeklyRecurrenceRule \u003d \"FREQ\u003dWEEKLY;INTERVAL\u003d1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final String dailyRecurrenceRule \u003d \"FREQ\u003dDAILY;INTERVAL\u003d1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final String badDateFormatMessage \u003d \"Invalid DateTime Format. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            + \"Please follow the format: yyyy-MM-ddTHH:mm, \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            + \"e.g. 28 October 2019, 2PM should be input as 2019-10-28T14:00\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final String invalidRecurrenceType \u003d \"Invalid Recurrence Type\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final String invalidEventRange \u003d \"Invalid date range between start and end dateTime\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final String eventName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final String startDateTimeString;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final String endDateTimeString;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final String recurTypeString;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final String colorNumberString;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Creates a EventAddCommand object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param eventName to set."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param startDateTimeString   string representation of eventStartDateTime."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param endDateTimeString   string representation of eventEndDateTime."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param recurTypeString     of event e.g weekly, daily, or none."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public EventAddCommand(String eventName, String startDateTimeString, String endDateTimeString,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                           String recurTypeString) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(startDateTimeString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(endDateTimeString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(recurTypeString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.startDateTimeString \u003d startDateTimeString;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.endDateTimeString \u003d endDateTimeString;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.recurTypeString \u003d recurTypeString.toLowerCase();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.colorNumberString \u003d \"group00\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Overloaded constructor to create a EventAddCommand object with color type"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param eventName to set."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param startDateTimeString   string representation of eventStartDateTime."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param endDateTimeString   string representation of eventEndDateTime."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param recurTypeString     of event e.g weekly, daily, or none."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public EventAddCommand(String eventName, String startDateTimeString, String endDateTimeString,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                           String recurTypeString, String colorNumberString) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(startDateTimeString);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(endDateTimeString);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(recurTypeString);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.startDateTimeString \u003d startDateTimeString;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.endDateTimeString \u003d endDateTimeString;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.recurTypeString \u003d recurTypeString.toLowerCase();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.colorNumberString \u003d convertNumberToColorNumber(colorNumberString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private String convertNumberToColorNumber(String number) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return \"group\" + (Integer.parseInt(number) \u003c 10 ? \"0\" : \"\") + number;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        VEvent vEvent \u003d new VEvent();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        vEvent.setSummary(eventName);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            startDateTime \u003d LocalDateTime.parse(startDateTimeString);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            endDateTime \u003d LocalDateTime.parse(endDateTimeString);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } catch (DateTimeParseException dtpEx) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new CommandException(badDateFormatMessage, dtpEx);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (startDateTime.compareTo(endDateTime) \u003e\u003d 1) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new CommandException(invalidEventRange);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        vEvent.setDateTimeStart(startDateTime);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        vEvent.setDateTimeEnd(endDateTime);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        vEvent.setUniqueIdentifier(UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (recurTypeString.equals(\"weekly\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            vEvent.setRecurrenceRule(weeklyRecurrenceRule);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } else if (recurTypeString.equals(\"daily\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            vEvent.setRecurrenceRule(dailyRecurrenceRule);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } else if (!recurTypeString.equals(\"none\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new CommandException(invalidRecurrenceType);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        Categories colorCategory \u003d new Categories(colorNumberString);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        ArrayList\u003cCategories\u003e colorCategoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        colorCategoryList.add(colorCategory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        vEvent.setCategories(colorCategoryList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (model.hasVEvent(vEvent)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return new CommandResult(\"Will Result in duplicate VEvent being created\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            model.addVEvent(vEvent);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return new CommandResult(generateSuccessMessage(vEvent), CommandResultType.SHOW_SCHEDULE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param vEvent that has been added."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private String generateSuccessMessage(VEvent vEvent) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return \"Added event: \" + vEvent.getSummary().getValue();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (!(other instanceof EventAddCommand)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        EventAddCommand e \u003d (EventAddCommand) other;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return eventName.equals(e.eventName);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 2,
      "lumwb": 163
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/EventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents a event command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public abstract class EventCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/EventDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Deletes a event identified using it\u0027s displayed index beside it\u0027s event name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class EventDeleteCommand extends EventCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            + \" delete {index}: deletes the event identified by the index number beside the event name.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            + \"Note: {index} must be a positive integer\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            + \"Example: event delete 3\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final String MESSAGE_DELETE_VEVENT_SUCCESS \u003d \"Deleted Event: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public EventDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        List\u003cVEvent\u003e lastShownList \u003d model.getVEventList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        VEvent vEventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        model.deleteVEvent(vEventToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_VEVENT_SUCCESS, vEventToDelete.getSummary().getValue()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                || (other instanceof EventDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((EventDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/EventEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import jfxtras.icalendarfx.properties.component.descriptive.Categories;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import jfxtras.icalendarfx.properties.component.recurrence.RecurrenceRule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.util.EventUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Edits the events details in the events record."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class EventEditCommand extends EventCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" [index]: Edits a event\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        + \"Parameters(All are optional):\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        + \"eventName/ [EVENTNAME]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        + \"startDateTime/ [STARTDATETIME]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        + \"endDateTime/ [ENDDATETIME]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        + \"recur/ [DAILY/WEEKLY/NONE]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        + \"color/ [0 - 23]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        + \"Example: event 6 edit eventName/cs2100 lecture startDateTime/2019-10-21T14:00 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        + \"endDateTime/2019-10-21T15:00 recur/none color/1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final String eventName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final String startDateTimeString;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final String endDateTimeString;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final String recurTypeString;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final String colorNumberString;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Creates a EventEditCommand object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param index  of question in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param fields to edit."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public EventEditCommand(Index index, HashMap\u003cString, String\u003e fields) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.eventName \u003d fields.get(\"eventName\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.startDateTimeString \u003d fields.get(\"startDateTime\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.endDateTimeString \u003d fields.get(\"endDateTime\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.recurTypeString \u003d fields.get(\"recur\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.colorNumberString \u003d fields.get(\"color\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d model.getVEventList().size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        //map vEvent to event type for ease of referencing and DRY principle"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        VEvent vEventObject \u003d model.getVEvent(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        Event eventObject \u003d EventUtil.vEventToEventMapper(vEventObject);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        String eventName \u003d (!this.eventName.isBlank())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                ? this.eventName"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                : eventObject.getEventName();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        String colorNumberString \u003d (!this.colorNumberString.isBlank())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                ? this.eventName"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                : eventObject.getColorCategory();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        LocalDateTime startDateTime \u003d (!this.startDateTimeString.isBlank())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                ? LocalDateTime.parse(this.startDateTimeString)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                : eventObject.getStartDateTime();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        LocalDateTime endDateTime \u003d (!this.endDateTimeString.isBlank())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                ? LocalDateTime.parse(this.endDateTimeString)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                : eventObject.getEndDateTime();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        RecurrenceRule recurrenceRule;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (this.recurTypeString.isBlank()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            recurrenceRule \u003d vEventObject.getRecurrenceRule();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                recurrenceRule \u003d EventUtil.stringToRecurrenceRule(this.recurTypeString);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            } catch (IllegalValueException ex) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                throw new CommandException(ex.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        vEventObject \u003d new VEvent();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        vEventObject.setSummary(eventName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        vEventObject.setDateTimeStart(startDateTime);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        vEventObject.setDateTimeEnd(endDateTime);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        vEventObject.setUniqueIdentifier(EventAddCommand.UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        vEventObject.setRecurrenceRule(recurrenceRule);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        Categories colorCategory \u003d new Categories(colorNumberString);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        ArrayList\u003cCategories\u003e colorCategoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        colorCategoryList.add(colorCategory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        vEventObject.setCategories(colorCategoryList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        model.setVEvent(index, vEventObject);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return new CommandResult(\"stubbed event edit success message\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param question that has been added."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private String generateSuccessMessage(Question question) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return \"Edited question: \" + question;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (!(other instanceof EventEditCommand)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        //state check"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        EventEditCommand e \u003d (EventEditCommand) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            \u0026\u0026 eventName.equals(e.eventName)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            \u0026\u0026 startDateTimeString.equals(e.startDateTimeString)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            \u0026\u0026 endDateTimeString.equals(e.endDateTimeString)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            \u0026\u0026 recurTypeString.equals(e.recurTypeString)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            \u0026\u0026 colorNumberString.equals(e.colorNumberString);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/EventIndexCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import org.apache.commons.math3.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.CommandResultType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Returns the index of event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class EventIndexCommand extends EventCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Gets Index of a Event\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            + \"Example: event indexOf/cs2100 lecture\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final String desiredEventName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Find the index of event with the same eventName"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param desiredEventName used to find event."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public EventIndexCommand(String desiredEventName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(desiredEventName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.desiredEventName \u003d desiredEventName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        List\u003cPair\u003cIndex, VEvent\u003e\u003e resultVEventIndexList \u003d model.findVEventsIndex(desiredEventName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (resultVEventIndexList.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            Pair\u003cIndex, VEvent\u003e suggestedEventPair \u003d model.findMostSimilarVEvent(desiredEventName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return new CommandResult(generateSuggestionMessage(suggestedEventPair), CommandResultType.SHOW_SCHEDULE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return new CommandResult(generateResultMessage(resultVEventIndexList), CommandResultType.SHOW_SCHEDULE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Generates a result VEvent List success message. Which includes the index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param resultVEventIndexList a list of pair of VEvents and their indexes which have the same eventName"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private String generateResultMessage(List\u003cPair\u003cIndex, VEvent\u003e\u003e resultVEventIndexList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        StringBuilder resultStringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        for (Pair\u003cIndex, VEvent\u003e indexVEventPair : resultVEventIndexList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            resultStringBuilder.append(formatIndexVEventPair(indexVEventPair));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return resultStringBuilder.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Generates a result VEvent suggestion message."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param resultVEventPair the index, vEvent pair that is to be shown to the user"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private String generateSuggestionMessage(Pair\u003cIndex, VEvent\u003e resultVEventPair) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        Index vEventIndex \u003d resultVEventPair.getKey();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        VEvent vEvent \u003d resultVEventPair.getValue();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return \"Could not find event specified. Did you mean this event: \\n\" + formatIndexVEventPair(resultVEventPair);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Formats a Index, VEvent pair to a presentable form"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param indexVEventPair the index, vEvent pair that is to be shown to the user"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private String formatIndexVEventPair(Pair\u003cIndex, VEvent\u003e indexVEventPair) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        Index vEventIndex \u003d indexVEventPair.getKey();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        VEvent vEvent \u003d indexVEventPair.getValue();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return String.format(\"Index: %d | event name: %s | start datetime: %s | end datetime: %s\\n\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                vEventIndex.getOneBased(), vEvent.getSummary().getValue(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                vEvent.getDateTimeStart().getValue().toString(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                vEvent.getDateTimeEnd().getValue().toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (!(other instanceof EventIndexCommand)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        EventIndexCommand e \u003d (EventIndexCommand) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return desiredEventName.equals(e.desiredEventName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 3,
      "lumwb": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/group/GroupAddStudentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.logic.commands.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": " * Represents an add student command, specific to a group."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class GroupAddStudentCommand extends GroupCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an existing student to an existing group\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"groupID/ [GROUP_ID]\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Example: groupID/G03\\n\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"studentNumber/ [STUDENT_NUMBER]\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Example: studentNumber/31 (Specifies the 31st student in the student list)\\n\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"groupIndexNumber/ [INDEX_NUMBER]\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Example: groupIndexNumber/ 2 (Specifies the index number in the group to add to)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Full Example: group groupID/G03 studentNumber/1 groupIndexNumber/2 --\u003e adds Student\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"1 to G03 assigning group\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \" index number 2 \\n\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private final String groupId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private final int studentNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private final int groupIndexNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Creates a QuizAddQuestionCommand instance with the appropriate attributes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param groupId       The identifier of the group."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param studentNumber The student\u0027s index number."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public GroupAddStudentCommand(String groupId, int studentNumber, int groupIndexNumber) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.groupId \u003d groupId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.studentNumber \u003d studentNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.groupIndexNumber \u003d groupIndexNumber;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Executes the user command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @return The result of the command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alages97"
        },
        "content": "        model.addStudentToGroup(groupId, studentNumber, groupIndexNumber);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return new CommandResult(generateSuccessMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @return The String representation of a success message."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private String generateSuccessMessage() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return \"Added student: \" + studentNumber + \" to group: \" + groupId;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (!(other instanceof GroupAddStudentCommand)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alages97"
        },
        "content": "        GroupAddStudentCommand e \u003d (GroupAddStudentCommand) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return this.groupId.equals(e.groupId);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alages97": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/group/GroupCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.logic.commands.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": " * Represents a group command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": "public abstract class GroupCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"group\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alages97": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/group/GroupCreateManuallyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.logic.commands.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": " * Represents an group create command (manual)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class GroupCreateManuallyCommand extends GroupCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a group manually.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"manual/\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Example: manual/\\n\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"groupID/ [GROUP_ID]\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Example: groupID/ G03\\n\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"studentNumber/ [STUDENT_NUMBER]\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Example: studentNumber/ 1 3 5 (Adds students 1, 3 and 5 in the student list to the group)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Full Example: group manual/ groupID/G01 studentNumber/1 2 3 --\u003e adds student 1,2 and 3 to group G01\\n\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private final String groupId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private final ArrayList\u003cInteger\u003e studentNumbers;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Creates a QuizCreateManuallyCommand instance with the appropriate attributes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param fields The fields to be edited, including quizID and questions."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public GroupCreateManuallyCommand(HashMap\u003cString, String\u003e fields) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": "        String groupId \u003d fields.get(\"groupID\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alages97"
        },
        "content": "        String studentNumbersKey \u003d fields.get(\"studentNumbers\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alages97"
        },
        "content": "        String[] splitStudentNumbers \u003d studentNumbersKey.split(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alages97"
        },
        "content": "        ArrayList\u003cInteger\u003e studentNumbers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alages97"
        },
        "content": "        for (String s : splitStudentNumbers) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alages97"
        },
        "content": "            studentNumbers.add(Integer.parseInt(s));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.groupId \u003d groupId;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.studentNumbers \u003d studentNumbers;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Executes the user command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @return The result of the command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alages97"
        },
        "content": "        model.createGroupManually(groupId, studentNumbers);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return new CommandResult(generateSuccessMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @return The String representation of a success message."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private String generateSuccessMessage() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alages97"
        },
        "content": "        int numStudents \u003d studentNumbers.size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (numStudents \u003d\u003d 1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return \"Created group: \" + groupId + \" with \" + numStudents + \" student.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alages97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return \"Created quiz: \" + groupId + \" with \" + studentNumbers.size() + \" students.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (!(other instanceof GroupCreateManuallyCommand)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alages97"
        },
        "content": "        GroupCreateManuallyCommand e \u003d (GroupCreateManuallyCommand) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return this.groupId.equals(e.groupId);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alages97": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/group/GroupGetStudentsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.logic.commands.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": " * Represents a get students command, specific to a group."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class GroupGetStudentsCommand extends GroupCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Gets the students from a group\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"groupID/ [GROUP_ID]\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Example: groupID/ G03\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Full Example: group groupID/G03 --\u003e lists all students in G03 \\n\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private final String groupId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Creates a GroupGetStudentsCommand instance with the appropriate attributes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param groupId The identifier of the group."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public GroupGetStudentsCommand(String groupId) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.groupId \u003d groupId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Executes the user command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @return The result of the command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return new CommandResult(generateSuccessMessage(model.getStudentsFromGroup(groupId)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param message The relevant message from the model."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @return The String representation of a success message."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private String generateSuccessMessage(String message) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alages97"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return \"These are the students in \" + groupId + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alages97"
        },
        "content": "                + message;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alages97": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/group/GroupRemoveStudentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.logic.commands.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": " * Represents an remove student command, specific to a group."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class GroupRemoveStudentCommand extends GroupCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes an existing student from an existing group\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"groupId/ [GROUP_ID]\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Example: groupId/ G03\\n\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"groupIndexNumber/ [INDEX_NUMBER]\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Example: groupIndexNumber/ 2 (Specifies the student number in the group to remove)\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Full Example: group groupID/G03 groupIndexNumber/1 --\u003e removes student with index number 1 from G03\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private final String groupId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private final int groupIndexNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Creates a QuizRemoveQuestionCommand instance with the appropriate attributes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param groupId The identifier of the quiz."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param groupIndexNumber The question number of the quiz to be removed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public GroupRemoveStudentCommand(String groupId, int groupIndexNumber) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.groupId \u003d groupId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.groupIndexNumber \u003d groupIndexNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Executes the user command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @return The result of the command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alages97"
        },
        "content": "        model.removeStudentFromGroup(groupId, groupIndexNumber);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return new CommandResult(generateSuccessMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @return The String representation of a success message."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private String generateSuccessMessage() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return \"Removed student: \" + groupIndexNumber + \" from group: \" + groupId;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (!(other instanceof GroupRemoveStudentCommand)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alages97"
        },
        "content": "        GroupRemoveStudentCommand e \u003d (GroupRemoveStudentCommand) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return this.groupId.equals(e.groupId);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alages97": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/NoteAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_NOTE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Creates a new note to be added to the note list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class NoteAddCommand extends NoteCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new note\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"note/{Note Title}\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"desc/{Description}\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"ALL fields are required\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"Example: note note/Tuesday desc/Grade 6A prelim papers.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Note added: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final Note toAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Creates a NoteAddCommand to add the specified {@code Note}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param note to set."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public NoteAddCommand(Note note) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        toAdd \u003d note;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (model.hasNote(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        model.addNote(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                || (other instanceof NoteAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u0026\u0026 toAdd.equals(((NoteAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/NoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Represents a Note Command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public abstract class NoteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"note\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/NoteDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Deletes a note identified using it\u0027s displayed index from the notes record."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class NoteDeleteCommand extends NoteCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \" delete {index}: deletes the note identified by the index number used in the displayed notes list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"Note: {index} must be a positive integer\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"Example: note delete 3\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_DELETE_NOTE_SUCCESS \u003d \"Deleted Note: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public NoteDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        List\u003cNote\u003e lastShownList \u003d model.getFilteredNotesList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Note noteToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        model.deleteNote(noteToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_NOTE_SUCCESS, noteToDelete));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                || (other instanceof NoteDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((NoteDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/NoteEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_NOTE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Edits the note details in the note list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class NoteEditCommand extends NoteCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits an existing note\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"INDEX: (must be a positive integer) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"note/{Title}\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"desc/{Description}\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"Example: note 1 note/tuesday and wednesday desc/grade papers\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_EDIT_NOTE_SUCCESS \u003d \"Edited Note: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final EditNoteDescriptor editNoteDescriptor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param index of the note in the filtered notes list to edit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param editNotesDescriptor details to edit the notes with"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public NoteEditCommand(Index index, EditNoteDescriptor editNotesDescriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(editNotesDescriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.editNoteDescriptor \u003d new EditNoteDescriptor(editNotesDescriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        List\u003cNote\u003e lastShownList \u003d model.getFilteredNotesList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Note noteToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Note editedNote \u003d createEditedNote(noteToEdit, editNoteDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (!noteToEdit.isSameNote(editedNote) \u0026\u0026 model.hasNote(editedNote)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        model.setNote(noteToEdit, editedNote);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        model.updateFilteredNotesList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_NOTE_SUCCESS, editedNote));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Creates and returns a {@code Note} with the details of {@code noteToEdit}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * edited with {@code editNoteDescriptor}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static Note createEditedNote(Note noteToEdit, EditNoteDescriptor editNoteDescriptor) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        assert noteToEdit !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        String updatedNote \u003d !editNoteDescriptor.getNote().get().equals(\"\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                ? editNoteDescriptor.getNote().get()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                : noteToEdit.getNote();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        String updatedDescription \u003d !editNoteDescriptor.getDescription().get().equals(\"\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                ? editNoteDescriptor.getDescription().get()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                : noteToEdit.getDescription();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new Note(updatedNote, updatedDescription);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (!(other instanceof NoteEditCommand)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        NoteEditCommand e \u003d (NoteEditCommand) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u0026\u0026 editNoteDescriptor.equals(e.editNoteDescriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Stores the details to edit the note with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * corresponding field value of the note."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static class EditNoteDescriptor {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        private String note;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        public EditNoteDescriptor() {}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "         * Creates object of details to edit a Note object."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        public EditNoteDescriptor(NoteEditCommand.EditNoteDescriptor toCopy) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            setNote(toCopy.note);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return CollectionUtil.isAnyNonNull(note, description);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        public void setNote(String note) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            this.note \u003d note;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        public Optional\u003cString\u003e getNote() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return Optional.ofNullable(note);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        public void setDescription(String description) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            if (!(other instanceof NoteEditCommand.EditNoteDescriptor)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            NoteEditCommand.EditNoteDescriptor e \u003d (NoteEditCommand.EditNoteDescriptor) other;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return getNote().equals(e.getNote())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 163
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/NoteListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.ReadOnlyNotesRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Lists the summary of notes in note list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class NoteListCommand extends NoteCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all notes\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        model.updateFilteredNotesList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new CommandResult(generateSuccessMessage(model.getNotesRecord()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param notesRecord The relevant notes record from the model."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @return The String representation of a success message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private String generateSuccessMessage(ReadOnlyNotesRecord notesRecord) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return \"This is the list of notes: \" + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                + notesRecord;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/question/QuestionAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.logic.commands.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.McqQuestion;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.OpenEndedQuestion;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Creates a new question to be added to the question list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class QuestionAddCommand extends QuestionCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new question\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Parameters:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"question/ [TOPIC]\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Example: question/ What is the year that Singapore gained independence?\\n\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"answer/ [ANSWER]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Example: answer/ 1965\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"type/ [TYPE: open/mcq]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Example: type/ open\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"a/ [OPTION (*ONLY FOR MCQ)]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Example: a/ 1945\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"b/ [OPTION (*ONLY FOR MCQ)]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Example: b/ 1941\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"c/ [OPTION (*ONLY FOR MCQ)]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Example: c/ 1942\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"d/ [OPTION (*ONLY FOR MCQ)]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Example: d/ 1943\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String optionA \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String optionB \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String optionC \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String optionD \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Creates a QuestionAddCommand object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question to set."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param answer   to the question."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param type     of question e.g open or mcq."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionAddCommand(String question, String answer, String type) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        requireAllNonNull(question);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Creates a QuestionAddCommand object with MCQ options."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question to set."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param answer   to the question."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param type     of question e.g open or mcq."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param optionA  of question."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param optionB  of question."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param optionC  of question."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param optionD  of question."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionAddCommand(String question, String answer, String type, String optionA,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String optionB, String optionC, String optionD) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        requireAllNonNull(question);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.optionA \u003d optionA;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.optionB \u003d optionB;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.optionC \u003d optionC;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.optionD \u003d optionD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Question question;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // TODO: Throw exception if type does not exist"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        case \"open\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            question \u003d new OpenEndedQuestion(this.question, this.answer);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        case \"mcq\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            question \u003d new McqQuestion(this.question, this.answer, optionA, optionB, optionC,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                optionD);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            question \u003d new OpenEndedQuestion(this.question, this.answer);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        model.addQuestion(question);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return new CommandResult(generateSuccessMessage(question));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question that has been added."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String generateSuccessMessage(Question question) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return \"Added question: \" + question;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (!(other instanceof QuestionAddCommand)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionAddCommand e \u003d (QuestionAddCommand) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return question.equals(e.question)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \u0026\u0026 answer.equals(e.answer)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \u0026\u0026 type.equals(e.type);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 129,
      "alages97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/question/QuestionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.logic.commands.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Represents a question command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public abstract class QuestionCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"question\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/question/QuestionDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.logic.commands.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Deletes a question in the question list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class QuestionDeleteCommand extends QuestionCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" [index]: Deletes a question\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Note: index has to be greater than 0\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Creates a QuestionDeleteCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param index of question to delete from the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionDeleteCommand(Index index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d model.getAllQuestions().size()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return new CommandResult(generateSuccessMessage(model.deleteQuestion(index)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question that has been deleted."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String generateSuccessMessage(Question question) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return \"Deleted question: \" + question;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            || (other instanceof QuestionDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \u0026\u0026 index.equals(((QuestionDeleteCommand) other).index)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/question/QuestionEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.logic.commands.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.McqQuestion;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.OpenEndedQuestion;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Edits the question details in the question list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class QuestionEditCommand extends QuestionCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" [index]: Edits a question\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Parameters(All are optional):\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"topic/ [TOPIC]\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Example: topic/ What is the year that Singapore gained independence?\\n\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"answer/ [ANSWER]\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Example: answer/ 1965\\n\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"type/ [TYPE: open/mcq]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Example: type/ open\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String optionA \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String optionB \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String optionC \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String optionD \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Creates a QuestionEditCommand object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param index  of question in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param fields to edit."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionEditCommand(Index index, HashMap\u003cString, String\u003e fields) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.question \u003d fields.get(\"question\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.answer \u003d fields.get(\"answer\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.type \u003d fields.get(\"type\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Creates a QuestionEditCommand object with MCQ options."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param index   of question in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param fields  to edit."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param options for mcq."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionEditCommand(Index index, HashMap\u003cString, String\u003e fields,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        HashMap\u003cString, String\u003e options) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.question \u003d fields.get(\"question\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.answer \u003d fields.get(\"answer\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.type \u003d fields.get(\"type\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.optionA \u003d options.get(\"optionA\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.optionB \u003d options.get(\"optionB\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.optionC \u003d options.get(\"optionC\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.optionD \u003d options.get(\"optionD\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d model.getAllQuestions().size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Question questionObj \u003d model.getQuestion(index);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String question \u003d (!this.question.isBlank()) ? this.question : questionObj.getQuestion();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String answer \u003d (!this.answer.isBlank()) ? this.answer : questionObj.getAnswer();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (!type.isBlank()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            case \"open\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                questionObj \u003d new OpenEndedQuestion(question, answer);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            case \"mcq\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                formatMcqOptions(questionObj);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                questionObj \u003d new McqQuestion(question, answer, optionA, optionB, optionC, optionD);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                questionObj \u003d new OpenEndedQuestion(question, answer);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            questionObj.setQuestion(question);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            questionObj.setAnswer(answer);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            if (questionObj instanceof McqQuestion) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                formatMcqOptions(questionObj);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                questionObj \u003d new McqQuestion(question, answer, optionA, optionB, optionC, optionD);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        model.setQuestion(index, questionObj);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return new CommandResult(generateSuccessMessage(questionObj));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question that has been added."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String generateSuccessMessage(Question question) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return \"Edited question: \" + question;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets the mcq options to either the new value or the stored value."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param questionObj from list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private void formatMcqOptions(Question questionObj) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        optionA \u003d (!this.optionA.isBlank()) ? this.optionA"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            : ((McqQuestion) questionObj).getOptionA();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        optionB \u003d (!this.optionB.isBlank()) ? this.optionB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            : ((McqQuestion) questionObj).getOptionB();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        optionC \u003d (!this.optionC.isBlank()) ? this.optionC"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            : ((McqQuestion) questionObj).getOptionC();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        optionD \u003d (!this.optionD.isBlank()) ? this.optionD"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            : ((McqQuestion) questionObj).getOptionD();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (!(other instanceof QuestionEditCommand)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionEditCommand e \u003d (QuestionEditCommand) other;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \u0026\u0026 question.equals(e.question)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \u0026\u0026 answer.equals(e.answer)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \u0026\u0026 type.equals(e.type);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 155
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/question/QuestionListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.logic.commands.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Creates a new question to be added to the question list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class QuestionListCommand extends QuestionCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" list: List summary of questions\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return new CommandResult(model.getQuestionsSummary());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/question/QuestionSlideshowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.logic.commands.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.CommandResultType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Starts a slideshow based on the questions selected."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class QuestionSlideshowCommand extends QuestionCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        COMMAND_WORD + \" slideshow [question no(s).]: Start a questions slideshow\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            + \"Example: slideshow 1 2 3\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            + \"(This will start a slideshow with question 1, 2 and 3)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final List\u003cIndex\u003e questionIndexes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionSlideshowCommand(String questionsInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        questionIndexes \u003d Arrays.stream(questionsInput"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            .split(\" \"))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            .map((x) -\u003e Index.fromOneBased(Integer.parseInt(x)))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        model.setSlideshowQuestions(questionIndexes);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new CommandResult(\"Starting slideshow.\", CommandResultType.SHOW_SLIDESHOW);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 2,
      "Russell-Loh-NUS": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizAddQuestionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Represents an add question command, specific to a quiz."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "public class QuizAddQuestionCommand extends QuizCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an existing question to an existing quiz\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"add quizID/ [QUIZ_ID]\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Example: quizID/ CS2103T Finals\\n\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"questionNumber/ [QUESTION_NUMBER]\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Example: questionNumber/ 3 (Specifies the third question in the question bank)\\n\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"quizQuestionNumber/ [QUIZ_QUESTION_NUMBER]\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Example: quizQuestionNumber/ 2 (Specifies the question number in the quiz to add to)\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private final String quizId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private final int questionNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private final int quizQuestionNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Creates a QuizAddQuestionCommand instance with the appropriate attributes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The identifier of the quiz."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param questionNumber The question number in the question bank to be added."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizQuestionNumber The quiz question number to be added to."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public QuizAddQuestionCommand(String quizId, int questionNumber, int quizQuestionNumber) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.quizId \u003d quizId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.questionNumber \u003d questionNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.quizQuestionNumber \u003d quizQuestionNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Executes the user command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The result of the command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        boolean isSuccess \u003d model.addQuizQuestion(quizId, questionNumber, quizQuestionNumber);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (isSuccess) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return new CommandResult(generateSuccessMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return new CommandResult(generateFailureMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The String representation of a success message."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private String generateSuccessMessage() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return \"Added question: \" + questionNumber + \" to quiz: \" + quizId + \".\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Generates a command execution failure message."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The String representation of a failure message."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private String generateFailureMessage() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return \"There is no quiz with the ID of \" + quizId + \".\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (!(other instanceof QuizAddQuestionCommand)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        QuizAddQuestionCommand e \u003d (QuizAddQuestionCommand) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return this.quizId.equals(e.quizId);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fabbbbbbyy": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Represents a question command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "public abstract class QuizCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"quiz\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fabbbbbbyy": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizCreateAutomaticallyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Represents an quiz create command (automatic)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "public class QuizCreateAutomaticallyCommand extends QuizCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a quiz automatically.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"auto/\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Example: auto/\\n\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"quizID/ [QUIZ_ID]\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Example: quizID/ CS2103T Finals\\n\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"numQuestions/ [NUM_QUESTIONS]\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Example: numQuestions/ 10 (The quiz will have 10 questions.)\\n\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"type/ [TYPE: open, mcq, all]\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Example: type/ open (Specifies the question type for the quiz)\\n\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private final String quizId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private final int numQuestions;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Creates a QuizCreateAutomaticallyCommand instance with the appropriate attributes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The identifier of the quiz."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param numQuestions The number of questions to add to the quiz."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param type The type of questions to add to the quiz."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public QuizCreateAutomaticallyCommand(String quizId, int numQuestions, String type) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.quizId \u003d quizId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.numQuestions \u003d numQuestions;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Executes the user command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The result of the command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        model.createQuizAutomatically(quizId, numQuestions, type);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return new CommandResult(generateSuccessMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The String representation of a success message."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private String generateSuccessMessage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (numQuestions \u003d\u003d 1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return \"Created Quiz: \" + quizId + \" with \" + numQuestions + \" question.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return \"Created Quiz: \" + quizId + \" with \" + numQuestions + \" questions.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (!(other instanceof QuizCreateAutomaticallyCommand)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        QuizCreateAutomaticallyCommand e \u003d (QuizCreateAutomaticallyCommand) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return this.quizId.equals(e.quizId);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fabbbbbbyy": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizCreateManuallyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Represents an quiz create command (manual)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "public class QuizCreateManuallyCommand extends QuizCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a quiz manually.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"manual/\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Example: manual/\\n\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"quizID/ [QUIZ_ID]\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Example: quizID/ CS2103T Finals\\n\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"questionNumber/ [QUESTION_NUMBER]\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Example: questionNumber/ 1 3 5 (Adds questions 1, 3 and 5 in the question bank to the quiz)\\n\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private final String quizId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private final ArrayList\u003cInteger\u003e questionNumbers;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Creates a QuizCreateManuallyCommand instance with the appropriate attributes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param fields The fields to be edited, including quizID and questions."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public QuizCreateManuallyCommand(HashMap\u003cString, String\u003e fields) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        String quizId \u003d fields.get(\"quizID\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        String questionNumbersKey \u003d fields.get(\"questionNumbers\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        String[] splitQuestionNumbers \u003d questionNumbersKey.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        ArrayList\u003cInteger\u003e questionNumbers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        for (String s : splitQuestionNumbers) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            questionNumbers.add(Integer.parseInt(s));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.quizId \u003d quizId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.questionNumbers \u003d questionNumbers;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Executes the user command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The result of the command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        model.createQuizManually(quizId, questionNumbers);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return new CommandResult(generateSuccessMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The String representation of a success message."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private String generateSuccessMessage() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        int numQuestions \u003d questionNumbers.size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (numQuestions \u003d\u003d 1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return \"Created quiz: \" + quizId + \" with \" + numQuestions + \" question.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return \"Created quiz: \" + quizId + \" with \" + questionNumbers.size() + \" questions.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (!(other instanceof QuizCreateManuallyCommand)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        QuizCreateManuallyCommand e \u003d (QuizCreateManuallyCommand) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return this.quizId.equals(e.quizId);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fabbbbbbyy": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizExportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Represents an export command, specific to a quiz."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "public class QuizExportCommand extends QuizCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \": Exports the questions \u0026 answers for a quiz to a html file\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"export/ quizID/ [QUIZ_ID]\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Example: export/ quizID/ CS2103T Finals\\n\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private final String quizId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Creates a QuizExportCommand instance with the appropriate attributes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The identifier of the quiz."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public QuizExportCommand(String quizId) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.quizId \u003d quizId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Executes the user command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The result of the command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        boolean isSuccess \u003d model.exportQuiz(quizId);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (isSuccess) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return new CommandResult(generateSuccessMessage(quizId));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return new CommandResult(generateFailureMessage(quizId));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param message The relevant message from the model."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The String representation of a success message."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private String generateSuccessMessage(String message) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return \"Successfully exported to \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                + message + \".html in your current directory.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Generates a command execution failure message."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param message The relevant message from the model."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The String representation of a failure message."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private String generateFailureMessage(String message) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return \"Failed to export because file \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                + message + \".html already exists.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fabbbbbbyy": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizGetQuestionsAndAnswersCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Represents a list command, specific to a quiz."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "public class QuizGetQuestionsAndAnswersCommand extends QuizCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Gets the questions \u0026 answers for a quiz\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"list quizID/ [QUIZ_ID]\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Example: quizID/ CS2103T Finals\\n\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private final String quizId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Creates a QuizGetQuestionsAndAnswersCommand instance with the appropriate attributes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The identifier of the quiz."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public QuizGetQuestionsAndAnswersCommand(String quizId) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.quizId \u003d quizId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Executes the user command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The result of the command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return new CommandResult(generateSuccessMessage(model.getQuestionsAndAnswers(quizId)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param message The relevant message from the model."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The String representation of a success message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private String generateSuccessMessage(String message) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return \"These are the questions \u0026 answers for \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                    + message;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fabbbbbbyy": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizRemoveQuestionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Represents a remove question command, specific to a quiz."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "public class QuizRemoveQuestionCommand extends QuizCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes an existing question from an existing quiz\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"delete quizID/ [QUIZ_ID]\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Example: quizID/ CS2103T Finals\\n\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"quizQuestionNumber/ [QUIZ_QUESTION_NUMBER]\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            + \"Example: quizQuestionNumber/ 2 (Specifies the question number in the quiz to remove)\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private final String quizId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private final int quizQuestionNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Creates a QuizRemoveQuestionCommand instance with the appropriate attributes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The identifier of the quiz."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizQuestionNumber The question number of the quiz to be removed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public QuizRemoveQuestionCommand(String quizId, int quizQuestionNumber) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.quizId \u003d quizId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.quizQuestionNumber \u003d quizQuestionNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Executes the user command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The result of the command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        boolean isSuccess \u003d model.removeQuizQuestion(quizId, quizQuestionNumber);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (isSuccess) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return new CommandResult(generateSuccessMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return new CommandResult(generateFailureMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The String representation of a success message."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private String generateSuccessMessage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return \"Removed question: \" + quizQuestionNumber + \" from quiz: \" + quizId;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Generates a command execution failure message."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The String representation of a failure message."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private String generateFailureMessage() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return \"There is no quiz with the ID of \" + quizId + \".\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (!(other instanceof QuizRemoveQuestionCommand)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        QuizRemoveQuestionCommand e \u003d (QuizRemoveQuestionCommand) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return this.quizId.equals(e.quizId);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fabbbbbbyy": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statistics/StatisticsAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.CommandResultType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Generates a Statistics Report"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class StatisticsAddCommand extends StatisticsCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Generates Statistics Report\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"file/{relative/full excel file path}\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"Example: statistics file/C:\\\\Users\\\\MyUser\\\\Desktop\\\\SampleData.xlsx\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Statistics Generated\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final Statistics toAdd;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Creates a StatisticsAddCommand to add the specified {@code Statistics}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param stats to set."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public StatisticsAddCommand(Statistics stats) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(stats);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        toAdd \u003d stats;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        model.addStatistics(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), CommandResultType.SHOW_STATISTIC);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            || (other instanceof StatisticsAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u0026\u0026 toAdd.equals(((StatisticsAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statistics/StatisticsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Represents a statistics command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public abstract class StatisticsCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"statistics\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/student/StudentAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.CommandResultType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Adds a student to the student record."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class StudentAddCommand extends StudentCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new student\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"student/[STUDENT_NAME]\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Full Example: student student/njoy --\u003e creates new student called njoy\\n\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the student record\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final Student toAdd;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Creates a StudentAddCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param student to set."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public StudentAddCommand(Student student) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireAllNonNull(student);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        toAdd \u003d student;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (model.hasStudent(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        model.addStudent(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new CommandResult(generateSuccessMessage(toAdd), CommandResultType.SHOW_STUDENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param student that has been added."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private String generateSuccessMessage(Student student) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return \"Added student: \" + student;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                || (other instanceof StudentAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u0026\u0026 toAdd.equals(((StudentAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 24,
      "alages97": 36,
      "fabbbbbbyy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/student/StudentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Represents a student command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": "public abstract class StudentCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"student\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alages97": 9,
      "fabbbbbbyy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/student/StudentDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.CommandResultType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Represents a delete student command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class StudentDeleteCommand extends StudentCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" [index]: Deletes a student\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Note: index has to be greater than 0\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Full Example: student delete 1 --\u003e removes student with index number 1\\n\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_DELETE_STUDENT_SUCCESS \u003d \"Deleted Student: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Creates a StudentDeleteCommand object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param targetIndex index of student to delete from the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public StudentDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Student studentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        model.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new CommandResult(generateSuccessMessage(studentToDelete), CommandResultType.SHOW_STUDENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param student that has been added."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private String generateSuccessMessage(Student student) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return \"Deleted student: \" + student;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 23,
      "alages97": 32,
      "fabbbbbbyy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/student/StudentEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.CommandResultType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Represents a student edit command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class StudentEditCommand extends StudentCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits an existing student\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Full example : student 1 student/newname --\u003e changes student in index 1 to new student with newname\\n\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final String MESSAGE_EDIT_STUDENT_SUCCESS \u003d \"Edited Student: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the student storage.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final EditStudentDescriptor editStudentDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Creates a StudentEditCommand object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param index to edit."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public StudentEditCommand(Index index, EditStudentDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.editStudentDescriptor \u003d editPersonDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Student editedStudent \u003d createEditedStudent(studentToEdit, editStudentDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (!editedStudent.isSameStudent(editedStudent) \u0026\u0026 model.hasStudent(editedStudent)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedStudent), CommandResultType.SHOW_STUDENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * edited with {@code editStudentDescriptor}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static Student createEditedStudent(Student studentToEdit, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Name updatedName \u003d editStudentDescriptor.getName().orElse(studentToEdit.getName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return new Student(updatedName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param student that has been added."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private String generateSuccessMessage(Student student) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return \"Edited student: \" + student;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alages97"
        },
        "content": "        StudentEditCommand e \u003d (StudentEditCommand) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u0026\u0026 editStudentDescriptor.equals(e.editStudentDescriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static class EditStudentDescriptor {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        public EditStudentDescriptor() {}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        public EditStudentDescriptor(StudentEditCommand.EditStudentDescriptor toCopy) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            if (!(other instanceof StudentEditCommand.EditStudentDescriptor)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            StudentEditCommand.EditStudentDescriptor e \u003d (StudentEditCommand.EditStudentDescriptor) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return getName().equals(e.getName());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 95,
      "alages97": 56,
      "fabbbbbbyy": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/student/StudentListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.CommandResultType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Represents a list student command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class StudentListCommand extends StudentCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" list: List of students\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all students\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new CommandResult(generateSuccessMessage(model.getStudentSummary()), CommandResultType.SHOW_STUDENT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param message The relevant message from the model."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @return The String representation of a success message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private String generateSuccessMessage(String message) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alages97"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return \"This is the list of students: \" + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alages97"
        },
        "content": "                + message;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 4,
      "alages97": 24,
      "fabbbbbbyy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    // ADDRESS BOOK PREFIX"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"ad/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    // END OF ADDRESS BOOK PREFIX"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    // EVENT PREFIX"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final Prefix PREFIX_EVENT \u003d new Prefix(\"event/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final Prefix PREFIX_EVENT_NAME \u003d new Prefix(\"eventName/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final Prefix PREFIX_START_DATETIME \u003d new Prefix(\"startDateTime/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final Prefix PREFIX_END_DATETIME \u003d new Prefix(\"endDateTime/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final Prefix PREFIX_RECUR \u003d new Prefix(\"recur/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final Prefix PREFIX_COLOR \u003d new Prefix(\"color/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final Prefix PREFIX_GET_INDEX \u003d new Prefix(\"indexOf/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    // END OF EVENT PREFIX"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alages97"
        },
        "content": "    // QUESTION PREFIX"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"question/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"answer/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"type/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final Prefix PREFIX_OPTIONA \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final Prefix PREFIX_OPTIONB \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final Prefix PREFIX_OPTIONC \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final Prefix PREFIX_OPTIOND \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final Prefix PREFIX_SLIDESHOW \u003d new Prefix(\"slideshow\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alages97"
        },
        "content": "    // END OF QUESTION PREFIX"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alages97"
        },
        "content": "    // STUDENT PREFIX"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final Prefix PREFIX_STUDENT \u003d new Prefix(\"student/\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alages97"
        },
        "content": "    // END OF STUDENT PREFIX"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    // NOTE PREFIX"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final Prefix PREFIX_NOTE \u003d new Prefix(\"note/\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"desc/\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    // END OF NOTE PREFIX"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //START OF STATISTICS PREFIX"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final Prefix PREFIX_METHOD \u003d new Prefix(\"method/\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final Prefix PREFIX_FILEPATH \u003d new Prefix(\"file/\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //END IF STATISTICS PREFIX"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static final Prefix PREFIX_ADD \u003d new Prefix(\"add\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static final Prefix PREFIX_EXPORT \u003d new Prefix(\"export\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final Prefix PREFIX_LIST \u003d new Prefix(\"list\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final Prefix PREFIX_DELETE \u003d new Prefix(\"delete\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final Prefix PREFIX_GROUP \u003d new Prefix(\"group/\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final Prefix PREFIX_GROUP_ID \u003d new Prefix(\"groupID/\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final Prefix PREFIX_STUDENT_NUMBER \u003d new Prefix(\"studentNumber/\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final Prefix PREFIX_GROUP_INDEX_NUMBER \u003d new Prefix(\"groupIndexNumber/\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static final Prefix PREFIX_QUIZ \u003d new Prefix(\"quiz/\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static final Prefix PREFIX_MODE_AUTO \u003d new Prefix(\"auto/\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static final Prefix PREFIX_MODE_MANUAL \u003d new Prefix(\"manual/\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static final Prefix PREFIX_QUIZ_ID \u003d new Prefix(\"quizID/\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static final Prefix PREFIX_NUM_QUESTIONS \u003d new Prefix(\"numQuestions/\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static final Prefix PREFIX_QUESTION_NUMBER \u003d new Prefix(\"questionNumber/\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static final Prefix PREFIX_QUIZ_QUESTION_NUMBER \u003d new Prefix(\"quizQuestionNumber/\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 10,
      "lumwb": 10,
      "Russell-Loh-NUS": 16,
      "alages97": 11,
      "-": 15,
      "fabbbbbbyy": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NjoyParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.commands.event.EventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.group.GroupCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.note.NoteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.question.QuestionCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.statistics.StatisticsCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.student.StudentCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.parser.event.EventCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.parser.group.GroupCommandParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.note.NoteCommandParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.parser.question.QuestionCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.parser.quiz.QuizCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.statistics.StatisticsCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.parser.student.StudentCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class NjoyParser {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        case QuizCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return new QuizCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alages97"
        },
        "content": "        case GroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return new GroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        case QuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return new QuestionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        case NoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return new NoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alages97"
        },
        "content": "        case StudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return new StudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        case StatisticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return new StatisticsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        case EventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return new EventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 9,
      "lumwb": 5,
      "alages97": 9,
      "Russell-Loh-NUS": 6,
      "-": 66,
      "fabbbbbbyy": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @return a student name representation"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static seedu.address.model.student.Name parseStudentName(String name) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new seedu.address.model.student.Name(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @return a person name representation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static seedu.address.model.person.Name parsePersonName(String name) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new seedu.address.model.person.Name(trimmedName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 19,
      "-": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/event/EventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.logic.parser.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELETE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATETIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GET_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECUR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATETIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.commands.event.EventAddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.commands.event.EventCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.commands.event.EventDeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.commands.event.EventEditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.commands.event.EventIndexCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Parses input arguments and creates a new {@code EventCommand} object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class EventCommandParser implements Parser\u003cEventCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EventAddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * and returns an EventAddCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public EventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            .tokenize(args, PREFIX_EVENT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                    PREFIX_EVENT_NAME,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                    PREFIX_START_DATETIME,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                    PREFIX_END_DATETIME,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                    PREFIX_RECUR,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                    PREFIX_COLOR,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                    PREFIX_GET_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        boolean isEdit \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            if (!preamble.isBlank()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                index \u003d ParserUtil.parseIndex(preamble);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                isEdit \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EventEditCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                pe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GET_INDEX).isPresent()) { //get Index Of Command"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return indexOfCommand(argMultimap);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_DELETE).isPresent()) { // Delete command"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return deleteCommand(index, argMultimap);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return addCommand(argMultimap);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Performs validation and return the EventDeleteCommand object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param index       of question in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param argMultimap for tokenized input."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @return EventDeleteCommand object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private EventDeleteCommand deleteCommand(Index index, ArgumentMultimap argMultimap)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            int indexToDelete \u003d Integer"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                    .parseInt(argMultimap.getValue(PREFIX_DELETE).orElse(\"0\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            if (indexToDelete \u003c\u003d 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                                EventDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            index.fromOneBased(indexToDelete);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                            EventDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return new EventDeleteCommand(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Performs validation and return the EventAddCommand object."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param argMultimap for tokenized input."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @return EventAddCommand object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private EventAddCommand addCommand(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT_NAME, PREFIX_START_DATETIME,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                PREFIX_END_DATETIME, PREFIX_RECUR, PREFIX_COLOR)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                String"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                    .format(MESSAGE_INVALID_COMMAND_FORMAT, EventAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        String eventName \u003d argMultimap.getValue(PREFIX_EVENT_NAME).orElse(\"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        String startDateTime \u003d argMultimap.getValue(PREFIX_START_DATETIME).orElse(\"\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        String endDateTime \u003d argMultimap.getValue(PREFIX_END_DATETIME).orElse(\"\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        String recurType \u003d argMultimap.getValue(PREFIX_RECUR).orElse(\"\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        String colorNumber \u003d argMultimap.getValue(PREFIX_COLOR).orElse(\"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return new EventAddCommand(eventName, startDateTime, endDateTime, recurType, colorNumber);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Performs validation and return the EventIndexCommand object."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param argMultimap for tokenized input."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @return EventAddCommand object."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private EventIndexCommand indexOfCommand(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GET_INDEX)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                    String"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                            .format(MESSAGE_INVALID_COMMAND_FORMAT, EventIndexCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        String desiredEventName \u003d argMultimap.getValue(PREFIX_GET_INDEX).orElse(\"\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return new EventIndexCommand(desiredEventName);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        Prefix... prefixes) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 159
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/group/GroupCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.logic.parser.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP_INDEX_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODE_MANUAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_NUMBER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alages97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alages97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.group.GroupAddStudentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.group.GroupCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.group.GroupCreateManuallyCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.group.GroupGetStudentsCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.group.GroupRemoveStudentCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alages97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alages97"
        },
        "content": " * Parser to handle commands related to Group."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alages97"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class GroupCommandParser implements Parser\u003cGroupCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the QuizCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * and returns an QuizCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public GroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alages97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alages97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alages97"
        },
        "content": "                .tokenize(args, PREFIX_GROUP, PREFIX_MODE_MANUAL,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alages97"
        },
        "content": "                        PREFIX_GROUP_ID, PREFIX_STUDENT_NUMBER,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alages97"
        },
        "content": "                        PREFIX_GROUP_INDEX_NUMBER, PREFIX_TYPE, PREFIX_LIST);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODE_MANUAL).isPresent()) { // Create manual command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alages97"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_GROUP_ID, PREFIX_STUDENT_NUMBER)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alages97"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alages97"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alages97"
        },
        "content": "                        String"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alages97"
        },
        "content": "                                .format(MESSAGE_INVALID_COMMAND_FORMAT, GroupCreateManuallyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alages97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alages97"
        },
        "content": "            HashMap\u003cString, String\u003e fields \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alages97"
        },
        "content": "            fields.put(\"groupID\", argMultimap.getValue(PREFIX_GROUP_ID).orElse(\"\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alages97"
        },
        "content": "            fields.put(\"studentNumbers\", argMultimap.getValue(PREFIX_STUDENT_NUMBER).orElse(\"\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return new GroupCreateManuallyCommand(fields);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alages97"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_STUDENT_NUMBER).isPresent()) { // Add command"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alages97"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_GROUP_ID, PREFIX_GROUP_INDEX_NUMBER)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alages97"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alages97"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alages97"
        },
        "content": "                        String"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alages97"
        },
        "content": "                                .format(MESSAGE_INVALID_COMMAND_FORMAT, GroupAddStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alages97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alages97"
        },
        "content": "            String groupId \u003d argMultimap.getValue(PREFIX_GROUP_ID).orElse(\"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alages97"
        },
        "content": "            int studentNumber \u003d Integer.parseInt(argMultimap.getValue(PREFIX_STUDENT_NUMBER).orElse(\"\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alages97"
        },
        "content": "            int groupIndexNumber \u003d Integer.parseInt(argMultimap.getValue(PREFIX_GROUP_INDEX_NUMBER).orElse(\"\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return new GroupAddStudentCommand(groupId, studentNumber, groupIndexNumber);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alages97"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_GROUP_INDEX_NUMBER).isPresent()) { // Remove command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alages97"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_GROUP_ID)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alages97"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alages97"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alages97"
        },
        "content": "                        String"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alages97"
        },
        "content": "                                .format(MESSAGE_INVALID_COMMAND_FORMAT, GroupRemoveStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alages97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alages97"
        },
        "content": "            String groupId \u003d argMultimap.getValue(PREFIX_GROUP_ID).orElse(\"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alages97"
        },
        "content": "            int groupIndexNumber \u003d Integer.parseInt(argMultimap.getValue(PREFIX_GROUP_INDEX_NUMBER).orElse(\"\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return new GroupRemoveStudentCommand(groupId, groupIndexNumber);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alages97"
        },
        "content": "        } else { // List command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alages97"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_GROUP_ID)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alages97"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alages97"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alages97"
        },
        "content": "                        String"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alages97"
        },
        "content": "                                .format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alages97"
        },
        "content": "                                        GroupGetStudentsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alages97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alages97"
        },
        "content": "            String groupId \u003d argMultimap.getValue(PREFIX_GROUP_ID).orElse(\"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return new GroupGetStudentsCommand(groupId);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alages97"
        },
        "content": "                                              Prefix... prefixes) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alages97"
        },
        "content": "                .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alages97": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/note/NoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.logic.parser.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.note.NoteAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.note.NoteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.note.NoteDeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.note.NoteEditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.note.NoteEditCommand.EditNoteDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.note.NoteListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Parses input arguments and creates a new {@code NoteCommand} object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class NoteCommandParser implements Parser\u003cNoteCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the note commands"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * and returns an NoteCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public NoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                .tokenize(args, CliSyntax.PREFIX_NOTE, CliSyntax.PREFIX_DESCRIPTION, CliSyntax.PREFIX_LIST,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                        CliSyntax.PREFIX_DELETE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (isEditCommand(argMultimap)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return getNoteEditCommand(argMultimap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } else if (isListCommand(argMultimap)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return getNoteListCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } else if (isDeleteCommand(argMultimap)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return getNoteDeleteCommand(argMultimap);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } else if (isAddCommand(argMultimap)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return getNoteAddCommand(argMultimap);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NoteAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static NoteEditCommand getNoteEditCommand(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, NoteEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        EditNoteDescriptor editNoteDescriptor \u003d new EditNoteDescriptor();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        editNoteDescriptor.setNote(argMultimap.getValue(CliSyntax.PREFIX_NOTE).orElse(\"\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        editNoteDescriptor.setDescription(argMultimap.getValue(CliSyntax.PREFIX_DESCRIPTION).orElse(\"\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new NoteEditCommand(index, editNoteDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static NoteListCommand getNoteListCommand() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new NoteListCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static NoteDeleteCommand getNoteDeleteCommand(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            int indexToDelete \u003d Integer.parseInt(argMultimap.getValue(CliSyntax.PREFIX_DELETE).orElse(\"0\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            if (indexToDelete \u003c\u003d 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, NoteDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            index \u003d Index.fromOneBased(indexToDelete);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, NoteDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new NoteDeleteCommand(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static NoteAddCommand getNoteAddCommand(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        String note \u003d argMultimap.getValue(CliSyntax.PREFIX_NOTE).orElse(\"\").trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        String description \u003d argMultimap.getValue(CliSyntax.PREFIX_DESCRIPTION).orElse(\"\").trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (note.isEmpty() || description.isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, NoteAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new NoteAddCommand(new Note(note, description));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Checks if NoteCommand is of type edit."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static boolean isEditCommand(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (!preamble.isBlank()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Checks if NoteCommand is of type list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static boolean isListCommand(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return argMultimap.getValue(CliSyntax.PREFIX_LIST).isPresent();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Checks if NoteCommand is of type delete."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static boolean isDeleteCommand(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return argMultimap.getValue(CliSyntax.PREFIX_DELETE).isPresent();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Checks if NoteCommand is of type create."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static boolean isAddCommand(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return arePrefixesPresent(argMultimap, CliSyntax.PREFIX_NOTE, CliSyntax.PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/question/QuestionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.logic.parser.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELETE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPTIONA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPTIONB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPTIONC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPTIOND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SLIDESHOW;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.question.QuestionAddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.question.QuestionCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.question.QuestionDeleteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.question.QuestionEditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.question.QuestionListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.question.QuestionSlideshowCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Parses input arguments and creates a new {@code RemarkCommand} object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class QuestionCommandParser implements Parser\u003cQuestionCommand\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreationQuestionCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * and returns an CreateQuestionCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            .tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_TYPE, PREFIX_LIST,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                PREFIX_OPTIONA, PREFIX_OPTIONB, PREFIX_OPTIONC, PREFIX_OPTIOND,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                PREFIX_DELETE, PREFIX_SLIDESHOW);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        boolean isEdit \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            if (!preamble.isBlank()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                index \u003d ParserUtil.parseIndex(preamble);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                isEdit \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, QuestionEditCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                pe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LIST).isPresent()) { // List command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return new QuestionListCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_SLIDESHOW).isPresent()) { // Slideshow command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_SLIDESHOW)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                    String"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                        .format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                            QuestionSlideshowCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            // TODO: Throw exception when no question index is entered"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return new QuestionSlideshowCommand(argMultimap.getValue(PREFIX_SLIDESHOW).orElse(\"\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_DELETE).isPresent()) { // Delete command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return deleteCommand(index, argMultimap);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } else if (isEdit) { // Edit command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return editCommand(index, argMultimap);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } else { // Create command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return addCommand(argMultimap);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Performs validation and return the QuestionAddCommand object."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param argMultimap for tokenized input."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return QuestionAddCommand object."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private QuestionAddCommand addCommand(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_TYPE)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                String"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                    .format(MESSAGE_INVALID_COMMAND_FORMAT, QuestionAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String question \u003d argMultimap.getValue(PREFIX_QUESTION).orElse(\"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String answer \u003d argMultimap.getValue(PREFIX_ANSWER).orElse(\"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String typeName \u003d argMultimap.getValue(PREFIX_TYPE).orElse(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // Only for mcq"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // TODO: Check missing options and throw exception if necessary"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String optionA \u003d argMultimap.getValue(PREFIX_OPTIONA).orElse(\"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String optionB \u003d argMultimap.getValue(PREFIX_OPTIONB).orElse(\"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String optionC \u003d argMultimap.getValue(PREFIX_OPTIONC).orElse(\"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String optionD \u003d argMultimap.getValue(PREFIX_OPTIOND).orElse(\"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (typeName.equals(\"mcq\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return new QuestionAddCommand(question, answer, typeName, optionA, optionB, optionC,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                optionD);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return new QuestionAddCommand(question, answer, typeName);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Performs validation and return the QuestionEditCommand object."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param index       of question in the list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param argMultimap for tokenized input."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return QuestionEditCommand object."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private QuestionEditCommand editCommand(Index index, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // Add parameters to be edited. Note: the fields are optional"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // options is compulsory for mcq"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        HashMap\u003cString, String\u003e fields \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String question \u003d argMultimap.getValue(PREFIX_QUESTION).orElse(\"\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String answer \u003d argMultimap.getValue(PREFIX_ANSWER).orElse(\"\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String typeName \u003d argMultimap.getValue(PREFIX_TYPE).orElse(\"\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"question\", question);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"answer\", answer);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"type\", typeName);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        options.put(\"optionA\", argMultimap.getValue(PREFIX_OPTIONA).orElse(\"\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        options.put(\"optionB\", argMultimap.getValue(PREFIX_OPTIONB).orElse(\"\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        options.put(\"optionC\", argMultimap.getValue(PREFIX_OPTIONC).orElse(\"\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        options.put(\"optionD\", argMultimap.getValue(PREFIX_OPTIOND).orElse(\"\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return new QuestionEditCommand(index, fields, options);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Performs validation and return the QuestionDeleteCommand object."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param index       of question in the list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param argMultimap for tokenized input."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return QuestionDeleteCommand object."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private QuestionDeleteCommand deleteCommand(Index index, ArgumentMultimap argMultimap)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            int indexToDelete \u003d Integer"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                .parseInt(argMultimap.getValue(PREFIX_DELETE).orElse(\"0\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            if (indexToDelete \u003c\u003d 0) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                        QuestionDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            index.fromOneBased(indexToDelete);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                    QuestionDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return new QuestionDeleteCommand(index);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Prefix... prefixes) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 194
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/quiz/QuizCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "package seedu.address.logic.parser.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELETE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODE_AUTO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODE_MANUAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUM_QUESTIONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION_NUMBER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUIZ;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUIZ_ID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUIZ_QUESTION_NUMBER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizAddQuestionCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizCreateAutomaticallyCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizCreateManuallyCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizExportCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizGetQuestionsAndAnswersCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizRemoveQuestionCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Parses input arguments and creates a new {@code RemarkCommand} object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "public class QuizCommandParser implements Parser\u003cQuizCommand\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the QuizCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * and returns an QuizCommand object for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public QuizCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                .tokenize(args, PREFIX_ADD, PREFIX_DELETE, PREFIX_QUIZ, PREFIX_MODE_AUTO, PREFIX_MODE_MANUAL,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                        PREFIX_QUIZ_ID, PREFIX_NUM_QUESTIONS, PREFIX_QUESTION_NUMBER,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                        PREFIX_EXPORT, PREFIX_QUIZ_QUESTION_NUMBER, PREFIX_TYPE, PREFIX_LIST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODE_AUTO).isPresent()) { // Create auto command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_QUIZ_ID, PREFIX_NUM_QUESTIONS, PREFIX_TYPE)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                        String"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                .format(MESSAGE_INVALID_COMMAND_FORMAT, QuizCreateAutomaticallyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            String quizId \u003d argMultimap.getValue(PREFIX_QUIZ_ID).orElse(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            int numQuestions \u003d Integer.parseInt(argMultimap.getValue(PREFIX_NUM_QUESTIONS).orElse(\"\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            String typeName \u003d argMultimap.getValue(PREFIX_TYPE).orElse(\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return new QuizCreateAutomaticallyCommand(quizId, numQuestions, typeName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_MODE_MANUAL).isPresent()) { // Create manual command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_QUIZ_ID, PREFIX_QUESTION_NUMBER)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                        String"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                .format(MESSAGE_INVALID_COMMAND_FORMAT, QuizCreateManuallyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            HashMap\u003cString, String\u003e fields \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            fields.put(\"quizID\", argMultimap.getValue(PREFIX_QUIZ_ID).orElse(\"\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            fields.put(\"questionNumbers\", argMultimap.getValue(PREFIX_QUESTION_NUMBER).orElse(\"\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return new QuizCreateManuallyCommand(fields);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_ADD).isPresent()) { // Add command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_QUIZ_ID, PREFIX_QUIZ_QUESTION_NUMBER)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                        String"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                .format(MESSAGE_INVALID_COMMAND_FORMAT, QuizAddQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            String quizId \u003d argMultimap.getValue(PREFIX_QUIZ_ID).orElse(\"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            int questionNumber \u003d Integer.parseInt(argMultimap.getValue(PREFIX_QUESTION_NUMBER).orElse(\"\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            int quizQuestionNumber \u003d Integer.parseInt(argMultimap.getValue(PREFIX_QUIZ_QUESTION_NUMBER).orElse(\"\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return new QuizAddQuestionCommand(quizId, questionNumber, quizQuestionNumber);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_DELETE).isPresent()) { // Remove command"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_QUIZ_ID)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                        String"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                .format(MESSAGE_INVALID_COMMAND_FORMAT, QuizRemoveQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            String quizId \u003d argMultimap.getValue(PREFIX_QUIZ_ID).orElse(\"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            int quizQuestionNumber \u003d Integer.parseInt(argMultimap.getValue(PREFIX_QUIZ_QUESTION_NUMBER).orElse(\"\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return new QuizRemoveQuestionCommand(quizId, quizQuestionNumber);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_EXPORT).isPresent()) { // Export command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_QUIZ_ID)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                        String"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                .format(MESSAGE_INVALID_COMMAND_FORMAT, QuizExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            String quizId \u003d argMultimap.getValue(PREFIX_QUIZ_ID).orElse(\"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return new QuizExportCommand(quizId);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        } else { // List command"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_QUIZ_ID)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                        String"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                .format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                            QuizGetQuestionsAndAnswersCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            String quizId \u003d argMultimap.getValue(PREFIX_QUIZ_ID).orElse(\"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return new QuizGetQuestionsAndAnswersCommand(quizId);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                              Prefix... prefixes) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fabbbbbbyy": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/statistics/DataParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.logic.parser.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Represents parser type for processing Statistics data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public interface DataParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    HashMap\u003cString, HashMap\u003cString, Double\u003e\u003e parseFile(String filePath) throws ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/statistics/ExcelParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.logic.parser.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.commons.core.Messages.EXCEL_FILE_ILLEGAL_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.commons.core.Messages.EXCEL_FILE_ILLEGAL_INPUT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.commons.core.Messages.EXCEL_FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.commons.core.Messages.EXCEL_FILE_NOT_PARSED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.commons.core.Messages.EXCEL_FILE_TYPE_ISSUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import org.apache.poi.openxml4j.exceptions.NotOfficeXmlFileException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import org.apache.poi.ss.usermodel.Cell;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import org.apache.poi.ss.usermodel.CellType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import org.apache.poi.ss.usermodel.Row;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import org.apache.poi.xssf.usermodel.XSSFSheet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import org.apache.poi.xssf.usermodel.XSSFWorkbook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * A data parser that parses formatted excel(.xlsx) files containing students score data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class ExcelParser implements DataParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private FileInputStream file;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private HashMap\u003cString, HashMap\u003cString, Double\u003e\u003e data;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public ExcelParser() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        data \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns a processed data from file specified by input path and throws ParseException when error occurs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param filePath file path of relevant data file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @return a HashMap object mapping the students\u0027 name to a the key-value pairs of subject-scores."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @throws ParseException when error occurs while loading or parsing the file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public HashMap\u003cString, HashMap\u003cString, Double\u003e\u003e parseFile(String filePath) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            XSSFSheet sheet \u003d getSheet(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            Iterator\u003cRow\u003e rowIterator \u003d sheet.iterator();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            ArrayList\u003cString\u003e students \u003d getStudents(rowIterator);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            populateData(rowIterator, students);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new ParseException(EXCEL_FILE_NOT_PARSED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Populates the data inside ExcelParser object with data using iterators."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param rowIterator iterator for excel rows."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param students the arraylist containing strings representing students inside the file in concern."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @throws ParseException when error occurs parsing the file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private void populateData(Iterator\u003cRow\u003e rowIterator, ArrayList\u003cString\u003e students)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        while (rowIterator.hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            Row row \u003d rowIterator.next();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            Iterator\u003cCell\u003e cellIterator \u003d row.cellIterator();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            String subject \u003d readNextCell(cellIterator);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            storeSubjectScores(cellIterator, subject, students);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * For each subject specified in the file, store the mappings of students and subject-scores inside ExcelParser\u0027s"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * internal data structure."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private void storeSubjectScores(Iterator\u003cCell\u003e cellIterator, String subject, ArrayList\u003cString\u003e students)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                Cell cell \u003d cellIterator.next();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                if (cell.getCellType() \u003d\u003d CellType.NUMERIC) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    allocateEntryToStudent(cell.getNumericCellValue(), students.get(i), subject);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    throw new ParseException(EXCEL_FILE_ILLEGAL_INPUT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            } catch (NullPointerException ex) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                throw new ParseException(EXCEL_FILE_ILLEGAL_FORMAT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Allocates a particular score, student and subject to the internal data structure of ExcelParser."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private void allocateEntryToStudent(double cellValue, String student, String subject) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (data.containsKey(student)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            data.get(student).put(subject, cellValue);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            HashMap\u003cString, Double\u003e subjectToScore \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            subjectToScore.put(subject, cellValue);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            data.put(student, subjectToScore);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns the content of an excel cell in string representation."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param cellIterator iterates through cells of a row."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @return cell content that cellIterator has iterated over."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @throws ParseException when the cell value type is illegal."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private String readNextCell(Iterator\u003cCell\u003e cellIterator) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Cell subjectCell \u003d cellIterator.next();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (subjectCell.getCellType() \u003d\u003d CellType.STRING) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return subjectCell.getStringCellValue().trim();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } else if (subjectCell.getCellType() \u003d\u003d CellType.NUMERIC) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return String.valueOf(subjectCell.getNumericCellValue());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new ParseException(EXCEL_FILE_ILLEGAL_INPUT);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Gets the students in the data file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param rowIterator iterates through a row of an excel sheet."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @return the list of student names"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private ArrayList\u003cString\u003e getStudents(Iterator\u003cRow\u003e rowIterator) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        ArrayList\u003cString\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (rowIterator.hasNext()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            Row studentsRow \u003d rowIterator.next();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            Iterator\u003cCell\u003e studentsIterator \u003d studentsRow.cellIterator();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            studentsIterator.next();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            while (studentsIterator.hasNext()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                Cell studentCell \u003d studentsIterator.next();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                if (studentCell.getCellType() \u003d\u003d CellType.STRING) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    students.add(studentCell.getStringCellValue());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                } else if (studentCell.getCellType() \u003d\u003d CellType.NUMERIC) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    students.add(String.valueOf(studentCell.getNumericCellValue()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return students;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Gets the excel sheet from filePath specified."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param filePath the relative or full filePath of file in concern."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @return the excel sheet read from the filePath."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @throws ParseException when error occurs retrieving the file."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private XSSFSheet getSheet(String filePath) throws ParseException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            file \u003d new FileInputStream(new File(filePath));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            XSSFWorkbook workbook \u003d new XSSFWorkbook(file);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            XSSFSheet sheet \u003d workbook.getSheetAt(0);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return sheet;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new ParseException(EXCEL_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new ParseException(EXCEL_FILE_NOT_PARSED);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } catch (NotOfficeXmlFileException ex) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new ParseException(EXCEL_FILE_TYPE_ISSUE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 170
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/statistics/StatisticsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.logic.parser.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.statistics.StatisticsAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.statistics.StatisticsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Parses input arguments and creates a new StatisticsCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class StatisticsCommandParser implements Parser\u003cStatisticsCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private HashMap\u003cString, HashMap\u003cString, Double\u003e\u003e data \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private DataParser dataParser \u003d new ExcelParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Parses the given {@code String} of arguments and returns a"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * StatisticsAddCommand object for execution if the command is valid."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param args the statistics command entered by the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public StatisticsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_FILEPATH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_FILEPATH)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatisticsAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        String filePath \u003d argMultimap.getValue(CliSyntax.PREFIX_FILEPATH).orElse(\"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, Double\u003e\u003e data \u003d dataParser.parseFile(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new StatisticsAddCommand(new Statistics(data));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/student/StudentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.logic.parser.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELETE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.student.StudentAddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.student.StudentCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.student.StudentDeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.student.StudentEditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.student.StudentEditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.commands.student.StudentListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Represents a parser for student commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class StudentCommandParser implements Parser\u003cStudentCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreationQuestionCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * and returns an CreateQuestionCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public StudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alages97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alages97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alages97"
        },
        "content": "                .tokenize(args, PREFIX_STUDENT, PREFIX_LIST,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alages97"
        },
        "content": "                        PREFIX_DELETE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alages97"
        },
        "content": "        boolean isEdit \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alages97"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alages97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alages97"
        },
        "content": "            String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alages97"
        },
        "content": "            if (!preamble.isBlank()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alages97"
        },
        "content": "                index \u003d ParserUtil.parseIndex(preamble);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alages97"
        },
        "content": "                isEdit \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alages97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alages97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alages97"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alages97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, StudentEditCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alages97"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LIST).isPresent()) { // List command"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return new StudentListCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alages97"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_DELETE).isPresent()) { // Delete command"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alages97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alages97"
        },
        "content": "                int indexToDelete \u003d Integer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alages97"
        },
        "content": "                        .parseInt(argMultimap.getValue(PREFIX_DELETE).orElse(\"0\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alages97"
        },
        "content": "                if (indexToDelete \u003c\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alages97"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alages97"
        },
        "content": "                            String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alages97"
        },
        "content": "                                    StudentDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alages97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                index \u003d index.fromOneBased(indexToDelete);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alages97"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alages97"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alages97"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alages97"
        },
        "content": "                                StudentDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alages97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return new StudentDeleteCommand(index);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alages97"
        },
        "content": "        } else if (isEdit) { // Edit command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alages97"
        },
        "content": "            // Add parameters to be edited. Note: the fields are optional"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alages97"
        },
        "content": "            //HashMap\u003cString, String\u003e fields \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alages97"
        },
        "content": "            //fields.put(\"name\", argMultimap.getValue(PREFIX_QUESTION).orElse(\"\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alages97"
        },
        "content": "            editStudentDescriptor.setName(ParserUtil.parseStudentName(argMultimap.getValue(PREFIX_STUDENT).get()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return new StudentEditCommand(index, editStudentDescriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alages97"
        },
        "content": "        } else { // Create command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alages97"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_STUDENT)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alages97"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alages97"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alages97"
        },
        "content": "                        String"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alages97"
        },
        "content": "                                .format(MESSAGE_INVALID_COMMAND_FORMAT, StudentAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alages97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            Name name \u003d ParserUtil.parseStudentName(argMultimap.getValue(PREFIX_STUDENT).get());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return new StudentAddCommand(new Student(name));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alages97"
        },
        "content": "                                              Prefix... prefixes) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alages97"
        },
        "content": "                .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 7,
      "alages97": 90,
      "fabbbbbbyy": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import org.apache.commons.math3.util.Pair;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.ReadOnlyEvents;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.ReadOnlyNotesRecord;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.ReadOnlyQuestions;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyQuizzes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.statistics.ReadOnlyStatisticsRecord;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudentRecord;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    Predicate\u003cNote\u003e PREDICATE_SHOW_ALL_NOTES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region PREFERENCES \u0026 SETTINGS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region AddressBook"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region Person"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Deletes the given person. The person must exist in the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Adds the given person. {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}. {@code target} must exist"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * in the address book. The person identity of {@code editedPerson} must not be the same as"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * another existing person in the address book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alages97"
        },
        "content": "    //region StudentRecord"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alages97"
        },
        "content": "    Path getStudentRecordFilePath();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alages97"
        },
        "content": "    void setStudentRecordFilePath(Path studentRecordFilePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alages97"
        },
        "content": "    void setStudentRecord(ReadOnlyStudentRecord studentRecord);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alages97"
        },
        "content": "    ReadOnlyStudentRecord getStudentRecord();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alages97"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    //region SavedQuestions"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the user prefs\u0027 questions file path."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    Path getSavedQuestionsFilePath();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets the user prefs\u0027 questions file path."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    void setSavedQuestionsFilePath(Path savedQuestionsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Replaces questions data with the data in {@code savedQuestions}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    void setSavedQuestions(ReadOnlyQuestions savedQuestions);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the list of slideshow questions"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    ObservableList\u003cQuestion\u003e getSlideshowQuestions();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the saved questions"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    ReadOnlyQuestions getSavedQuestions();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region Students"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    boolean hasStudent(Student student);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    void deleteStudent(Student target);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alages97"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    void setStudent(Student target, Student editedStudent);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alages97"
        },
        "content": "    String getStudentSummary();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alages97"
        },
        "content": "    //region Group"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Creates a group manually."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alages97"
        },
        "content": "    void createGroupManually(String groupId, ArrayList\u003cInteger\u003e studentNumbers);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Adds a student to a group. {@code groupId} Must already exist in the list of groups. {@code"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * studentNumber} Must already exist in the list of students. {@code groupIndexNumber} Must"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * already exist in the quiz."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alages97"
        },
        "content": "    boolean addStudentToGroup(String groupId, int studentNumber, int groupIndexNumber);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Removes a student from a group."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alages97"
        },
        "content": "    void removeStudentFromGroup(String groupId, int groupIndexNumber);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Returns a students from a group in list view."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alages97"
        },
        "content": "    String getStudentsFromGroup(String groupId);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region Questions"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Adds the given question. {@code question} must not exist in the question list."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    void addQuestion(Question question);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the question that has been deleted based on the index."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    Question deleteQuestion(Index index);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the list of questions stored."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    ObservableList\u003cQuestion\u003e getAllQuestions();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the question based on its Index."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    Question getQuestion(Index index);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Replaces the question at the specified index."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    void setQuestion(Index index, Question question);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets slideshow questions based on the list of question indexes passed in."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param questionsIndexes list of question indexes."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    void setSlideshowQuestions(List\u003cIndex\u003e questionsIndexes);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the questions summary."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return Summary of questions list."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    String getQuestionsSummary();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region Quizzes"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Creates a quiz manually."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    void createQuizManually(String quizId, ArrayList\u003cInteger\u003e questionNumbers);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Creates a quiz automatically."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    void createQuizAutomatically(String quizId, int numQuestions, String type);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Adds a question to a quiz. {@code quizId} Must already exist in the quiz bank. {@code"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * questionNumber} Must already exist in the question bank. {@code quizQuestionNumber} Must"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * already exist in the quiz."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    boolean addQuizQuestion(String quizId, int questionNumber, int quizQuestionNumber);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Removes a question from a quiz."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    boolean removeQuizQuestion(String quizId, int questionNumber);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns a quiz\u0027s questions and answers, for testing purposes."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    String getQuestionsAndAnswers(String quizId);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Exports a quiz to a html file."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    boolean exportQuiz(String quizId) throws IOException;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    //region SavedQuizzes"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns the user prefs\u0027 quizzes file path."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    Path getSavedQuizzesFilePath();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Sets the user prefs\u0027 quizzes file path."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    void setSavedQuizzesFilePath(Path savedQuizzesFilePath);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Replaces quizzes data with the data in {@code savedQuizzes}."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    void setSavedQuizzes(ReadOnlyQuizzes savedQuizzes);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /** Returns the saved questions */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    ReadOnlyQuizzes getSavedQuizzes();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region NotesRecord"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns the user prefs\u0027 notes record file path."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    Path getNotesRecordFilePath();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Sets the user prefs\u0027 notes record file path."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    void setNotesRecordFilePath(Path notesRecordFilePath);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Replaces notes record data with the data in {@code notesRecord}."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    void setNotesRecord(ReadOnlyNotesRecord notesRecord);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the NotesRecord"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    ReadOnlyNotesRecord getNotesRecord();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region Notes"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns true if a note with the same identity as {@code note} exists in the notes record."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    boolean hasNote(Note note);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Deletes the given note. The note must exist in the notes record."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    void deleteNote(Note target);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Adds the given note. {@code note} must not already exist in the notes record."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    void addNote(Note note);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Replaces the given note {@code target} with {@code editedNote}. {@code target} must exist in"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * the notes record. The note title of {@code editedNote} must not be the same as another"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * existing note in the notes record."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    void setNote(Note target, Note editedNote);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns an unmodifiable view of the filtered notes list."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    ObservableList\u003cNote\u003e getFilteredNotesList();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Updates the filter of the filtered note list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    void updateFilteredNotesList(Predicate\u003cNote\u003e predicate);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //region EventRecord"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    void setEventRecord(Path eventRecordFilePath);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    void setEventRecord(ReadOnlyEvents events);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    Path getEventRecordFilePath();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    ReadOnlyEvents getEventRecord();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //region VEvents"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    boolean hasVEvent(VEvent vEvent);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    void deleteVEvent(VEvent vEvent);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    void addVEvent(VEvent vEvent);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    void setVEvent(VEvent target, VEvent editedVEvent);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    void setVEvent(Index index, VEvent editedVEvent);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    String getVEventSummary();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    VEvent getVEvent(Index index);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    List\u003cPair\u003cIndex, VEvent\u003e\u003e findVEventsIndex(String desiredEventName);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    ObservableList\u003cVEvent\u003e getVEventList();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    Pair\u003cIndex, VEvent\u003e findMostSimilarVEvent(String desiredEventName);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region Statistics"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns the ReadOnlyStatisticsRecord in the Model."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    ReadOnlyStatisticsRecord getStatisticsRecord();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns the one-item list of Statistics list in StatisticsRecord."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    ObservableList\u003cStatistics\u003e getProcessedStatistics();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Sets the Statistics item in StatisticsRecord to be {@code statistic}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param statistics Statistic object to place in StatisticsRecord."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    void addStatistics(Statistics statistics);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 98,
      "lumwb": 25,
      "Russell-Loh-NUS": 105,
      "alages97": 47,
      "-": 77,
      "fabbbbbbyy": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import org.apache.commons.math3.util.Pair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.EventRecord;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.ReadOnlyEvents;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.group.ListOfGroups;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.NotesRecord;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.ReadOnlyNotesRecord;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.ReadOnlyQuestions;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.SavedQuestions;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyQuizzes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.quiz.SavedQuizzes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.statistics.ReadOnlyStatisticsRecord;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.statistics.StatisticsRecord;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudentRecord;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.student.StudentRecord;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private final ListOfGroups groupList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final StudentRecord studentRecord;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final SavedQuestions savedQuestions;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final EventRecord eventRecord;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private final SavedQuizzes savedQuizzes;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final NotesRecord notesRecord;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final StatisticsRecord statisticsRecord;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final FilteredList\u003cStudent\u003e filteredStudents;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final FilteredList\u003cNote\u003e filteredNotes;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                        ReadOnlyStudentRecord studentRecord,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                        ReadOnlyQuestions savedQuestions,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                        ReadOnlyQuizzes savedQuizzes,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                        ReadOnlyNotesRecord notesRecord,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                        ReadOnlyEvents readEvents,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                        ReadOnlyStatisticsRecord statisticsRecord,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireAllNonNull(addressBook, studentRecord, savedQuestions,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                savedQuizzes, notesRecord, statisticsRecord, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        logger.fine("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.groupList \u003d new ListOfGroups();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.studentRecord \u003d new StudentRecord(studentRecord);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.savedQuestions \u003d new SavedQuestions(savedQuestions);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.eventRecord \u003d new EventRecord(readEvents);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.savedQuizzes \u003d new SavedQuizzes(savedQuizzes);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.notesRecord \u003d new NotesRecord(notesRecord);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.statisticsRecord \u003d new StatisticsRecord(statisticsRecord);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        filteredStudents \u003d new FilteredList\u003c\u003e(this.studentRecord.getStudentList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        filteredNotes \u003d new FilteredList\u003c\u003e(this.notesRecord.getNotesList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this(new AddressBook(), new StudentRecord(), new SavedQuestions(), new SavedQuizzes(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                new NotesRecord(), new EventRecord(), new StatisticsRecord(), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region PREFERENCES \u0026 SETTINGS"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region AddressBook"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region FilteredPerson List Accessors"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region Person"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alages97"
        },
        "content": "    //region StudentRecord"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public void setStudentRecordFilePath(Path studentRecordFilePath) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alages97"
        },
        "content": "        requireNonNull(studentRecordFilePath);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alages97"
        },
        "content": "        userPrefs.setStudentRecordFilePath(studentRecordFilePath);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public Path getStudentRecordFilePath() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return userPrefs.getStudentRecordFilePath();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public void setStudentRecord(ReadOnlyStudentRecord studentRecord) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.studentRecord.resetData(studentRecord);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public ReadOnlyStudentRecord getStudentRecord() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return studentRecord;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alages97"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alages97"
        },
        "content": "    //region FilteredStudent List Accessors"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return studentRecord.getStudentList();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        filteredStudents.setPredicate(predicate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region Statistics"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public ReadOnlyStatisticsRecord getStatisticsRecord() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return statisticsRecord;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public ObservableList\u003cStatistics\u003e getProcessedStatistics() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return statisticsRecord.getProcessedStatistics();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void addStatistics(Statistics statistic) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        statisticsRecord.setStatistics(statistic);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region Students"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return studentRecord.hasStudent(student);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        studentRecord.removeStudent(target);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        studentRecord.addStudent(student);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        studentRecord.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public String getStudentSummary() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return studentRecord.getStudentSummary();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alages97"
        },
        "content": "    //region Group"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Creates a group manually."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public void createGroupManually(String groupId, ArrayList\u003cInteger\u003e studentNumbers) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alages97"
        },
        "content": "        Group group \u003d new Group(groupId);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alages97"
        },
        "content": "        ArrayList\u003cStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alages97"
        },
        "content": "        for (Integer i : studentNumbers) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alages97"
        },
        "content": "            students.add(filteredStudents.get(i - 1));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alages97"
        },
        "content": "        for (Student s : students) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alages97"
        },
        "content": "            group.addStudent(s);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "alages97"
        },
        "content": "        groupList.addGroup(group);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Adds a student to a group. {@code groupId} Must already exist in the list of groups. {@code"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * studentNumber} Must already exist in the list of students. {@code groupIndexNumber} Must"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * already exist in the quiz."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public boolean addStudentToGroup(String groupId, int studentNumber, int groupIndexNumber) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "alages97"
        },
        "content": "        int questionIndex \u003d studentNumber - 1;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "alages97"
        },
        "content": "        Student student \u003d filteredStudents.get(questionIndex);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "alages97"
        },
        "content": "        int groupIndex \u003d groupList.getGroupIndex(groupId);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (groupIndex !\u003d -1) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alages97"
        },
        "content": "            Group group \u003d groupList.getGroup(groupIndex);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return group.addStudent(groupIndexNumber, student);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Removes a student from a group."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public void removeStudentFromGroup(String groupId, int groupIndexNumber) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "alages97"
        },
        "content": "        int groupIndex \u003d groupList.getGroupIndex(groupId);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (groupIndex !\u003d -1) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "alages97"
        },
        "content": "            Group group \u003d groupList.getGroup(groupIndex);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "alages97"
        },
        "content": "            group.removeStudent(groupIndexNumber);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Returns a students from a group in list view."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public String getStudentsFromGroup(String groupId) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "alages97"
        },
        "content": "        String students \u003d \"\";"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "alages97"
        },
        "content": "        int groupIndex \u003d groupList.getGroupIndex(groupId);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (groupIndex !\u003d -1) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "alages97"
        },
        "content": "            Group group \u003d groupList.getGroup(groupIndex);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "alages97"
        },
        "content": "            students \u003d group.getStudentsFormatted();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return students;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region Questions"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void addQuestion(Question question) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        savedQuestions.addQuestion(question);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Question deleteQuestion(Index index) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return savedQuestions.deleteQuestion(index);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getAllQuestions() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return savedQuestions.getAllQuestions();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Question getQuestion(Index index) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return savedQuestions.getQuestion(index);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void setQuestion(Index index, Question question) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        savedQuestions.setQuestion(index, question);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void setSlideshowQuestions(List\u003cIndex\u003e questionsIndexes) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        savedQuestions.setSlideshowQuestions(questionsIndexes);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public String getQuestionsSummary() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return savedQuestions.getQuestionsSummary();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    //region SavedQuestions"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void setSavedQuestionsFilePath(Path savedQuestionsFilePath) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        requireNonNull(savedQuestionsFilePath);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        userPrefs.setSavedQuestionsFilePath(savedQuestionsFilePath);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Path getSavedQuestionsFilePath() {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return userPrefs.getSavedQuestionsFilePath();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void setSavedQuestions(ReadOnlyQuestions savedQuestions) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.savedQuestions.resetData(savedQuestions);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public ReadOnlyQuestions getSavedQuestions() {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return savedQuestions;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getSlideshowQuestions() {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return savedQuestions.getSlideshowQuestionList();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region Quizzes"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void createQuizManually(String quizId, ArrayList\u003cInteger\u003e questionNumbers) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        savedQuizzes.createQuizManually(quizId, questionNumbers, savedQuestions);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void createQuizAutomatically(String quizId, int numQuestions, String type) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        savedQuizzes.createQuizAutomatically(quizId, numQuestions, type, savedQuestions);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public boolean addQuizQuestion(String quizId, int questionNumber, int quizQuestionNumber) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return savedQuizzes.addQuizQuestion(quizId, questionNumber, quizQuestionNumber, savedQuestions);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public boolean removeQuizQuestion(String quizId, int questionNumber) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return savedQuizzes.removeQuizQuestion(quizId, questionNumber);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public String getQuestionsAndAnswers(String quizId) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return savedQuizzes.getQuestionsAndAnswers(quizId);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public boolean exportQuiz(String quizId) throws IOException {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return savedQuizzes.exportQuiz(quizId);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    //region SavedQuizzes"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void setSavedQuizzesFilePath(Path savedQuizzesFilePath) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        requireNonNull(savedQuizzesFilePath);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        userPrefs.setSavedQuizzesFilePath(savedQuizzesFilePath);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public Path getSavedQuizzesFilePath() {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return userPrefs.getSavedQuizzesFilePath();"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void setSavedQuizzes(ReadOnlyQuizzes savedQuizzes) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.savedQuizzes.resetData(savedQuizzes);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public ReadOnlyQuizzes getSavedQuizzes() {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return savedQuizzes;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region NotesRecord"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public Path getNotesRecordFilePath() {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return userPrefs.getNotesRecordFilePath();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setNotesRecordFilePath(Path notesRecordFilePath) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(notesRecordFilePath);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        userPrefs.setNotesRecordFilePath(notesRecordFilePath);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setNotesRecord(ReadOnlyNotesRecord notesRecord) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.notesRecord.resetData(notesRecord);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public ReadOnlyNotesRecord getNotesRecord() {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return notesRecord;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region FilteredNote List Accessors"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Note} backed by the internal list of notes"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * record."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public ObservableList\u003cNote\u003e getFilteredNotesList() {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return filteredNotes;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void updateFilteredNotesList(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        filteredNotes.setPredicate(predicate);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region Notes"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return notesRecord.hasNote(note);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void deleteNote(Note note) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        notesRecord.removeNote(note);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        notesRecord.addNote(note);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        updateFilteredNotesList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireAllNonNull(target, editedNote);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        notesRecord.setNote(target, editedNote);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //region EventRecord"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setEventRecord(Path eventRecordFilePath) {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(eventRecordFilePath);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        userPrefs.setEventRecordFilePath(eventRecordFilePath);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setEventRecord(ReadOnlyEvents events) {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.eventRecord.resetData(events);"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Path getEventRecordFilePath() {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return userPrefs.getEventRecordFilePath();"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public ReadOnlyEvents getEventRecord() {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return eventRecord;"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //region Events"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean hasVEvent(VEvent vEvent) {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(vEvent);"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return eventRecord.contains(vEvent);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public VEvent getVEvent(Index index) {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return eventRecord.getVEvent(index);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void deleteVEvent(VEvent vEvent) {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        eventRecord.deleteVEvent(vEvent);"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void addVEvent(VEvent vEvent) {"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        eventRecord.addVEvent(vEvent);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setVEvent(VEvent target, VEvent editedVEvent) {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireAllNonNull(target, editedVEvent);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        eventRecord.setVEvent(target, editedVEvent);"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setVEvent(Index index, VEvent editedVEvent) {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireAllNonNull(index, editedVEvent);"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        eventRecord.setVEvent(index, editedVEvent);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public String getVEventSummary() {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return eventRecord.getVEventSummary();"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public ObservableList\u003cVEvent\u003e getVEventList() {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return eventRecord.getVEventList();"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public List\u003cPair\u003cIndex, VEvent\u003e\u003e findVEventsIndex(String desiredEventName) {"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return eventRecord.findVEventsIndex(desiredEventName);"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Pair\u003cIndex, VEvent\u003e findMostSimilarVEvent(String desiredEventName) {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return eventRecord.findMostSimilarVEvent(desiredEventName);"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    };"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 158,
      "lumwb": 90,
      "Russell-Loh-NUS": 75,
      "alages97": 98,
      "-": 137,
      "fabbbbbbyy": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    Path getStudentRecordFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    Path getSavedQuizzesFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    Path getNotesRecordFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 2,
      "lumwb": 2,
      "-": 16,
      "fabbbbbbyy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private Path studentRecordFilePath \u003d Paths.get(\"data\" , \"students.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private Path savedQuestionsFilePath \u003d Paths.get(\"data\" , \"questions.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private Path eventRecordFilePath \u003d Paths.get(\"data\" , \"events.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private Path savedQuizzesFilePath \u003d Paths.get(\"data\" , \"quizzes.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private Path notesRecordFilePath \u003d Paths.get(\"data\", \"notes.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        setStudentRecordFilePath(newUserPrefs.getStudentRecordFilePath());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        setSavedQuizzesFilePath(newUserPrefs.getSavedQuizzesFilePath());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        setNotesRecordFilePath(newUserPrefs.getNotesRecordFilePath());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region AddressBook"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    //region StudentRecord"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Path getStudentRecordFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return studentRecordFilePath;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setStudentRecordFilePath(Path studentsFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(studentsFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.studentRecordFilePath \u003d studentsFilePath;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    //region SavedQuestions"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Path getSavedQuestionsFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return savedQuestionsFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void setSavedQuestionsFilePath(Path savedQuestionsFilePath) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        requireNonNull(savedQuestionsFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.savedQuestionsFilePath \u003d savedQuestionsFilePath;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    //region SavedQuizzes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public Path getSavedQuizzesFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return savedQuizzesFilePath;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void setSavedQuizzesFilePath(Path savedQuizzesFilePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        requireNonNull(savedQuizzesFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.savedQuizzesFilePath \u003d savedQuizzesFilePath;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region NotesRecord"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public Path getNotesRecordFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return notesRecordFilePath;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setNotesRecordFilePath(Path notesRecordFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(notesRecordFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.notesRecordFilePath \u003d notesRecordFilePath;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //region EventRecord"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Path getEventRecordFilePath() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return eventRecordFilePath;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setEventRecordFilePath(Path eventRecordFilePath) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(eventRecordFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.eventRecordFilePath \u003d eventRecordFilePath;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u0026\u0026 studentRecordFilePath.equals(o.studentRecordFilePath)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u0026\u0026 notesRecordFilePath.equals(o.notesRecordFilePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, studentRecordFilePath,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                savedQuestionsFilePath, savedQuizzesFilePath, notesRecordFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        sb.append(\"\\nLocal address book data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        sb.append(\"\\nLocal student data file location : \" + studentRecordFilePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        sb.append(\"\\nLocal questions data file location : \" + savedQuestionsFilePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        sb.append(\"\\nLocal quizzes data file location : \" + savedQuizzesFilePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        sb.append(\"\\nLocal notes data file location : \" + notesRecordFilePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 18,
      "lumwb": 25,
      "Russell-Loh-NUS": 17,
      "-": 85,
      "fabbbbbbyy": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents a event in the njoy assistant"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Maps into a vEvent for UI (iCalendarAgenda) rendering and processing"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private String eventName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private String colorCategory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private String uniqueIdentifier;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private RecurrenceType recurrenceType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Event() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Event(String eventName, LocalDateTime startDateTime, LocalDateTime endDateTime,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                 String colorCategory, String uniqueIdentifier, RecurrenceType recurrenceType) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.colorCategory \u003d colorCategory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.uniqueIdentifier \u003d uniqueIdentifier;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.recurrenceType \u003d recurrenceType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public String getEventName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setEventName(String eventName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public LocalDateTime getStartDateTime() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setStartDateTime(LocalDateTime startDateTime) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public LocalDateTime getEndDateTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return endDateTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setEndDateTime(LocalDateTime endDateTime) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public String getColorCategory() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return colorCategory;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setColorCategory(String colorCategory) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.colorCategory \u003d colorCategory;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public String getUniqueIdentifier() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return uniqueIdentifier;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setUniqueIdentifier(String uniqueIdentifier) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.uniqueIdentifier \u003d uniqueIdentifier;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public RecurrenceType getRecurrenceType() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return recurrenceType;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setRecurrenceType(RecurrenceType rType) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.recurrenceType \u003d rType;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import org.apache.commons.math3.util.Pair;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.util.EventUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateVEventException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.exceptions.VEventNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Stores events and provides functionality to map from events to vEvents."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * VEvents with the same eventName, startDateTime and endDateTime are not allowed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class EventRecord implements ReadOnlyVEvents, ReadOnlyEvents, Iterable\u003cVEvent\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private static final String DAILY_RECUR_RULE_STRING \u003d \"FREQ\u003dDAILY;INTERVAL\u003d1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private static final String WEEKLY_RECUR_RULE_STRING \u003d \"FREQ\u003dWEEKLY;INTERVAL\u003d1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final ObservableList\u003cVEvent\u003e vEvents \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final ObservableList\u003cVEvent\u003e vEventsUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            FXCollections.unmodifiableObservableList(vEvents);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public EventRecord() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Creates a list of VEvents using the events in the {@code toBeCopied}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public EventRecord(ReadOnlyEvents toBeCopied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Creates a list of VEvents using the events in the {@param events}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public EventRecord(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        resetData(events);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Get all Events backed by vEvents observable list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public List\u003cEvent\u003e getAllEvents() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return vEventsToEventsMapper(this.vEvents);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Maps all @param vEvents to a list of Events"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private List\u003cEvent\u003e vEventsToEventsMapper(List\u003cVEvent\u003e vEvents) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        ArrayList\u003cEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        for (VEvent vEvent : vEvents) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            eventList.add(EventUtil.vEventToEventMapper(vEvent));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Resets the existing data of this {@code EventRecord} with {@code newData}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void resetData(ReadOnlyEvents newData) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        setVEvents(readOnlyEventsToVEventsMapper(newData));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Resets the existing data of this {@code EventRecord} with {@code newData}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void resetData(List\u003cEvent\u003e newData) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        setVEvents(eventsToVEventsMapper(newData));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Maps all Events in @param readOnlyEvents to a list of VEvents"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private ArrayList\u003cVEvent\u003e readOnlyEventsToVEventsMapper(ReadOnlyEvents readOnlyEvents) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return eventsToVEventsMapper(readOnlyEvents.getAllEvents());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Maps all Events in @param events to a list of VEvents"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private ArrayList\u003cVEvent\u003e eventsToVEventsMapper(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        ArrayList\u003cVEvent\u003e resultVEventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            resultVEventList.add(EventUtil.eventToVEventMapper(event));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return resultVEventList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Replaces the contents of this list with {@code vEvents}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setVEvents(List\u003cVEvent\u003e vEvents) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireAllNonNull(vEvents);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.vEvents.setAll(vEvents);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Add a new vEvent to the vEvents list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param vEvent to add to the list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void addVEvent(VEvent vEvent) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(vEvent);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (contains(vEvent)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new DuplicateVEventException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        vEvents.add(vEvent);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Deletes the vEvent at the specified index in the list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param index of the vEvent in the list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @return VEvent object."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public VEvent deleteVEvent(Index index) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return vEvents.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Deletes the vEvent object from the list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param vEvent object."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void deleteVEvent(VEvent vEvent) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(vEvent);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (!vEvents.remove(vEvent)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new VEventNotFoundException();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns the question object."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param index of the question in the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @return Question object."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public VEvent getVEvent(Index index) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return vEvents.get(index.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Sets the vEvent object at the specified index in the list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param index    of the vEvent in the list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param vEvent object."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setVEvent(Index index, VEvent vEvent) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        vEvents.set(index.getZeroBased(), vEvent);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Sets the vEvent object in the list using a specified question object."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param target         of the vEvent in the list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param editedVEvent to replace target."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setVEvent(VEvent target, VEvent editedVEvent) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireAllNonNull(target, editedVEvent);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        int index \u003d vEvents.indexOf(target);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new VEventNotFoundException();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        vEvents.set(index, editedVEvent);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public ObservableList\u003cVEvent\u003e getVEventList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return this.vEventsUnmodifiableList;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns true if the list contains an equivalent VEvent as the given argument."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean contains(VEvent toCheck) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return vEvents.stream().anyMatch(vEvent -\u003e isSameVEvent(vEvent, toCheck));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private boolean isSameVEvent(VEvent vEvent1, VEvent vEvent2) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return vEvent1.getSummary().equals(vEvent2.getSummary())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                \u0026\u0026 vEvent1.getDateTimeStart().equals(vEvent2.getDateTimeStart())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                \u0026\u0026 vEvent1.getDateTimeEnd().equals(vEvent2.getDateTimeEnd());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Printing out the list of VEvents and how many are there."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @return Summary of VEvents."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public String getVEventSummary() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        String summary \u003d \"There are currently \" + vEvents.size() + \" vEvents saved.\\n\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                + \"Here is the list of vEVents:\\n\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        for (int i \u003d 0; i \u003c vEvents.size(); i++) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            summary +\u003d (i + 1) + \". \" + \"\\\"\" + vEvents.get(i) + \"\\\"\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            if ((i + 1) !\u003d vEvents.size()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                summary +\u003d \"\\n\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return summary;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Gets a list of pair of Index and VEvent which eventNames are equal to the desiredEventName"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @return List of pair of Indexs and VEvents which equal to desiredEventName"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public List\u003cPair\u003cIndex, VEvent\u003e\u003e findVEventsIndex(String desiredEventName) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        List\u003cPair\u003cIndex, VEvent\u003e\u003e resultIndexList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        for (int i \u003d 0; i \u003c vEvents.size(); i++) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            VEvent currentVEvent \u003d vEvents.get(i);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            if (currentVEvent.getSummary().getValue().equals(desiredEventName)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                resultIndexList.add(new Pair(Index.fromZeroBased(i), currentVEvent));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return resultIndexList;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Gets most similar VEvent to that of desiredEventName"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @return List a pair representing the most similar VEvent and its Index"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Will default to first VEvent in list if cannot be found"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Pair\u003cIndex, VEvent\u003e findMostSimilarVEvent(String desiredEventName) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        VEvent mostSimilarVEvent \u003d vEvents.get(0);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        Integer mostSimilarIndex \u003d 0;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        double highestSimilarityPercentage \u003d"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                StringUtil.calculateStringSimilarity(mostSimilarVEvent.getSummary().getValue(), desiredEventName);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        for (int i \u003d 1; i \u003c vEvents.size(); i++) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            VEvent currentEvent \u003d vEvents.get(i);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            double eventNameSimilarity \u003d"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                    StringUtil.calculateStringSimilarity(currentEvent.getSummary().getValue(), desiredEventName);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            if (eventNameSimilarity \u003e highestSimilarityPercentage) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                mostSimilarIndex \u003d i;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                mostSimilarVEvent \u003d currentEvent;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                highestSimilarityPercentage \u003d eventNameSimilarity;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return new Pair(Index.fromZeroBased(mostSimilarIndex), mostSimilarVEvent);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Iterator\u003cVEvent\u003e iterator() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return vEvents.iterator();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 276
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/ReadOnlyEvents.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Unmodifiable view of an events"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public interface ReadOnlyEvents {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public List\u003cEvent\u003e getAllEvents();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/ReadOnlyVEvents.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public interface ReadOnlyVEvents {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns an unmodifiable view of the VEvent list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    ObservableList\u003cVEvent\u003e getVEventList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/RecurrenceType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents the types of event recurrences possbile"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public enum RecurrenceType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    NONE, WEEKLY, DAILY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/DuplicateVEventException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Signals that the operation will result in duplicate VEvent (VEvents are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * eventName, startDateTime and endDateTime)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class DuplicateVEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public DuplicateVEventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        super(\"Operation would result in duplicate vEvents\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/VEventNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Signals that the operation is unable to find the specified VEvent."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class VEventNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/Group.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": " * Model that represents a group of students."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class Group {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private String groupId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private UniqueStudentList studentList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Creates a Group instance with the appropriate attributes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param groupId The identifier of the group, in String representation."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public Group(String groupId) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.groupId \u003d groupId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.studentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Returns a String representation of the quiz identifier."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @return The String representation of the quiz identifier."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public String getGroupId() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return this.groupId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Adds a student to the student list of a group."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param student The student to be added to the student list of the group."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @return True if the student is not a repeat, else false."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public boolean addStudent(Student student) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return studentList.add(student);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Adds a student to the student list of a group."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param groupIndexNumber The group index number to add the student to."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param student          The student to be added to the student list of the group."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @return True if the student is not a repeat, else false."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public boolean addStudent(int groupIndexNumber, Student student) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return studentList.add(groupIndexNumber, student);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Removes a student from the student list of a group."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param groupIndexNumber The student to be removed from the student list of the group."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @return The removed question."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public Student removeStudent(int groupIndexNumber) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return studentList.remove(groupIndexNumber);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Returns the students, formatted in String representation for writing to a text file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @return The students, formatted in String representation for writing to the text file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public String getStudentsFormatted() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return studentList.getStudentList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alages97": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/ListOfGroups.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": " * Model that represents a list of groups."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class ListOfGroups {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private ArrayList\u003cGroup\u003e groups;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Creates a ListOfGroups instance with the appropriate attributes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public ListOfGroups() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alages97"
        },
        "content": "        groups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Adds a group to the list of groups."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param group The group to be added to the list of groups."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public void addGroup(Group group) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alages97"
        },
        "content": "        groups.add(group);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Removes a group from the list of groups."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param groupId The group to be removed from the list of groups."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public void removeGroup(String groupId) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alages97"
        },
        "content": "        for (Group q : groups) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alages97"
        },
        "content": "            if (q.getGroupId().equals(groupId)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": "                groups.remove(q);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alages97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Returns the groupIndex of a group if found, else -1."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param groupId The identifier of the group."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @return The groupIndex of the group."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public int getGroupIndex(String groupId) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alages97"
        },
        "content": "        for (int i \u003d 0; i \u003c groups.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alages97"
        },
        "content": "            Group currentGroup \u003d groups.get(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alages97"
        },
        "content": "            if (currentGroup.getGroupId().equals(groupId)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alages97"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alages97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Returns a group from the list of groups."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param groupIndex The group index."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @return The group from the list of groups."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public Group getGroup(int groupIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return groups.get(groupIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alages97": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Note.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Represents a note in the note list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private String note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Creates a new note."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param note to set."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param description to the question."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public Note(String note, String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireAllNonNull(note, description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public String getNote() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return this.note;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setNote(String note) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns true if both notes have the same string comparison of note title."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * This defines a weaker notion of equality between two notes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public boolean isSameNote(Note otherNote) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (otherNote \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return otherNote !\u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u0026\u0026 otherNote.getNote().equals(getNote());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns true if both notes have the same note title and description."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * This defines a stronger notion of equality between two notes."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (!(other instanceof Note)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Note otherNote \u003d (Note) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return otherNote.getNote().equals(getNote())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u0026\u0026 otherNote.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return Objects.hash(note, description);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        builder.append(\"Note: \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            .append(getNote())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            .append(\" Description: \")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            .append(getDescription())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            .append(\"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/NotesRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Wraps all data at the notes-record level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Notes with same identity are not allowed as compared by {@code Note#isSameNote(Note)}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class NotesRecord implements ReadOnlyNotesRecord {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final UniqueNotesList notes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        notes \u003d new UniqueNotesList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public NotesRecord() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Creates an NotesRecord using the Notes in the {@code toBeCopied}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public NotesRecord(ReadOnlyNotesRecord toBeCopied) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Replaces the contents of the Notes list with {@code notes}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * {@code notes} must not contain duplicate Note as compared by {@code Note#isSameNote(Note)}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setNotes(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.notes.setNotes(notes);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Resets the existing data of this {@code NotesRecord} with {@code newData}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void resetData(ReadOnlyNotesRecord newData) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        setNotes(newData.getNotesList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //// Notes-level operations"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns true if a Note with the same identity as {@code note}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * exists in the notes record."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return notes.contains(note);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Adds a Note to the notes record."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * A note with the with the same identity as compared by"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * {@code Note#isSameNote(Note)} must not already exist in the notes record."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void addNote(Note n) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        notes.add(n);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Replaces the given Note {@code target} in the list with {@code editedNote}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * {@code target} must exist in the notes record."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * The Note identity of {@code editedNote} must not have the same identity as another"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * existing Note in the notes record as compared by {@code Note#isSameNote(Note)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(editedNote);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        notes.setNote(target, editedNote);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Removes {@code key} from this {@code NotesRecord}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * {@code key} must exist in the notes record."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void removeNote(Note key) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        notes.remove(key);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return \"You have \" + notes.asUnmodifiableObservableList().size()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                + \" Notes\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                + notes;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public ObservableList\u003cNote\u003e getNotesList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return notes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                || (other instanceof NotesRecord // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u0026\u0026 notes.equals(((NotesRecord) other).notes));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return notes.hashCode();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/ReadOnlyNotesRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Unmodifiable view of a notes record."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public interface ReadOnlyNotesRecord {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns an unmodifiable view of the notes list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * This list will not contain any duplicate note as compared by {@code Note#isSameNote(Note)}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    ObservableList\u003cNote\u003e getNotesList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/UniqueNotesList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.exceptions.DuplicateNoteException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.exceptions.NoteNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * A list of notes that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * A note is considered unique by comparing using {@code Note#isSameNote(Note)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * notes uses Note#isSameNote(Note) for equality so as to ensure that the note being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * unique in terms of identity in the UniqueNotesList. However, the removal of a note uses Note#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * as to ensure that the note with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * @see Note#isSameNote(Note)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class UniqueNotesList implements Iterable\u003cNote\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final ObservableList\u003cNote\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final ObservableList\u003cNote\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns true if the list contains an equivalent note as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public boolean contains(Note toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameNote);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Adds a note to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * The note must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void add(Note toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new DuplicateNoteException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Replaces the note {@code target} in the list with {@code editedNote}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * The note identity of {@code editedNote} must not be the same as another existing note in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireAllNonNull(target, editedNote);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new NoteNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (!target.isSameNote(editedNote) \u0026\u0026 contains(editedNote)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new DuplicateNoteException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        internalList.set(index, editedNote);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Removes the equivalent note from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * The note must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void remove(Note toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new NoteNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setNotes(UniqueNotesList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Replaces the contents of this list with {@code notes}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * {@code notes} must not contain duplicate notes."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setNotes(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireAllNonNull(notes);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (!notesAreUnique(notes)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new DuplicateNoteException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        internalList.setAll(notes);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public ObservableList\u003cNote\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public Iterator\u003cNote\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                || (other instanceof UniqueNotesList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueNotesList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns true if {@code notes} contains only unique notes."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private boolean notesAreUnique(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            for (int j \u003d i + 1; j \u003c notes.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                if (notes.get(i).isSameNote(notes.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        for (Note note : internalList) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            sb.append(note + \"\\n\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/exceptions/DuplicateNoteException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.model.note.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_NOTE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Signals that the operation will result in duplicate Notes (Notes are considered duplicates"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * if they have the same note title)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class DuplicateNoteException extends RuntimeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public DuplicateNoteException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        super(MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/exceptions/NoteNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.model.note.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Signals that the operation is unable to find the specified notes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class NoteNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/McqQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Represents an MCQ question in the question list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class McqQuestion extends Question {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private String optionA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private String optionB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private String optionC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private String optionD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Creates a new MCQ question."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param question to set."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param answer   to the question."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param optionA  The first option of the question."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param optionB  The second option of the question."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param optionC  The third option of the question."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param optionD  The fourth option of the question."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public McqQuestion(String question, String answer, String optionA, String optionB,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        String optionC, String optionD) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        super(question, answer);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.optionA \u003d optionA;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.optionB \u003d optionB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.optionC \u003d optionC;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.optionD \u003d optionD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns the first option of an McqQuestion."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The first option of the McqQuestion."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public String getOptionA() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return optionA;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns the second option of an McqQuestion."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The second option of the McqQuestion."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public String getOptionB() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return optionB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns the third option of an McqQuestion."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The third option of the McqQuestion."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public String getOptionC() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return optionC;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns the fourth option of an McqQuestion."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The fourth option of the McqQuestion."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public String getOptionD() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return optionD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return question"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            + \"\\nAnswer: \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            + answer"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            + \"\\nOptions:\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            + \"\\nA: \" + optionA"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            + \" B:\" + optionB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            + \" C:\" + optionC"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            + \" D:\" + optionD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 24,
      "fabbbbbbyy": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/OpenEndedQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Represents an open ended question in the question list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class OpenEndedQuestion extends Question {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Creates a new question."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question to set."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param answer   to the question."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public OpenEndedQuestion(String question, String answer) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        super(question, answer);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/Question.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Represents a question in the question list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public abstract class Question {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    protected String question;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    protected String answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Creates a new question."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question to set."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param answer   to the question."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Question(String question, String answer) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the question."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return Question string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return this.question;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the answer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return Answer string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return this.answer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets the question."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question to set."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void setQuestion(String question) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets the answer."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param answer to set."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void setAnswer(String answer) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return question"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            + \"\\nAnswer: \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            + answer;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (!(o instanceof Question)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        Question otherQuestion \u003d (Question) o;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return this.question.equals(otherQuestion.question);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns true if both questions is the same. This defines a weaker notion of equality between"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * two questions."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public boolean isSameQuestion(Question otherQuestion) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (otherQuestion \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return otherQuestion !\u003d null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \u0026\u0026 otherQuestion.equals(question);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 77,
      "fabbbbbbyy": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/QuestionBank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Stores questions and provides functionality to manage them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class QuestionBank implements Iterable\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e questions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e questionsUnmodifiableList \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        FXCollections.unmodifiableObservableList(questions);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Replaces the contents of this list with {@code Question}. {@code questions} must not contain"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * duplicate Students."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void setQuestions(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        requireAllNonNull(questions);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (!isRepeated(questions)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            //throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.questions.setAll(questions);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Add a new question to the question list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question to add to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void addQuestion(Question question) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (!isRepeated(question)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            this.questions.add(question);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // TODO: Implement check if duplicated question AND answer is entered"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Deletes the question at the specified index in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param index of the question in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return question object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Question deleteQuestion(Index index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questions.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Deletes the question object from the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void deleteQuestion(Question question) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (!questions.remove(question)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            //throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the question object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param index of the question in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return Question object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Question getQuestion(Index index) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questions.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets the question object at the specified index in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param index    of the question in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void setQuestion(Index index, Question question) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        questions.set(index.getZeroBased(), question);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets the question object in the list using a specified question object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param target         of the question in the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param editedQuestion to replace target."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void setQuestion(Question target, Question editedQuestion) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        requireAllNonNull(target, editedQuestion);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        int index \u003d questions.indexOf(target);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            //throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (!target.isSameQuestion(editedQuestion) \u0026\u0026 contains(editedQuestion)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            //throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        questions.set(index, editedQuestion);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns all the questions in a question bank in an ArrayList representation."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return All the questions in the question bank in an ArrayList representation."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getAllQuestions() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return questions;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns all the McqQuestions in a question bank in an ObservableList representation."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return mcq questions"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getMcqQuestions() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        ObservableList\u003cQuestion\u003e mcqQuestions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        for (Question q : questions) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            if (q instanceof McqQuestion) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                mcqQuestions.add(q);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return mcqQuestions;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns all the OpenEndedQuestions in a question bank in an ArrayList representation."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return open ended questions"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getOpenEndedQuestions() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        ObservableList\u003cQuestion\u003e openEndedQuestions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        for (Question q : questions) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            if (q instanceof OpenEndedQuestion) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                openEndedQuestions.add(q);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return openEndedQuestions;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Printing out the list of questions and how many are there."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return Summary of questions."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public String getQuestionsSummary() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String summary \u003d \"There are currently \" + questions.size() + \" questions saved.\\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            + \"Here is the list of questions:\\n\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        for (int i \u003d 0; i \u003c questions.size(); i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            summary +\u003d (i + 1) + \". \" + \"\\\"\" + questions.get(i) + \"\\\"\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            if ((i + 1) !\u003d questions.size()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                summary +\u003d \"\\n\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return summary;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns true if a question has been repeated, else false."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param question The question to be checked."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return True if the question has been repeated, else false."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private boolean isRepeated(Question question) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        for (Question q : questions) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            if (q.isSameQuestion(question)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns true if a question has been repeated, else false."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param questions the list of questions to check."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return True if the question has been repeated, else false."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private boolean isRepeated(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        for (int i \u003d 0; i \u003c questions.size() - 1; i++) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            for (int j \u003d i + 1; j \u003c questions.size(); j++) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                if (questions.get(i).isSameQuestion(questions.get(j))) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns true if the list contains an equivalent Student as the given argument."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public boolean contains(Question toCheck) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questions.stream().anyMatch(toCheck::isSameQuestion);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public ObservableList\u003cQuestion\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questionsUnmodifiableList;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Iterator\u003cQuestion\u003e iterator() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questions.iterator();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 1,
      "Russell-Loh-NUS": 176,
      "fabbbbbbyy": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/ReadOnlyQuestions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Unmodifiable view of an student record"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public interface ReadOnlyQuestions {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns an unmodifiable view of the questions list. This list will not contain any duplicate"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * questions."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    ObservableList\u003cQuestion\u003e getSavedQuestions();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/SavedQuestions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Wraps all data at the questions level Duplicates are not allowed (by .isRepeated comparison)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class SavedQuestions implements ReadOnlyQuestions {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final QuestionBank questions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private ObservableList\u003cQuestion\u003e slideshowQuestions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        questions \u003d new QuestionBank();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public SavedQuestions() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Creates a list of SavedQuestions using the Questions in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public SavedQuestions(ReadOnlyQuestions toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns a question bank."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The question bank."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public QuestionBank getQuestionBank() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return questions;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns all questions currently stored."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return The question list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getAllQuestions() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questions.getAllQuestions();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Replaces the contents of the Question list with {@code Questions}. {@code Questions} must not"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * contain duplicate Questions."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void setQuestions(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.questions.setQuestions(questions);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Resets the existing data of this {@code SavedQuestions} with {@code newData}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void resetData(ReadOnlyQuestions newData) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        setQuestions(newData.getSavedQuestions());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    //// Question-level operations"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns true if a Question with the same identity as {@code Question} exists in the saved"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * questions."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public boolean hasQuestion(Question question) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questions.contains(question);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Adds a Question to the saved questions. The Question must not already exist in the saved"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * questions."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void addQuestion(Question p) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        questions.addQuestion(p);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the question object."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param index of the question in the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return Question object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Question getQuestion(Index index) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questions.getQuestion(index);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the question object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return Summary of questions."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public String getQuestionsSummary() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questions.getQuestionsSummary();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the questions to be used in slideshow."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return Slideshow Question List."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getSlideshowQuestionList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return slideshowQuestions;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns all the McqQuestions in a question bank in an ObservableList representation."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return mcq questions"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getMcqQuestions() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questions.getMcqQuestions();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns all the OpenEndedQuestions in a question bank in an ArrayList representation."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return open ended questions"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getOpenEndedQuestions() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questions.getOpenEndedQuestions();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Replaces the given Question {@code target} in the list with {@code editedQuestion}. {@code"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * target} must exist in saved questions. The Question identity of {@code editedQuestion} must"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * not be the same as another existing Question in the address book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void setQuestion(Question target, Question editedQuestion) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        requireNonNull(editedQuestion);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        questions.setQuestion(target, editedQuestion);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Replaces the given Question {@code target} in the list with {@code editedQuestion}. {@code"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * target} must exist in saved questions. The Question identity of {@code editedQuestion} must"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * not be the same as another existing Question in the saved questions."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void setQuestion(Index index, Question editedQuestion) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        requireNonNull(editedQuestion);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        questions.setQuestion(index, editedQuestion);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets slideshow questions based on the list of question indexes passed in."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param questionsIndexes list of question indexes."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void setSlideshowQuestions(List\u003cIndex\u003e questionsIndexes) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        slideshowQuestions.clear();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        for (int i \u003d 0; i \u003c questionsIndexes.size(); i++) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            Question question \u003d getQuestion(questionsIndexes.get(i));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            slideshowQuestions.add(question);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Removes {@code key} from this {@code SavedQuestions}. {@code key} must exist in saved"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * questions."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void deleteQuestion(Question key) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        questions.deleteQuestion(key);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Removes {@code key} from this {@code SavedQuestions}. {@code key} must exist in saved"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * questions."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Question deleteQuestion(Index index) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questions.deleteQuestion(index);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questions.asUnmodifiableObservableList().size() + \" Questions\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getSavedQuestions() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            || (other instanceof SavedQuestions // instanceof handles nulls"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \u0026\u0026 questions.equals(((SavedQuestions) other).questions));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questions.hashCode();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 209,
      "fabbbbbbyy": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/exceptions/DuplicateQuestionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model.question.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Signals that the operation will result in duplicate Questions (Questions are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class DuplicateQuestionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public DuplicateQuestionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        super(\"Operation would result in duplicate Questions\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/exceptions/QuestionNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model.question.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Signals that the operation is unable to find the specified question."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class QuestionNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/QuestionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.question.McqQuestion;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.question.OpenEndedQuestion;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Represents a question list for a quiz."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "public class QuestionList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private ArrayList\u003cQuestion\u003e questions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Creates a QuestionList instance with the appropriate attributes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public QuestionList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.questions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Adds a question to a question list, provided it is not already in the question list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param question The question to be added to the question list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return True if the question is not a repeat, else false."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public boolean addQuestion(Question question) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (!isRepeated(question)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            questions.add(question);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Adds a question to a question list, provided it is not already in the question list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param questionNumber The index to add the question to."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param question The question to be added to the question list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return True if the question is not a repeat, else false."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public boolean addQuestion(int questionNumber, Question question) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        int questionIndex \u003d questionNumber - 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (!isRepeated(question)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            questions.add(questionIndex, question);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Removes a question from a question list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param questionNumber The number of the question to be removed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The question which was removed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public Question removeQuestion(int questionNumber) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        int questionIndex \u003d questionNumber - 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        Question removedQuestion \u003d questions.remove(questionIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return removedQuestion;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns the questions for a quiz."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The questions for the quiz in an ArrayList."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public ArrayList\u003cQuestion\u003e getQuestions() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return questions;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns the answers for a quiz."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The answers for the quiz in an ArrayList."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public ArrayList\u003cString\u003e getAnswers() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        ArrayList\u003cString\u003e answers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        for (Question q : questions) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            answers.add(q.getAnswer());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return answers;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Sets the String represented questions as the questions of a question list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param stringQuestions The questions in String representation."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void setStringQuestions(String stringQuestions) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        String[] splitBySymbol \u003d stringQuestions.split(\"//\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        for (String s : splitBySymbol) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            String[] split \u003d s.split(\":\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            if (split.length \u003c\u003d 2) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                String question \u003d split[0];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                System.out.println(question);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                String answer \u003d split[1];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                OpenEndedQuestion openEndedQuestion \u003d new OpenEndedQuestion(question, answer);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                questions.add(openEndedQuestion);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                String question \u003d split[0];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                String answer \u003d split[1];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                String optionA \u003d split[2];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                String optionB \u003d split[3];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                String optionC \u003d split[4];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                String optionD \u003d split[5];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                McqQuestion mcqQuestion \u003d new McqQuestion(question, answer, optionA, optionB,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                            optionC, optionD);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                questions.add(mcqQuestion);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Gets the questions of a question list in String representation."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The questions of the question list in String representation."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public String getStringQuestions() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        Question firstQuestion \u003d questions.get(0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        String returnQuestions \u003d \"\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (firstQuestion instanceof OpenEndedQuestion) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            String question \u003d firstQuestion.getQuestion();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            String answer \u003d firstQuestion.getAnswer();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            returnQuestions +\u003d question + \":\" + answer;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            McqQuestion mcqQuestion \u003d (McqQuestion) firstQuestion;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            String question \u003d firstQuestion.getQuestion();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            String answer \u003d firstQuestion.getAnswer();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            returnQuestions +\u003d question + \":\" + answer + \":\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                + mcqQuestion.getOptionA() + \":\" + mcqQuestion.getOptionB() + \":\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                + mcqQuestion.getOptionC() + \":\" + mcqQuestion.getOptionD();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        for (int i \u003d 1; i \u003c questions.size(); i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            Question nextQuestion \u003d questions.get(i);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            if (nextQuestion instanceof OpenEndedQuestion) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                String question \u003d nextQuestion.getQuestion();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                String answer \u003d nextQuestion.getAnswer();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                returnQuestions +\u003d \"//\" + question + \":\" + answer;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                McqQuestion mcqQuestion \u003d (McqQuestion) nextQuestion;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                String question \u003d nextQuestion.getQuestion();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                String answer \u003d nextQuestion.getAnswer();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                returnQuestions +\u003d \"//\" + question + \":\" + answer + \":\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                        + mcqQuestion.getOptionA() + \":\" + mcqQuestion.getOptionB() + \":\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                        + mcqQuestion.getOptionC() + \":\" + mcqQuestion.getOptionD();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return returnQuestions;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns true if a question is already in a question list, else false."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param question The question to be checked."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return True if the question is already in the question list, else false."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private boolean isRepeated(Question question) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        String otherQuestion \u003d question.getQuestion();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        for (Question q : questions) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            String currentQuestion \u003d q.getQuestion();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            if (currentQuestion.equals(otherQuestion)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fabbbbbbyy": 162
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/Quiz.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.question.McqQuestion;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Represents a quiz, including a question list and an answer list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "public class Quiz {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private String quizId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private QuestionList questionList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Creates a Quiz instance with the appropriate attributes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The identifier of the quiz, in String representation."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public Quiz(String quizId) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.quizId \u003d quizId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.questionList \u003d new QuestionList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns a String representation of the quiz identifier."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The String representation of the quiz identifier."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public String getQuizId() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return quizId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Adds a question to the question list of a quiz."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param question The question to be added to the question list of the quiz."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return True if the question is not a repeat, else false."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public boolean addQuestion(Question question) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return questionList.addQuestion(question);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Adds a question to the question list of a quiz."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param questionNumber The question number to add the question to."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param question The question to be added to the question list of the quiz."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return True if the question is not a repeat, else false."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public boolean addQuestion(int questionNumber, Question question) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return questionList.addQuestion(questionNumber, question);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Removes a question from the question list of a quiz."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param questionNumber The question to be removed from the question list of the quiz."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The removed question."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public Question removeQuestion(int questionNumber) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return questionList.removeQuestion(questionNumber);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns a quiz\u0027s question list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The quiz\u0027s question list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public QuestionList getQuestionList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return questionList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Sets a quiz\u0027s question list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param questionList The question list to be set."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void setQuestionList(QuestionList questionList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.questionList \u003d questionList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns the quiz questions, formatted in String representation for writing to a text file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The quiz questions, formatted in String representation for writing to the text file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public String getFormattedQuestions() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        ArrayList\u003cQuestion\u003e questions \u003d questionList.getQuestions();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        String formattedQuestions \u003d quizId + \".\\n\\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        formattedQuestions +\u003d \"Questions:\\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        int listSize \u003d questions.size();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        for (int i \u003d 0; i \u003c listSize; i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            int questionNumber \u003d i + 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            Question question \u003d questions.get(i);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            String questionText \u003d question.getQuestion();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            formattedQuestions +\u003d questionNumber + \". \" + questionText + \"\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            if (isMcqQuestion(question)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                McqQuestion mcqQuestion \u003d (McqQuestion) question;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                formattedQuestions +\u003d \"A. \" + mcqQuestion.getOptionA() + \"\\n\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                formattedQuestions +\u003d \"B. \" + mcqQuestion.getOptionB() + \"\\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                formattedQuestions +\u003d \"C. \" + mcqQuestion.getOptionC() + \"\\n\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                formattedQuestions +\u003d \"D. \" + mcqQuestion.getOptionD() + \"\\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            formattedQuestions +\u003d \"\\n\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return formattedQuestions;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns the quiz answers, formatted in String representation for writing to a text file."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The quiz answers, formatted in String representation for writing to the text file."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public String getFormattedAnswers() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        ArrayList\u003cString\u003e answers \u003d questionList.getAnswers();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        String formattedAnswers \u003d \"Answers [Teacher\u0027s Copy]:\\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        int listSize \u003d answers.size();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        for (int i \u003d 0; i \u003c listSize; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            int questionNumber \u003d i + 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            String answer \u003d answers.get(i);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            formattedAnswers +\u003d questionNumber + \". \" + answer + \"\\n\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            formattedAnswers +\u003d \"\\n\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return formattedAnswers;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns a String representation of a quiz\u0027s questions."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The String representation of the quiz\u0027s questions."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public String getQuestionsForExport() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        ArrayList\u003cQuestion\u003e questions \u003d questionList.getQuestions();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        String formattedQuestions \u003d \"\u003c!DOCTYPE html\u003e\\n\u003chtml\u003e\\n\u003cbody\u003e\\n\" + \"\u003ccenter\u003e\u003ch2\u003e \";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        formattedQuestions +\u003d quizId + \"\u003c/h2\u003e\u003c/center\u003e\\n\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        int listSize \u003d questions.size();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        for (int i \u003d 0; i \u003c listSize; i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            int questionNumber \u003d i + 1;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            Question question \u003d questions.get(i);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            String questionText \u003d question.getQuestion();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            formattedQuestions +\u003d \"\u003cfont size\u003d\\\"5\\\"\u003e\" + questionNumber + \". \" + questionText + \"\u003c/font\u003e\\n\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            if (isMcqQuestion(question)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                McqQuestion mcqQuestion \u003d (McqQuestion) question;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                String optionA \u003d mcqQuestion.getOptionA();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                String optionB \u003d mcqQuestion.getOptionB();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                String optionC \u003d mcqQuestion.getOptionC();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                String optionD \u003d mcqQuestion.getOptionD();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                formattedQuestions +\u003d \"\u003cbr\u003e\u003cbr\u003e\\n\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                formattedQuestions +\u003d \"\u003cfont size\u003d\\\"4\\\"\u003eA) \" + optionA"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                        + \"\u003c/font\u003e\u003cinput type\u003d\\\"radio\\\" name \u003d\" + \"\\\"\" + questionText"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                        + \"\\\" value\u003d\\\"\" + optionA + \"\\\"\u003e\u003cbr\u003e\\n\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                formattedQuestions +\u003d \"\u003cfont size\u003d\\\"4\\\"\u003eB) \" + optionB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                        + \"\u003c/font\u003e\u003cinput type\u003d\\\"radio\\\" name \u003d\" + \"\\\"\" + questionText"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                        + \"\\\" value\u003d\\\"\" + optionB + \"\\\"\u003e\u003cbr\u003e\\n\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                formattedQuestions +\u003d \"\u003cfont size\u003d\\\"4\\\"\u003eC) \" + optionC"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                        + \"\u003c/font\u003e\u003cinput type\u003d\\\"radio\\\" name \u003d\" + \"\\\"\" + questionText"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                        + \"\\\" value\u003d\\\"\" + optionC + \"\\\"\u003e\u003cbr\u003e\\n\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                formattedQuestions +\u003d \"\u003cfont size\u003d\\\"4\\\"\u003eD) \" + optionD"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                        + \"\u003c/font\u003e\u003cinput type\u003d\\\"radio\\\" name \u003d\" + \"\\\"\" + questionText"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                        + \"\\\" value\u003d\\\"\" + optionD + \"\\\"\u003e\u003cbr\u003e\u003cbr\u003e\\n\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                formattedQuestions +\u003d \"\u003cform\u003e\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                        + \"  \u003cbr\u003e\u003cfont size\u003d\\\"4\\\"\u003eAnswer:\u003c/font\u003e\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                        + \" \u003cinput type\u003d\\\"text\\\" name\u003d\\\"answer\\\" size\u003d\\\"100\\\"\u003e\u003cbr\u003e\u003cbr\u003e\\n\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                        + \"\u003c/form\u003e\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        formattedQuestions +\u003d \"\u003c/body\u003e\\n\" + \"\u003c/html\u003e\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return formattedQuestions;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Sets the String represented questions as the questions of a question list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param questions The questions in String representation."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void setStringQuestions(String questions) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        questionList.setStringQuestions(questions);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Gets the questions of a question list in String representation."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The questions of the question list in String representation."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public String getStringQuestions() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return questionList.getStringQuestions();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns true if a question is an McqQuestion, else false."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param question The question to be checked."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return True if the question is an McqQuestion, else false."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private boolean isMcqQuestion(Question question) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return (question instanceof McqQuestion);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fabbbbbbyy": 198
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/QuizBank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Represents a storage class which holds all the quizzes created up to date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "public class QuizBank implements Iterable\u003cQuiz\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private final ObservableList\u003cQuiz\u003e quizzes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private final ObservableList\u003cQuiz\u003e quizzesUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            FXCollections.unmodifiableObservableList(quizzes);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Replaces the contents of this list with {@code Quizzes}. {@code Quizzes} must not contain"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * duplicate Quizzes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void setQuizzes(List\u003cQuiz\u003e quizzes) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        requireAllNonNull(quizzes);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.quizzes.setAll(quizzes);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Adds a quiz to a quiz bank."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quiz The quiz to be added to the quiz bank."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void addQuiz(Quiz quiz) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (!isRepeated(quiz)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            quizzes.add(quiz);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Removes a quiz from a quiz bank."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The quiz to be removed from the quiz bank."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void removeQuiz(String quizId) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        for (Quiz q : quizzes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            if (q.getQuizId().equals(quizId)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                quizzes.remove(q);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns the quizIndex of a quiz if found, else -1."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The quiz identifier of the quiz."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The quizIndex of the quiz."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public int getQuizIndex(String quizId) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        for (int i \u003d 0; i \u003c quizzes.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            Quiz currentQuiz \u003d quizzes.get(i);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            if (currentQuiz.getQuizId().equals(quizId)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns a quiz from a quiz bank."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizIndex The quiz index."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The quiz from the quiz bank."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public Quiz getQuiz(int quizIndex) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return quizzes.get(quizIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public ObservableList\u003cQuiz\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return quizzesUnmodifiableList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public Iterator\u003cQuiz\u003e iterator() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return quizzes.iterator();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Checks if a quiz has been repeated, i.e same quizIds."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quiz The quiz to be checked."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return True if the quiz is repeated, else false."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private boolean isRepeated(Quiz quiz) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        for (Quiz q : quizzes) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            String thisQuizId \u003d q.getQuizId();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            String otherQuizId \u003d quiz.getQuizId();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            if (thisQuizId.equals(otherQuizId)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fabbbbbbyy": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/QuizExporter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Simulates a class which handles the exporting of quizzes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "public class QuizExporter {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Exports a quiz to a html file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The identifier of the quiz."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param formattedQuiz The formatted content of the quiz."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return True if the file does not exist, false if the file already exists."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @throws IOException The exception to be thrown."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static boolean exportQuiz(String quizId, String formattedQuiz) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        String fileName \u003d quizId + \".html\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        String filePath \u003d fileName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        FileOutputStream fos \u003d new FileOutputStream(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        fos.write(formattedQuiz.getBytes());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        fos.flush();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        fos.close();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        /* File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if(file.exists()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            fileWriter.write(formattedQuiz);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        } */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fabbbbbbyy": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/QuizManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.question.QuestionBank;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.question.SavedQuestions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Represents a manager for quizzes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "public class QuizManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Creates a QuizManager instance with the appropriate attributes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public QuizManager() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Creates a quiz manually."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The identifier of the quiz to be created."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param questionNumbers The question numbers to be added to the quiz."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param savedQuestions The saved questions."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizBank The quiz bank."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static void createQuizManually(String quizId, ArrayList\u003cInteger\u003e questionNumbers,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                        SavedQuestions savedQuestions, QuizBank quizBank) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        Quiz quiz \u003d new Quiz(quizId);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        QuestionBank questionBank \u003d savedQuestions.getQuestionBank();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        ArrayList\u003cQuestion\u003e questions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        for (Integer i : questionNumbers) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            questions.add(questionBank.getQuestion(Index.fromOneBased(i)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        for (Question q : questions) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            quiz.addQuestion(q);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        quizBank.addQuiz(quiz);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Creates a quiz automatically."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The identifier of the quiz to be created."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param numQuestions The number of questions to be added to the quiz."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param type The type of questions to be added to the quiz."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param savedQuestions The saved questions."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizBank The quiz bank."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static void createQuizAutomatically(String quizId, int numQuestions, String type,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                            SavedQuestions savedQuestions, QuizBank quizBank) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        Quiz quiz \u003d new Quiz(quizId);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        QuestionBank questionBank \u003d savedQuestions.getQuestionBank();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        ObservableList\u003cQuestion\u003e relevantQuestions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        case \"mcq\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            relevantQuestions \u003d questionBank.getMcqQuestions();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        case \"open\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            relevantQuestions \u003d questionBank.getOpenEndedQuestions();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        case \"all\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            relevantQuestions \u003d questionBank.getAllQuestions();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        int listSize \u003d relevantQuestions.size();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (listSize \u003e numQuestions) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            for (int i \u003d 0; i \u003c numQuestions; i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                int randomQuestionIndex \u003d getRandomQuestionIndex(listSize);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                Question randomQuestion \u003d relevantQuestions.get(randomQuestionIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                boolean isSuccess \u003d quiz.addQuestion(randomQuestion);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                while (!isSuccess) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                    randomQuestionIndex \u003d getRandomQuestionIndex(listSize);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                    randomQuestion \u003d relevantQuestions.get(randomQuestionIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                    isSuccess \u003d quiz.addQuestion(randomQuestion);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            for (Question q : relevantQuestions) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                quiz.addQuestion(q);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        quizBank.addQuiz(quiz);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Adds a question to a quiz."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The identifier of the quiz to be handled."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param questionNumber The question number of the question to be added."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizQuestionNumber The quiz question number for the added question."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param savedQuestions The saved questions."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizBank The quiz bank."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return True if the question is not a duplicate, else false."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static boolean addQuizQuestion(String quizId, int questionNumber, int quizQuestionNumber,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                        SavedQuestions savedQuestions, QuizBank quizBank) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        QuestionBank questionBank \u003d savedQuestions.getQuestionBank();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        int questionIndex \u003d questionNumber - 1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        Question question \u003d questionBank.getQuestion(Index.fromZeroBased(questionIndex));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        int quizIndex \u003d quizBank.getQuizIndex(quizId);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (quizIndex !\u003d -1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            Quiz quiz \u003d quizBank.getQuiz(quizIndex);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return quiz.addQuestion(quizQuestionNumber, question);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Removes a question from a quiz."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The identifier of the quiz to be handled."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param questionNumber The question number of the question to be removed."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizBank The quiz bank."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return True if the question can be removed, else false."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static boolean removeQuizQuestion(String quizId, int questionNumber, QuizBank quizBank) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        int quizIndex \u003d quizBank.getQuizIndex(quizId);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (quizIndex !\u003d -1) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            Quiz quiz \u003d quizBank.getQuiz(quizIndex);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            int numQuestions \u003d quiz.getQuestionList().getQuestions().size();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            if (questionNumber \u003c 0 || questionNumber \u003e numQuestions + 1) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            quiz.removeQuestion(questionNumber);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns a String representation of a quiz\u0027s questions and answers."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The identifier of the quiz to be handled."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizBank The quiz bank."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The String representation of the quiz\u0027s questions and answers."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static String getQuestionsAndAnswers(String quizId, QuizBank quizBank) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        String questions \u003d \"\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        String answers \u003d \"\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        int quizIndex \u003d quizBank.getQuizIndex(quizId);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (quizIndex !\u003d -1) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            Quiz quiz \u003d quizBank.getQuiz(quizIndex);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            questions \u003d quiz.getFormattedQuestions();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            answers \u003d quiz.getFormattedAnswers();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return questions + answers;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Exports a quiz to a html file."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The identifier of the quiz."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizBank The quiz bank."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return True if the file does not exist, else false."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @throws IOException The exception to be thrown."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static boolean exportQuiz(String quizId, QuizBank quizBank) throws IOException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        String quizInfo \u003d \"\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        int quizIndex \u003d quizBank.getQuizIndex(quizId);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (quizIndex !\u003d -1) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            Quiz quiz \u003d quizBank.getQuiz(quizIndex);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            quizInfo \u003d quiz.getQuestionsForExport();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return QuizExporter.exportQuiz(quizId, quizInfo);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns a random question index."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param listSize The upper limit for the random value."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The random question index."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private static int getRandomQuestionIndex(int listSize) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return (int) Math.floor(Math.random() * listSize);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fabbbbbbyy": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/ReadOnlyQuizzes.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Unmodifiable view of an student record"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "public interface ReadOnlyQuizzes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns an unmodifiable view of the questions list. This list will not contain any duplicate"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * questions."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    ObservableList\u003cQuiz\u003e getSavedQuizzes();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fabbbbbbyy": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/SavedQuizzes.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.question.SavedQuestions;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Wraps all data at the questions level Duplicates are not allowed (by .isRepeated comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "public class SavedQuizzes implements ReadOnlyQuizzes {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private final QuizBank quizzes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        quizzes \u003d new QuizBank();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public SavedQuizzes() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Creates a list of SavedQuizzes using the Quizzes in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public SavedQuizzes(ReadOnlyQuizzes toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns a quiz bank."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The quiz bank."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public QuizBank getQuizBank() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return quizzes;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Replaces the contents of the Quiz list with {@code Quizzes}. {@code Quizzes} must not"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * contain duplicate Quizzes."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void setQuizzes(List\u003cQuiz\u003e quizzes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.quizzes.setQuizzes(quizzes);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Resets the existing data of this {@code SavedQuizzes} with {@code newData}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void resetData(ReadOnlyQuizzes newData) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        setQuizzes(newData.getSavedQuizzes());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    //// Quiz-level operations"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Creates a quiz manually."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The identifier of the quiz to be created."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param questionNumbers The question numbers to be added to the quiz."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param savedQuestions The saved questions."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void createQuizManually(String quizId, ArrayList\u003cInteger\u003e questionNumbers,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                   SavedQuestions savedQuestions) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        QuizManager.createQuizManually(quizId, questionNumbers, savedQuestions, quizzes);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Creates a quiz automatically."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The identifier of the quiz to be created."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param numQuestions The number of questions to be added to the quiz."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param type The type of questions to be added to the quiz."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param savedQuestions The saved questions."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void createQuizAutomatically(String quizId, int numQuestions, String type,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                        SavedQuestions savedQuestions) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        QuizManager.createQuizAutomatically(quizId, numQuestions, type, savedQuestions, quizzes);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Adds a question to a quiz."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The identifier of the quiz to be handled."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param questionNumber The question number of the question to be added."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizQuestionNumber The quiz question number for the added question."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param savedQuestions The saved questions."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return True if the question is not a duplicate, else false."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public boolean addQuizQuestion(String quizId, int questionNumber, int quizQuestionNumber,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                   SavedQuestions savedQuestions) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return QuizManager.addQuizQuestion(quizId, questionNumber, quizQuestionNumber, savedQuestions,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                                        quizzes);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Removes a question from a quiz."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The identifier of the quiz to be handled."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param questionNumber The question number of the question to be removed."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return True if the question can be removed, else false."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public boolean removeQuizQuestion(String quizId, int questionNumber) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return QuizManager.removeQuizQuestion(quizId, questionNumber, quizzes);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns a String representation of a quiz\u0027s questions and answers."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The identifier of the quiz to be handled."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @return The String representation of the quiz\u0027s questions and answers."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public String getQuestionsAndAnswers(String quizId) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return QuizManager.getQuestionsAndAnswers(quizId, quizzes);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Exports a quiz to a html file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizId The identifier of the quiz to be exported."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public boolean exportQuiz(String quizId) throws IOException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return QuizManager.exportQuiz(quizId, quizzes);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Adds a Quiz to the saved quizzes."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quiz The quiz to be added."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void addQuiz(Quiz quiz) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        quizzes.addQuiz(quiz);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return quizzes.asUnmodifiableObservableList().size() + \" Quizzes\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public ObservableList\u003cQuiz\u003e getSavedQuizzes() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return quizzes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            || (other instanceof SavedQuizzes // instanceof handles nulls"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            \u0026\u0026 quizzes.equals(((SavedQuizzes) other).quizzes));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return quizzes.hashCode();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fabbbbbbyy": 166
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/ReadOnlyStatisticsRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Unmodifiable view of a statistics record."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public interface ReadOnlyStatisticsRecord {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns an unmodifiable view of the statistics list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * This list contains only one Statistics object at once."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    ObservableList\u003cStatistics\u003e getProcessedStatistics();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/Statistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Represents a Statistics report generated from input data."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //Grade Ranges"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String EIGHTY_AND_ABOVE \u003d \"eightyAndAbove\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String SEVENTY_TO_SEVENTY_NINE \u003d \"seventies\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String SIXTY_TO_SIXTY_NINE \u003d \"sixties\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String FIFTY_TO_FIFTY_NINE \u003d \"fifties\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String BELOW_FIFTY \u003d \"belowFifty\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private HashMap\u003cString, HashMap\u003cString, Double\u003e\u003e data; //mapping of name to map of {subject, scores}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private ArrayList\u003cStudentStat\u003e studentWeightedScores;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private HashMap\u003cInteger, Integer\u003e scoreCounters; //frequency of individual (rounded down) scores"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private HashMap\u003cString, Integer\u003e gradeGroupings; //frequency of score ranges"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private int totalStudents;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private double min;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private double max;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private double mean;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private double median;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private double standardDev;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Creates a new question."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param data mapping of name to score to set."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public Statistics(HashMap\u003cString, HashMap\u003cString, Double\u003e\u003e data) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireAllNonNull(data);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.studentWeightedScores \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.gradeGroupings \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.scoreCounters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        initializeData();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        processData();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Initializes the groupings\u0027s size to zero before populating them with processed data."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void initializeData() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        gradeGroupings.put(EIGHTY_AND_ABOVE, 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        gradeGroupings.put(SEVENTY_TO_SEVENTY_NINE, 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        gradeGroupings.put(SIXTY_TO_SIXTY_NINE, 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        gradeGroupings.put(FIFTY_TO_FIFTY_NINE, 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        gradeGroupings.put(BELOW_FIFTY, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Generate the processed data."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Finds: ranking, total data entries, min, max, mean, median, standard deviation."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void processData() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        data.forEach((name, subjectScoreMap) -\u003e studentWeightedScores.add(new StudentStat(name, subjectScoreMap)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        studentWeightedScores.sort((s1, s2) -\u003e s1.weightedScore \u003e\u003d s2.weightedScore ? 1 : -1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        studentWeightedScores.stream().forEach(x -\u003e sortIntoGrade(x));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        studentWeightedScores.stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            .mapToInt(studentStat -\u003e (int) studentStat.weightedScore)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            .forEach(score -\u003e allocateDistribution(score));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        DescriptiveStatistics statsGenerator \u003d new DescriptiveStatistics();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        studentWeightedScores.stream().forEach((dataValue) -\u003e statsGenerator.addValue(dataValue.weightedScore));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        totalStudents \u003d (int) statsGenerator.getN();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        min \u003d statsGenerator.getMin();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        max \u003d statsGenerator.getMax();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        mean \u003d statsGenerator.getMean();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        median \u003d statsGenerator.getPercentile(50);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        standardDev \u003d statsGenerator.getStandardDeviation();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Updates the counter for number of students who got the same score."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param score"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private void allocateDistribution(int score) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (scoreCounters.containsKey(score)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            scoreCounters.put(score, scoreCounters.get(score) + 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            scoreCounters.put(score, 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Places each {@code StudentStat} into their respective score range groupings and updates the counter."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param studentStat"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private void sortIntoGrade(StudentStat studentStat) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (studentStat.weightedScore \u003e\u003d 80) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            gradeGroupings.put(EIGHTY_AND_ABOVE, gradeGroupings.get(EIGHTY_AND_ABOVE) + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } else if (studentStat.weightedScore \u003e\u003d 70) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            gradeGroupings.put(SEVENTY_TO_SEVENTY_NINE, gradeGroupings.get(SEVENTY_TO_SEVENTY_NINE) + 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } else if (studentStat.weightedScore \u003e\u003d 60) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            gradeGroupings.put(SIXTY_TO_SIXTY_NINE, gradeGroupings.get(SIXTY_TO_SIXTY_NINE) + 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } else if (studentStat.weightedScore \u003e\u003d 50) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            gradeGroupings.put(FIFTY_TO_FIFTY_NINE, gradeGroupings.get(FIFTY_TO_FIFTY_NINE) + 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            gradeGroupings.put(BELOW_FIFTY, gradeGroupings.get(BELOW_FIFTY) + 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public HashMap\u003cInteger, Integer\u003e getFrequencyDistribution() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return scoreCounters;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getGradeGroupings() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return gradeGroupings;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setData(HashMap\u003cString, HashMap\u003cString, Double\u003e\u003e data) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public double getMin() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return min;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public double getMax() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return max;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public double getMean() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return mean;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public double getMedian() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return median;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public double getStandardDev() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return standardDev;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public int getTotalStudents() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return totalStudents;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Represents a student data entry and their respective scores."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private class StudentStat {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        private double weightedScore;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        private HashMap\u003cString, Double\u003e subjectScoreMap;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        public StudentStat(String name, HashMap\u003cString, Double\u003e subjectScoreMap) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            this.subjectScoreMap \u003d subjectScoreMap;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            calcWeightedScore();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        public void calcWeightedScore() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            int noSubjects \u003d subjectScoreMap.size();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            double total \u003d subjectScoreMap.values().stream().mapToDouble(score -\u003e Double.valueOf(score)).sum();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            weightedScore \u003d total / noSubjects;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 167
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/StatisticsRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Wraps all data at the statistics level"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class StatisticsRecord implements ReadOnlyStatisticsRecord {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final ObservableList\u003cStatistics\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final ObservableList\u003cStatistics\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public StatisticsRecord() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Creates an StatisticsRecord using the Statistics in the {@code toBeCopied}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public StatisticsRecord(ReadOnlyStatisticsRecord toBeCopied) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Replaces the contents of the StatisticsRecord with {@code stats}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param stats the Statistics object to replace existing data with."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setStatistics(Statistics stats) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(stats);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        internalList.setAll(stats);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Resets the existing data of this {@code StatisticsRecord} with {@code newData}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void resetData(ReadOnlyStatisticsRecord newData) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        internalList.setAll(newData.getProcessedStatistics());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return \"Statistics Record is maintaining a statistics data of size: \" + internalUnmodifiableList.size();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public ObservableList\u003cStatistics\u003e getProcessedStatistics() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            || (other instanceof StatisticsRecord // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u0026\u0026 internalList.equals(((StatisticsRecord) other).internalList));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 54,
      "alages97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/ReadOnlyStudentRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Unmodifiable view of an student record"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public interface ReadOnlyStudentRecord {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns an unmodifiable view of the students list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * This list will not contain any duplicate students."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 1,
      "lumwb": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Student.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents a Student in the student record."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public Student(Name name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns true if both students of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * This defines a weaker notion of equality between two students."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean isSameStudent(Student otherStudent) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (otherStudent \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return otherStudent !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            \u0026\u0026 otherStudent.getName().equals(getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns true if both students have the same identity and data fields."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return otherStudent.getName().equals(getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alages97"
        },
        "content": "        Name studentName \u003d new Name(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.name \u003d studentName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 70,
      "alages97": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/StudentRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Duplicates are not allowed (by .isSameStudent comparison)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class StudentRecord implements ReadOnlyStudentRecord {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final UniqueStudentList students;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "    {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public StudentRecord() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Creates an AddressBook using the Students in the {@code toBeCopied}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public StudentRecord(ReadOnlyStudentRecord toBeCopied) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Replaces the contents of the Student list with {@code Students}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * {@code Students} must not contain duplicate Students."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.students.setStudents(students);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void resetData(ReadOnlyStudentRecord newData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        setStudents(newData.getStudentList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //// Student-level operations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Returns true if a Student with the same identity as {@code Student} exists in the address book."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return students.contains(student);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Adds a Student to the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * The Student must not already exist in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void addStudent(Student p) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        students.add(p);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Replaces the given Student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * The Student identity of {@code editedStudent} must not be the same as another"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * existing Student in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(editedStudent);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        students.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void removeStudent(Student key) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        students.remove(key);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return students.asUnmodifiableObservableList().size() + \" Students\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public String getStudentSummary() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return students.getStudentList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                || (other instanceof StudentRecord // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                \u0026\u0026 students.equals(((StudentRecord) other).students));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return students.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 1,
      "lumwb": 99,
      "alages97": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/UniqueStudentList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * A list of Students that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * A Student is considered unique by comparing using {@code Student#isSameStudent(Student)}. As such, adding and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * updating of Students uses Student#isSameStudent(Student) for equality so as to ensure that the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Student being added or updated is unique in terms of identity in the UniqueStudentList. However, the removal of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * a Student uses Student#equals(Object) so as to ensure that the Student with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * @see Student#isSameStudent(Student)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns true if the list contains an equivalent Student as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStudent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Adds a Student to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * The Student must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public boolean add(Student toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Adds a Student to the list, given a group index number."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param groupIndexNumber index number of student in the group."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param toAdd            student to add."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @return true if student is successfully added to the group."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public boolean add(int groupIndexNumber, Student toAdd) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alages97"
        },
        "content": "        int indexNumber \u003d groupIndexNumber - 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alages97"
        },
        "content": "        internalList.add(indexNumber, toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Replaces the Student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * The Student identity of {@code editedStudent} must not be the same as another existing Student in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (!target.isSameStudent(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void setStudent(Index index, Student student) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        internalList.set(index.getZeroBased(), student);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public Student remove(Index index) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return internalList.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public Student remove(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return internalList.remove(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Removes the equivalent Student from the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * The Student must exist in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setStudents(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Replaces the contents of this list with {@code Students}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * {@code Students} must not contain duplicate Students."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public Student getStudent(Index index) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return internalList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public String getStudentList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alages97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alages97"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alages97"
        },
        "content": "            sb.append(i + 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alages97"
        },
        "content": "            sb.append(\". \");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alages97"
        },
        "content": "            sb.append(internalList.get(i));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alages97"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns true if {@code Students} contains only unique Students."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                if (students.get(i).isSameStudent(students.get(j))) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 134,
      "alages97": 43,
      "fabbbbbbyy": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/DuplicateStudentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Signals that the operation will result in duplicate Students (Students are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        super(\"Operation would result in duplicate Students\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/StudentNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.EventRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.ReadOnlyEvents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.RecurrenceType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.OpenEndedQuestion;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.ReadOnlyQuestions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.SavedQuestions;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyQuizzes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.quiz.SavedQuizzes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudentRecord;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.student.StudentRecord;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return new Person[]{};"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static Student[] getSampleStudent() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return new Student[]{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            new Student(new seedu.address.model.student.Name(\"Bernice Yu\"))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static ReadOnlyStudentRecord getSampleStudentRecord() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        StudentRecord sampleSr \u003d new StudentRecord();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        for (Student sampleStudent : getSampleStudent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            sampleSr.addStudent(sampleStudent);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return sampleSr;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static ReadOnlyQuestions getSampleQuestionList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        SavedQuestions savedQuestions \u003d new SavedQuestions();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        OpenEndedQuestion oeq \u003d new OpenEndedQuestion(\"Example question.\", \"Sample answer.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        savedQuestions.addQuestion(oeq);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return savedQuestions;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static ReadOnlyEvents getSampleEventsList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        LocalDateTime endTime \u003d LocalDateTime.now().plusHours(3);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        String eventName \u003d \"Sample Event\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        String colorCategory \u003d \"group01\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        String uniqueIdentifier \u003d \"njoyassistant\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        Event event \u003d new Event(eventName, startTime, endTime, uniqueIdentifier, colorCategory, RecurrenceType.NONE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        ArrayList\u003cEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        eventList.add(event);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        EventRecord sampleEventRecord \u003d new EventRecord(eventList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return sampleEventRecord;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static ReadOnlyQuizzes getSampleQuizList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        SavedQuizzes savedQuizzes \u003d new SavedQuizzes();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return savedQuizzes;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static ReadOnlyStudentRecord getSampleStudents() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alages97"
        },
        "content": "        StudentRecord studentRecord \u003d new StudentRecord();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alages97"
        },
        "content": "        Student student \u003d new Student(new seedu.address.model.student.Name(\"SampleStudent\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alages97"
        },
        "content": "        studentRecord.addStudent(student);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return studentRecord;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 34,
      "Russell-Loh-NUS": 11,
      "alages97": 7,
      "-": 39,
      "fabbbbbbyy": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleNotesUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.NotesRecord;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.ReadOnlyNotesRecord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Contains utility methods for populating NotesRecord with sample data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class SampleNotesUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static Note[] getSampleNotes() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new Note[]{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            new Note(\"tuesday class\", \"give back papers\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            new Note(\"thursday conference\", \"give presentation\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static ReadOnlyNotesRecord getSampleNotesRecord() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        NotesRecord sampleNr \u003d new NotesRecord();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        for (Note sampleNote : getSampleNotes()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            sampleNr.addNote(sampleNote);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return sampleNr;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleStatisticUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.statistics.ReadOnlyStatisticsRecord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.statistics.StatisticsRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Contains utility methods for populating Statistics with sample data."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class SampleStatisticUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static HashMap\u003cString, HashMap\u003cString, Double\u003e\u003e sampleData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static Statistics getSampleStatistics() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        HashMap\u003cString, Double\u003esubjScoreMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        subjScoreMap.put(\"Science\", 72.0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        sampleData.put(\"Jason\", subjScoreMap);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new Statistics(sampleData);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static ReadOnlyStatisticsRecord getSampleStatisticsRecord() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        StatisticsRecord sampleRc \u003d new StatisticsRecord();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        sampleRc.setStatistics(getSampleStatistics());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return sampleRc;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleStudentsUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": " * Represents sample data for students"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class SampleStudentsUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alages97": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns the file path of the addressbook file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 1,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.storage.note.JsonAdaptedNote;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        List\u003cJsonAdaptedNote\u003e sampleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        sampleList.add(new JsonAdaptedNote(\"noteSample\", \"desc\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 5,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.ReadOnlyEvents;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.ReadOnlyNotesRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.ReadOnlyQuestions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyQuizzes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudentRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.storage.event.EventStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.storage.note.NotesRecordStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.storage.question.QuestionStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.storage.quiz.QuizStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.storage.student.StudentRecordStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, StudentRecordStorage,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        QuestionStorage, QuizStorage, NotesRecordStorage, EventStorage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region AddressBook methods"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region StudentRecord methods"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    Path getStudentRecordFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    Optional\u003cReadOnlyStudentRecord\u003e readStudentRecord() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    void saveStudentRecord(ReadOnlyStudentRecord studentRecord) throws IOException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region Question methods"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    Path getSavedQuestionsFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    Optional\u003cReadOnlyQuestions\u003e readQuestions() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    void saveQuestions(ReadOnlyQuestions savedQuestions) throws IOException;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    Path getEventRecordFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    Optional\u003cReadOnlyEvents\u003e readEvents() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    void saveEvents(ReadOnlyEvents events) throws IOException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    //region Quiz methods"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    Path getSavedQuizzesFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    Optional\u003cReadOnlyQuizzes\u003e readQuizzes() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    void saveQuizzes(ReadOnlyQuizzes savedQuizzes) throws IOException;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region NotesRecord methods"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    Path getNotesRecordFilePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    Optional\u003cReadOnlyNotesRecord\u003e readNotesRecord() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    void saveNotesRecord(ReadOnlyNotesRecord notesRecord) throws IOException;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 20,
      "lumwb": 24,
      "Russell-Loh-NUS": 12,
      "-": 31,
      "fabbbbbbyy": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.ReadOnlyEvents;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.ReadOnlyNotesRecord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.ReadOnlyQuestions;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyQuizzes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudentRecord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.storage.event.EventStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.storage.note.NotesRecordStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.storage.question.QuestionStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.storage.quiz.QuizStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.storage.student.StudentRecordStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private StudentRecordStorage studentRecordStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private QuestionStorage questionStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private QuizStorage quizStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private NotesRecordStorage notesRecordStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private EventStorage eventStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                          StudentRecordStorage studentRecordStorage, QuestionStorage questionStorage,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                          QuizStorage quizStorage, NotesRecordStorage notesStorage, EventStorage eventStorage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.studentRecordStorage \u003d studentRecordStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.questionStorage \u003d questionStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.eventStorage \u003d eventStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.quizStorage \u003d quizStorage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.notesRecordStorage \u003d notesStorage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region UserPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region AddressBook methods"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region StudentRecord methods"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Path getStudentRecordFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return studentRecordStorage.getStudentRecordFilePath();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Optional\u003cReadOnlyStudentRecord\u003e readStudentRecord()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return readStudentRecord(studentRecordStorage.getStudentRecordFilePath());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Optional\u003cReadOnlyStudentRecord\u003e readStudentRecord(Path filePath)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        logger.fine(\"Attempting to read student data from file: \" + filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return studentRecordStorage.readStudentRecord(filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void saveStudentRecord(ReadOnlyStudentRecord studentRecord) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        saveStudentRecord(studentRecord, studentRecordStorage.getStudentRecordFilePath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void saveStudentRecord(ReadOnlyStudentRecord studentRecord, Path filePath)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        logger.fine(\"Attempting to write to student data file: \" + filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        studentRecordStorage.saveStudentRecord(studentRecord, filePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region Question methods"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Path getSavedQuestionsFilePath() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questionStorage.getSavedQuestionsFilePath();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Optional\u003cReadOnlyQuestions\u003e readQuestions() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return readQuestions(questionStorage.getSavedQuestionsFilePath());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Optional\u003cReadOnlyQuestions\u003e readQuestions(Path filePath)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        logger.fine(\"Attempting to read question data from file: \" + filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questionStorage.readQuestions(filePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void saveQuestions(ReadOnlyQuestions questions) throws IOException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        saveQuestions(questions, questionStorage.getSavedQuestionsFilePath());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void saveQuestions(ReadOnlyQuestions questions, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        logger.fine(\"Attempting to write to questions data file: \" + filePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        questionStorage.saveQuestions(questions, filePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    //region Quiz methods"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public Path getSavedQuizzesFilePath() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return quizStorage.getSavedQuizzesFilePath();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public Optional\u003cReadOnlyQuizzes\u003e readQuizzes() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return readQuizzes(quizStorage.getSavedQuizzesFilePath());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public Optional\u003cReadOnlyQuizzes\u003e readQuizzes(Path filePath)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        logger.fine(\"Attempting to read quiz data from file: \" + filePath);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return quizStorage.readQuizzes(filePath);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void saveQuizzes(ReadOnlyQuizzes quizzes) throws IOException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        saveQuizzes(quizzes, quizStorage.getSavedQuizzesFilePath());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void saveQuizzes(ReadOnlyQuizzes quizzes, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        logger.fine(\"Attempting to write to quiz file: \" + filePath);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        quizStorage.saveQuizzes(quizzes, filePath);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //region NotesRecord methods"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public Path getNotesRecordFilePath() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return notesRecordStorage.getNotesRecordFilePath();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public Optional\u003cReadOnlyNotesRecord\u003e readNotesRecord() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return readNotesRecord(notesRecordStorage.getNotesRecordFilePath());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public Optional\u003cReadOnlyNotesRecord\u003e readNotesRecord(Path filePath)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        logger.fine(\"Attempting to read student data from file: \" + filePath);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return notesRecordStorage.readNotesRecord(filePath);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void saveNotesRecord(ReadOnlyNotesRecord notesRecord) throws IOException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        saveNotesRecord(notesRecord, notesRecordStorage.getNotesRecordFilePath());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void saveNotesRecord(ReadOnlyNotesRecord notesRecord, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        logger.fine(\"Attempting to write to student data file: \" + filePath);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        notesRecordStorage.saveNotesRecord(notesRecord, filePath);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Path getEventRecordFilePath() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return eventStorage.getEventRecordFilePath();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Optional\u003cReadOnlyEvents\u003e readEvents() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return readEvents(eventStorage.getEventRecordFilePath());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Optional\u003cReadOnlyEvents\u003e readEvents(Path filePath)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        logger.fine(\"Attempting to read events data from file: \" + filePath);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return eventStorage.readEvents(filePath);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void saveEvents(ReadOnlyEvents events) throws IOException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        saveEvents(events, eventStorage.getEventRecordFilePath());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void saveEvents(ReadOnlyEvents events, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        logger.fine(\"Attempting to write to events data file: \" + filePath);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        eventStorage.saveEvents(events, filePath);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 43,
      "lumwb": 65,
      "Russell-Loh-NUS": 39,
      "-": 69,
      "fabbbbbbyy": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/event/EventStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.storage.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.EventRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.ReadOnlyEvents;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents a storage for {@link EventRecord}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public interface EventStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    Path getEventRecordFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns events data as a {@link ReadOnlyEvents}. Returns {@code Optional.empty()}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    Optional\u003cReadOnlyEvents\u003e readEvents() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @see #getEventRecordFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    Optional\u003cReadOnlyEvents\u003e readEvents(Path filePath)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Saves the given {@link ReadOnlyEvents} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param events cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    void saveEvents(ReadOnlyEvents events) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @see #saveEvents(ReadOnlyEvents)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    void saveEvents(ReadOnlyEvents events, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/event/JsonAdaptedEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.storage.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.RecurrenceType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Jackson-friendly version of {@link Event}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"event %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private String eventName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private String startDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private String endDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private String colorCategory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private String uniqueIdentifier;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private String recurrenceType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Constructs a {@code JsonAdaptedEvent} with the given question details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"startDateTime\") String startDateTime,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                            @JsonProperty(\"endDateTime\") String endDateTime,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                            @JsonProperty(\"recurrenceType\") String recurrenceType,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                            @JsonProperty(\"colorCategory\") String colorCategory,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                            @JsonProperty(\"uniqueIdentifier\") String uniqueIdentifier,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                            @JsonProperty(\"eventName\") String eventName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.recurrenceType \u003d recurrenceType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.colorCategory \u003d colorCategory;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.uniqueIdentifier \u003d uniqueIdentifier;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public JsonAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.eventName \u003d source.getEventName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.recurrenceType \u003d source.getRecurrenceType().name();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.colorCategory \u003d source.getColorCategory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.startDateTime \u003d source.getStartDateTime().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.endDateTime \u003d source.getEndDateTime().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.uniqueIdentifier \u003d source.getUniqueIdentifier();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Converts this Jackson-friendly adapted question object into the model\u0027s {@code Event}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *                               question."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (eventName \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, \"EVENT NAME\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (startDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"START DATE TIME\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (endDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"END DATE TIME\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (uniqueIdentifier \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"UNIQUE IDENTIFIER\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        RecurrenceType recurrenceTypeToAdd \u003d RecurrenceType.NONE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (recurrenceType.equals(\"WEEKLY\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            recurrenceTypeToAdd \u003d RecurrenceType.WEEKLY;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } else if (recurrenceType.equals(\"DAILY\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            recurrenceTypeToAdd \u003d RecurrenceType.DAILY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return new Event(eventName, LocalDateTime.parse(startDateTime), LocalDateTime.parse(endDateTime), colorCategory,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                uniqueIdentifier, recurrenceTypeToAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/event/JsonEventStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.storage.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.ReadOnlyEvents;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * A class to access Events data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class JsonEventStorage implements EventStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonEventStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public JsonEventStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Path getEventRecordFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Optional\u003cReadOnlyEvents\u003e readEvents() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return readEvents(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Similar to {@link #readEvents()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Optional\u003cReadOnlyEvents\u003e readEvents(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        Optional\u003cJsonSerializableEvents\u003e jsonEvents \u003d JsonUtil.readJsonFile(filePath, JsonSerializableEvents.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (!jsonEvents.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return Optional.of(jsonEvents.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void saveEvents(ReadOnlyEvents questions) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        saveEvents(questions, filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Similar to {@link #saveEvents(ReadOnlyEvents)}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param filePath location of the data."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void saveEvents(ReadOnlyEvents events, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(events);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableEvents(events), filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/event/JsonSerializableEvents.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.storage.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.EventRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.ReadOnlyEvents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * An Immutable eventRecord that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "@JsonRootName(value \u003d \"events\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "class JsonSerializableEvents {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Constructs a {@code JsonSerializableQuestions} with the given questions."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public JsonSerializableEvents(@JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.events.addAll(events);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Converts a given {@code ReadOnlyEvents} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param source future changes to this will not affect the created {@code"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *               JsonSerializableQuestions}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public JsonSerializableEvents(ReadOnlyEvents source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        events.addAll(source.getAllEvents().stream().map(JsonAdaptedEvent::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Converts the saved events into the model\u0027s {@code eventRecord} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public EventRecord toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        List\u003cEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        for (JsonAdaptedEvent jsonAdaptedEvent : events) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            Event question \u003d jsonAdaptedEvent.toModelType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            eventList.add(question);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return new EventRecord(eventList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/note/JsonAdaptedNote.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.storage.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Jackson-friendly version of {@link Note}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class JsonAdaptedNote {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Note has illegal format. Please Refer to User Guide.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final String note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Constructs a {@code JsonAdaptedNote} with the given note details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public JsonAdaptedNote(@JsonProperty(\"note\") String note, @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Converts a given {@code source} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public JsonAdaptedNote(Note source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        note \u003d source.getNote();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Converts this Jackson-friendly adapted note object into the model\u0027s {@code Note} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted note."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public Note toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (note \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new IllegalValueException(MISSING_FIELD_MESSAGE_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new Note(note, description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/note/JsonNotesRecordStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.storage.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.ReadOnlyNotesRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * A class to access Notes data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class JsonNotesRecordStorage implements NotesRecordStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonNotesRecordStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public JsonNotesRecordStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public Path getNotesRecordFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public Optional\u003cReadOnlyNotesRecord\u003e readNotesRecord() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return readNotesRecord(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Similar to {@link #readNotesRecord()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public Optional\u003cReadOnlyNotesRecord\u003e readNotesRecord(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Optional\u003cJsonSerializableNotesRecord\u003e jsonNotesRecord \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                filePath, JsonSerializableNotesRecord.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (!jsonNotesRecord.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return Optional.of(jsonNotesRecord.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void saveNotesRecord(ReadOnlyNotesRecord notesRecord) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        saveNotesRecord(notesRecord, filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Similar to {@link #saveNotesRecord(ReadOnlyNotesRecord)}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param filePath location of the data."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void saveNotesRecord(ReadOnlyNotesRecord notesRecord, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(notesRecord);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableNotesRecord(notesRecord), filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/note/JsonSerializableNotesRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.storage.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_NOTE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.NotesRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.ReadOnlyNotesRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * An Immutable notesRecord that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "@JsonRootName(value \u003d \"notesRecord\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class JsonSerializableNotesRecord {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final List\u003cJsonAdaptedNote\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Constructs a {@code JsonSerializableNotesRecord} with the given notes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public JsonSerializableNotesRecord(@JsonProperty(\"notes\") List\u003cJsonAdaptedNote\u003e notes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.notes.addAll(notes);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Converts a given {@code ReadOnlyNotesRecord} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableNotesRecord}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public JsonSerializableNotesRecord(ReadOnlyNotesRecord source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        notes.addAll(source.getNotesList().stream().map(JsonAdaptedNote::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Converts this notes record into the model\u0027s {@code NotesRecord} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public NotesRecord toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        NotesRecord notesRecord \u003d new NotesRecord();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        for (JsonAdaptedNote jsonAdaptedNote : notes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            Note note \u003d jsonAdaptedNote.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            if (notesRecord.hasNote(note)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            notesRecord.addNote(note);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return notesRecord;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/note/NotesRecordStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.storage.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.ReadOnlyNotesRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Represents a storage for {@link seedu.address.model.note.NotesRecord}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public interface NotesRecordStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    Path getNotesRecordFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns NotesRecord data as a {@link ReadOnlyNotesRecord}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    Optional\u003cReadOnlyNotesRecord\u003e readNotesRecord() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @see #readNotesRecord()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    Optional\u003cReadOnlyNotesRecord\u003e readNotesRecord(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Saves the given {@link ReadOnlyNotesRecord} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param notesRecord cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    void saveNotesRecord(ReadOnlyNotesRecord notesRecord) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @see #saveNotesRecord(ReadOnlyNotesRecord)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    void saveNotesRecord(ReadOnlyNotesRecord notesRecord, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/question/JsonAdaptedQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.storage.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.McqQuestion;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.OpenEndedQuestion;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Jackson-friendly version of {@link Question}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "class JsonAdaptedQuestion {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"question %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String optionA \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String optionB \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String optionC \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String optionD \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Constructs a {@code JsonAdaptedQuestion} with the given question details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public JsonAdaptedQuestion(@JsonProperty(\"question\") String question,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        @JsonProperty(\"answer\") String answer,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        @JsonProperty(\"type\") String type,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        @JsonProperty(\"optionA\") String optionA,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        @JsonProperty(\"optionB\") String optionB,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        @JsonProperty(\"optionC\") String optionC,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        @JsonProperty(\"optionD\") String optionD) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.optionA \u003d optionA;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.optionB \u003d optionB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.optionC \u003d optionC;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.optionD \u003d optionD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Converts a given {@code Question} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public JsonAdaptedQuestion(Question source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        question \u003d source.getQuestion();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        answer \u003d source.getAnswer();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (source instanceof OpenEndedQuestion) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            type \u003d \"open\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } else if (source instanceof McqQuestion) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            type \u003d \"mcq\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            optionA \u003d ((McqQuestion) source).getOptionA();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            optionB \u003d ((McqQuestion) source).getOptionB();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            optionC \u003d ((McqQuestion) source).getOptionC();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            optionD \u003d ((McqQuestion) source).getOptionD();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            type \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Converts this Jackson-friendly adapted question object into the model\u0027s {@code Question}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *                               question."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Question toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (question \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, \"QUESTION\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"ANSWER\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"TYPE\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (type.equals(\"open\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return new OpenEndedQuestion(question, answer);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } else if (type.equals(\"mcq\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            if (optionA \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                throw new IllegalValueException("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, \"OPTION A\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            if (optionB \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                throw new IllegalValueException("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, \"OPTION B\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            if (optionC \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                throw new IllegalValueException("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, \"OPTION C\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            if (optionD \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                throw new IllegalValueException("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, \"OPTION D\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return new McqQuestion(question, answer, optionA, optionB, optionC, optionD);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"TYPE\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/question/JsonQuestionStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.storage.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.ReadOnlyQuestions;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * A class to access SavedQuestions data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class JsonQuestionStorage implements QuestionStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonQuestionStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public JsonQuestionStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Path getSavedQuestionsFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Optional\u003cReadOnlyQuestions\u003e readQuestions() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return readQuestions(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Similar to {@link #readQuestions()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Optional\u003cReadOnlyQuestions\u003e readQuestions(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Optional\u003cJsonSerializableQuestions\u003e jsonQuestions \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            filePath, JsonSerializableQuestions.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (!jsonQuestions.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return Optional.of(jsonQuestions.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void saveQuestions(ReadOnlyQuestions questions) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        saveQuestions(questions, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Similar to {@link #saveQuestions(ReadOnlyQuestions)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param filePath location of the data."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void saveQuestions(ReadOnlyQuestions questions, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        requireNonNull(questions);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableQuestions(questions), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/question/JsonSerializableQuestions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.storage.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.ReadOnlyQuestions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.SavedQuestions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * An Immutable savedQuestions that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "@JsonRootName(value \u003d \"savedQuestions\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "class JsonSerializableQuestions {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_QUESTION \u003d \"Questions list contains duplicate question(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final List\u003cJsonAdaptedQuestion\u003e questions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Constructs a {@code JsonSerializableQuestions} with the given questions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public JsonSerializableQuestions("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        @JsonProperty(\"questions\") List\u003cJsonAdaptedQuestion\u003e questions) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.questions.addAll(questions);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Converts a given {@code ReadOnlyQuestions} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param source future changes to this will not affect the created {@code"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *               JsonSerializableQuestions}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public JsonSerializableQuestions(ReadOnlyQuestions source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        questions.addAll(source.getSavedQuestions().stream().map(JsonAdaptedQuestion::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Converts the saved questions into the model\u0027s {@code savedQuestions} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public SavedQuestions toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        SavedQuestions savedQuestions \u003d new SavedQuestions();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        for (JsonAdaptedQuestion jsonAdaptedQuestion : questions) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            Question question \u003d jsonAdaptedQuestion.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            if (savedQuestions.hasQuestion(question)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_QUESTION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            savedQuestions.addQuestion(question);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return savedQuestions;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/question/QuestionStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.storage.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.ReadOnlyQuestions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.SavedQuestions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Represents a storage for {@link SavedQuestions}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public interface QuestionStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    Path getSavedQuestionsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns SavedQuestions data as a {@link ReadOnlyQuestions}. Returns {@code Optional.empty()}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    Optional\u003cReadOnlyQuestions\u003e readQuestions() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @see #getSavedQuestionsFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    Optional\u003cReadOnlyQuestions\u003e readQuestions(Path filePath)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Saves the given {@link ReadOnlyQuestions} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param questions cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    void saveQuestions(ReadOnlyQuestions questions) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @see #saveQuestions(ReadOnlyQuestions)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    void saveQuestions(ReadOnlyQuestions questions, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/quiz/JsonAdaptedQuiz.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "package seedu.address.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Jackson-friendly version of {@link Quiz}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "class JsonAdaptedQuiz {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"quiz\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private final String quizId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private final String questions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Constructs a {@code JsonAdaptedQuiz} with the given quiz details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public JsonAdaptedQuiz(@JsonProperty(\"quizId\") String quizId,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "                           @JsonProperty(\"questions\") String questions) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.quizId \u003d quizId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.questions \u003d questions;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Converts a given {@code Quiz} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public JsonAdaptedQuiz(Quiz source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        quizId \u003d source.getQuizId();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        questions \u003d source.getStringQuestions();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        System.out.println(\"Getting\" + questions);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Converts this Jackson-friendly adapted quiz object into the model\u0027s {@code Quiz} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted quiz."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public Quiz toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (quizId \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"QUIZ_ID\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        Quiz quiz \u003d new Quiz(quizId);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        quiz.setStringQuestions(questions);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        System.out.println(\"Setting\" + questions);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return quiz;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fabbbbbbyy": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/quiz/JsonQuizStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "package seedu.address.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyQuizzes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * A class to access SavedQuizzes data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "public class JsonQuizStorage implements QuizStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonQuizStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public JsonQuizStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public Path getSavedQuizzesFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public Optional\u003cReadOnlyQuizzes\u003e readQuizzes() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return readQuizzes(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Similar to {@link #readQuizzes()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public Optional\u003cReadOnlyQuizzes\u003e readQuizzes(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        Optional\u003cJsonSerializableQuizzes\u003e jsonQuizzes \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            filePath, JsonSerializableQuizzes.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        if (!jsonQuizzes.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            return Optional.of(jsonQuizzes.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void saveQuizzes(ReadOnlyQuizzes quizzes) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        saveQuizzes(quizzes, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Similar to {@link #saveQuizzes(ReadOnlyQuizzes)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param filePath location of the data."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public void saveQuizzes(ReadOnlyQuizzes quizzes, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        requireNonNull(quizzes);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableQuizzes(quizzes), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fabbbbbbyy": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/quiz/JsonSerializableQuizzes.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "package seedu.address.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.quiz.Quiz;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyQuizzes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.quiz.SavedQuizzes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * An Immutable savedQuestions that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "@JsonRootName(value \u003d \"savedQuizzes\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "class JsonSerializableQuizzes {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_QUESTION \u003d \"Quizzes list contains duplicate quizzes.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    private final List\u003cJsonAdaptedQuiz\u003e quizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Constructs a {@code JsonSerializableQuizzes} with the given questions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public JsonSerializableQuizzes("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        @JsonProperty(\"quizzes\") List\u003cJsonAdaptedQuiz\u003e quizzes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        this.quizzes.addAll(quizzes);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Converts a given {@code ReadOnlyQuizzes} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param source future changes to this will not affect the created {@code"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     *               JsonSerializableQuizzes}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public JsonSerializableQuizzes(ReadOnlyQuizzes source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        quizzes.addAll(source.getSavedQuizzes().stream().map(JsonAdaptedQuiz::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Converts the saved quizzes into the model\u0027s {@code savedQuizzes} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    public SavedQuizzes toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        SavedQuizzes savedQuizzes \u003d new SavedQuizzes();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        for (JsonAdaptedQuiz jsonAdaptedQuiz : quizzes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            Quiz quiz \u003d jsonAdaptedQuiz.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            savedQuizzes.addQuiz(quiz);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        return savedQuizzes;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fabbbbbbyy": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/quiz/QuizStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "package seedu.address.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyQuizzes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import seedu.address.model.quiz.SavedQuizzes;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " * Represents a storage for {@link SavedQuizzes}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "public interface QuizStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    Path getSavedQuizzesFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Returns SavedQuestions data as a {@link ReadOnlyQuizzes}. Returns {@code Optional.empty()}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    Optional\u003cReadOnlyQuizzes\u003e readQuizzes() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @see #getSavedQuizzesFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    Optional\u003cReadOnlyQuizzes\u003e readQuizzes(Path filePath)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * Saves the given {@link ReadOnlyQuizzes} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @param quizzes cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    void saveQuizzes(ReadOnlyQuizzes quizzes) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     * @see #saveQuizzes(ReadOnlyQuizzes)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "    void saveQuizzes(ReadOnlyQuizzes quizzes, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fabbbbbbyy": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/student/JsonAdaptedStudent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.storage.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Jackson-friendly version of {@link Student}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public JsonAdaptedStudent(@JsonProperty(\"name\") String name) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Converts a given {@code Student} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Converts this Jackson-friendly adapted student object into the model\u0027s {@code Student} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return new Student(modelName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 51,
      "alages97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/student/JsonSerializableStudentRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.storage.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudentRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.student.StudentRecord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * An Immutable studentRecord that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "@JsonRootName(value \u003d \"studentRecord\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "class JsonSerializableStudentRecord {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"Students list contains duplicate student(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Constructs a {@code JsonSerializableStudentRecord} with the given students."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public JsonSerializableStudentRecord(@JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.students.addAll(students);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Converts a given {@code ReadOnlyStudentRecord} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablestudentRecord}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public JsonSerializableStudentRecord(ReadOnlyStudentRecord source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        students.addAll(source.getStudentList().stream().map(JsonAdaptedStudent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Converts this address book into the model\u0027s {@code studentRecord} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public StudentRecord toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        StudentRecord studentRecord \u003d new StudentRecord();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        for (JsonAdaptedStudent jsonAdaptedstudent : students) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            Student student \u003d jsonAdaptedstudent.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            if (studentRecord.hasStudent(student)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            studentRecord.addStudent(student);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return studentRecord;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 2,
      "lumwb": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/student/JsonStudentRecordStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.storage.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudentRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class JsonStudentRecordStorage implements StudentRecordStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonStudentRecordStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public JsonStudentRecordStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Path getStudentRecordFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Optional\u003cReadOnlyStudentRecord\u003e readStudentRecord() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return readStudentRecord(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Similar to {@link #readStudentRecord()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Optional\u003cReadOnlyStudentRecord\u003e readStudentRecord(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        Optional\u003cJsonSerializableStudentRecord\u003e jsonStudentRecord \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                filePath, JsonSerializableStudentRecord.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (!jsonStudentRecord.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return Optional.of(jsonStudentRecord.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void saveStudentRecord(ReadOnlyStudentRecord studentRecord) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        saveStudentRecord(studentRecord, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Similar to {@link #saveStudentRecord(ReadOnlyStudentRecord)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param filePath location of the data."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void saveStudentRecord(ReadOnlyStudentRecord studentRecord, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(studentRecord);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableStudentRecord(studentRecord), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 1,
      "lumwb": 77,
      "alages97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/student/StudentRecordStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.storage.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.student.ReadOnlyStudentRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.student.StudentRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Represents a storage for {@link StudentRecord}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public interface StudentRecordStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    Path getStudentRecordFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns StudentRecord data as a {@link ReadOnlyStudentRecord}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    Optional\u003cReadOnlyStudentRecord\u003e readStudentRecord() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @see #getStudentRecordFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    Optional\u003cReadOnlyStudentRecord\u003e readStudentRecord(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Saves the given {@link ReadOnlyStudentRecord} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param studentRecord cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    void saveStudentRecord(ReadOnlyStudentRecord studentRecord) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @see #saveStudentRecord(ReadOnlyStudentRecord)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    void saveStudentRecord(ReadOnlyStudentRecord studentRecord, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 3,
      "lumwb": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 75,
      "fabbbbbbyy": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventSchedulePanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import jfxtras.icalendarfx.VCalendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import jfxtras.internal.scene.control.skin.agenda.AgendaWeekSkin;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import jfxtras.scene.control.agenda.icalendar.ICalendarAgenda;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * EventSchedulePanel shows a timetable of all events saved."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class EventSchedulePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private static final Locale calendarLocale \u003d Locale.UK;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private static final String FXML \u003d \"EventSchedulePanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private VCalendar vCalendar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private ICalendarAgenda agenda;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EventSchedulePanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private BorderPane eventScheduleBorderPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public EventSchedulePanel(ObservableList\u003cVEvent\u003e vEventList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.vCalendar \u003d new VCalendar();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        vCalendar.setVEvents(vEventList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.agenda \u003d new ICalendarAgenda(this.vCalendar);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        // set calendar to start week on monday"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.agenda.setLocale(calendarLocale);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        setWeekSkin();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        eventScheduleBorderPane.setCenter(agenda);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private void setWeekSkin() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        AgendaWeekSkin weekSkin \u003d new AgendaWeekSkin(agenda);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        agenda.setSkin(weekSkin);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void updateScheduler() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.agenda.updateAppointments();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.CommandResultType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar and space where"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alages97"
        },
        "content": "    //private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private StudentListPanel studentListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private SlideshowWindow slideShowWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private StatsReportWindow statsReportWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private NotesListPanel notesListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private EventSchedulePanel eventSchedulePanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private StackPane mainPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private StackPane notesListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        statsReportWindow \u003d new StatsReportWindow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        slideShowWindow \u003d new SlideshowWindow(new Stage(), logic);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alages97"
        },
        "content": "        studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        mainPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        notesListPanel \u003d new NotesListPanel(logic.getFilteredNotesList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        notesListPanelPlaceholder.getChildren().add(notesListPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        eventSchedulePanel \u003d new EventSchedulePanel(logic.getVEventList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Opens the slideshow window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void handleSlideshow() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (!slideShowWindow.isShowing()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            slideShowWindow.show();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            slideShowWindow.focus();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Opens the schedule window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void handleSchedule() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        mainPanelPlaceholder.getChildren().add(eventSchedulePanel.getRoot());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Opens the schedule window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void handleStudent() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        mainPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Opens the statistics report window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void handleStats() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        StatisticsCard statsCard \u003d new StatisticsCard(logic.getProcessedStatistics());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        statsReportWindow.setStatsCard(statsCard);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (!statsReportWindow.isShowing()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            statsReportWindow.show();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            statsReportWindow.focus();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Show UI"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private CommandResult executeCommand(String commandText)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "            throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            CommandResultType commandResultType \u003d commandResult.getCommandResultType();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            switch (commandResultType) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            case SHOW_HELP:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            case SHOW_SLIDESHOW:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                handleSlideshow();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            case EXIT:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            case SHOW_SCHEDULE:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                eventSchedulePanel.updateScheduler();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                handleSchedule();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            case SHOW_STATISTIC:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                handleStats();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            case SHOW_STUDENT:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                handleStudent();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 39,
      "lumwb": 29,
      "Russell-Loh-NUS": 19,
      "alages97": 3,
      "-": 179,
      "fabbbbbbyy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NotesCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * An UI component that displays information of a {@code Note}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class NotesCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static final String FXML \u003d \"NotesListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final Note note;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private Label noteTitle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public NotesCard(Note note, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        noteTitle.setText(note.getNote());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        description.setText(note.getDescription());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (!(other instanceof NotesCard)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        NotesCard card \u003d (NotesCard) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return noteTitle.getText().equals(card.noteTitle.getText())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u0026\u0026 note.equals(card.note);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NotesListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Panel containing the list of notes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class NotesListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static final String FXML \u003d \"NotesListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(NotesListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private ListView\u003cNote\u003e notesListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public NotesListPanel(ObservableList\u003cNote\u003e notesList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        notesListView.setItems(notesList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        notesListView.setCellFactory(listView -\u003e new NotesListPanel.NotesListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Note} using a {@code NotesCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    class NotesListViewCell extends ListCell\u003cNote\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        protected void updateItem(Note note, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            super.updateItem(note, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            if (empty || note \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                setGraphic(new NotesCard(note, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/QuestionPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.McqQuestion;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Displays Question objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class QuestionPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private static final String FXML \u003d \"QuestionPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * a consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final Question question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private Label questionLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private Label answerLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionPanel(Question question) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        questionLabel.setText(\"Question: \" + question.getQuestion());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (question instanceof McqQuestion) { // Set options for mcq questions"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            McqQuestion mcq \u003d (McqQuestion) question;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            questionLabel.setText(questionLabel.getText() + \"\\n\\nA) \" + mcq.getOptionA());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            questionLabel.setText(questionLabel.getText() + \"\\nB) \" + mcq.getOptionB());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            questionLabel.setText(questionLabel.getText() + \"\\nC) \" + mcq.getOptionC());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            questionLabel.setText(questionLabel.getText() + \"\\nD) \" + mcq.getOptionD());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        answerLabel.setText(\"Answer: \" + question.getAnswer());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Shows the current answer of the question."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void showAnswer() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        answerLabel.setVisible(true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets visibility of question panel."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void setVisible(boolean isVisible) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        getRoot().setVisible(isVisible);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (!(other instanceof QuestionPanel)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionPanel questionPanel \u003d (QuestionPanel) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questionLabel.getText().equals(questionPanel.questionLabel.getText())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \u0026\u0026 question.equals(questionPanel.question);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SlideshowWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class SlideshowWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String TIP \u003d \"Press \u0027Esc\u0027 to quit slideshow\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Press \u0027Space\u0027 to show the answer\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Use the \u0027Left/Right\u0027 arrow keys to navigate\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SlideshowWindow.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private static final String FXML \u003d \"SlideshowWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final ObservableList\u003cQuestionPanel\u003e questionPanels \u003d FXCollections"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        .observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private int currQuestionIndex \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private Pane questionPane;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private Label tipLabel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private Label questionNoLabel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Creates a new SlideshowWindow."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param root  Stage to use as the root of the SlideshowWindow."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param logic to be used for interacting with models."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public SlideshowWindow(Stage root, Logic logic) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        tipLabel.setText(TIP);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        root.setFullScreen(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        initialiseKeyboardControls(root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Unhides the window."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        logger.fine(\"Show slideshow.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        updateQuestions();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns true if the slideshow window is currently being shown."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Hides the slideshow window."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Focuses on the slideshow window."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets the keyboard listener and their corresponding actions."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private void initialiseKeyboardControls(Stage root) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        root.getScene().addEventFilter(KeyEvent.KEY_PRESSED, (KeyEvent keyEvent) -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            if (keyEvent.getCode() \u003d\u003d KeyCode.ESCAPE) { // End slideshow"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                hide();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            } else if (keyEvent.getCode() \u003d\u003d KeyCode.RIGHT) { // Next question"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                nextQuestion();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            } else if (keyEvent.getCode() \u003d\u003d KeyCode.LEFT) { // Previous question"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                prevQuestion();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            } else if (keyEvent.getCode() \u003d\u003d KeyCode.SPACE) { // Show answer"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                showAnswer();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        });"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets the next question to be displayed and closes the window if there\u0027s no more questions."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private void nextQuestion() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        currQuestionIndex++;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        updateQuestionNoLabel();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (currQuestionIndex \u003e\u003d questionPanels.size()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            hide();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            questionPanels.get(currQuestionIndex - 1).setVisible(false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            questionPanels.get(currQuestionIndex).setVisible(true);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets the previous question to be displayed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private void prevQuestion() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (currQuestionIndex \u003e 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            currQuestionIndex--;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            updateQuestionNoLabel();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            questionPanels.get(currQuestionIndex + 1).setVisible(false);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            questionPanels.get(currQuestionIndex).setVisible(true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Shows the current answer of the question."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private void showAnswer() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionPanel questionPanel \u003d questionPanels.get(currQuestionIndex);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        questionPanel.showAnswer();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Updates the question no. label to follow the current question index."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private void updateQuestionNoLabel() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        questionNoLabel.setText(\"Question \" + (currQuestionIndex + 1));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Updates the questions display."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private void updateQuestions() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // Clear existing data"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        currQuestionIndex \u003d 0;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        questionPanels.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        questionPane.getChildren().clear();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // Adding question panels from question list to the pane"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        ObservableList\u003cQuestion\u003e questions \u003d logic.getSlideshowQuestions();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        for (int i \u003d 0; i \u003c questions.size(); i++) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            QuestionPanel panel \u003d new QuestionPanel(questions.get(i));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            Region region \u003d panel.getRoot();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            region.setVisible(false);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            questionPanels.add(panel);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            questionPane.getChildren().add(region);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // Set visible for first question"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // when there is at least one question in the pane"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (questionPanels.size() \u003e 0) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            updateQuestionNoLabel();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            questionPanels.get(0).setVisible(true);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 1,
      "Russell-Loh-NUS": 176
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatisticsCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.model.statistics.Statistics.BELOW_FIFTY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.model.statistics.Statistics.EIGHTY_AND_ABOVE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.model.statistics.Statistics.FIFTY_TO_FIFTY_NINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.model.statistics.Statistics.SEVENTY_TO_SEVENTY_NINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.model.statistics.Statistics.SIXTY_TO_SIXTY_NINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * An UI component that displays information of {@code Statistics}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class StatisticsCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static final String FXML \u003d \"StatisticsCard.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static final String PIE_CHART_TITLE \u003d \"Weighted Grade Distribution\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static final String LINE_CHART_TITLE \u003d \"Score Frequency Distribution\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static final String AXIS_X_LABEL \u003d \"Weighted Average Score\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static final String AXIS_Y_LABEL \u003d \"Num Of Students(s)\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static final String DATA_SERIES_LABEL \u003d \"Class Data Series\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private Statistics stat;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private Label totalStudents;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private Label mean;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private Label median;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private Label min;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private Label max;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private Label standardDev;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private PieChart distributionChart;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private LineChart\u003cNumber, Number\u003e lineChart;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Contains UI elements and data for the statistics report."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param stat the Statistics object containing relevant processed information."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public StatisticsCard(ObservableList\u003cStatistics\u003e stat) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        postStat(stat);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        populatePieChart();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        populateLineChart();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Updates the UI elements with the processed statistics."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param stat"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void postStat(ObservableList\u003cStatistics\u003e stat) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.stat \u003d stat.get(0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        totalStudents.setText(String.valueOf(this.stat.getTotalStudents()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        mean.setText((String.format(\"%.2f\", this.stat.getMean())));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        median.setText((String.format(\"%.2f\", this.stat.getMedian())));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        min.setText((String.format(\"%.2f\", this.stat.getMin())));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        max.setText((String.format(\"%.2f\", this.stat.getMax())));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        standardDev.setText((String.format(\"%.2f\", this.stat.getStandardDev())));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Sets the pie chart element with corresponding data."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void populatePieChart() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        HashMap\u003cString, Integer\u003e gradeGroupings \u003d stat.getGradeGroupings();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                FXCollections.observableArrayList("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                        new PieChart.Data(\"\u003e\u003d 80\", gradeGroupings.get(EIGHTY_AND_ABOVE)),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                        new PieChart.Data(\"70 ~ 79\", gradeGroupings.get(SEVENTY_TO_SEVENTY_NINE)),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                        new PieChart.Data(\"60 ~ 69\", gradeGroupings.get(SIXTY_TO_SIXTY_NINE)),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                        new PieChart.Data(\"50 ~ 59\", gradeGroupings.get(FIFTY_TO_FIFTY_NINE)),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                        new PieChart.Data(\"\u003c 50\", gradeGroupings.get(BELOW_FIFTY)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        distributionChart.setData(pieChartData);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        distributionChart.setTitle(PIE_CHART_TITLE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        distributionChart.setLegendSide(Side.LEFT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        distributionChart.setLabelsVisible(false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Sets the line chart element with corresponding data."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void populateLineChart() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        NumberAxis xAxis \u003d (NumberAxis) lineChart.getXAxis();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        NumberAxis yAxis \u003d (NumberAxis) lineChart.getYAxis();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        yAxis.setLabel(AXIS_Y_LABEL);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        xAxis.setLabel(AXIS_X_LABEL);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        xAxis.setForceZeroInRange(false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        lineChart.setTitle(LINE_CHART_TITLE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        XYChart.Series series \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        series.setName(DATA_SERIES_LABEL);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        HashMap\u003cInteger, Integer\u003e frequencyDistribution \u003d stat.getFrequencyDistribution();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        for (Map.Entry\u003cInteger, Integer\u003e entry : frequencyDistribution.entrySet()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            series.getData().add(new XYChart.Data(entry.getKey(), entry.getValue()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        lineChart.getData().add(series);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatsReportWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Controller for a statistics report page."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class StatsReportWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String TIP \u003d \"Press \u0027Esc\u0027 to quit slideshow\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatsReportWindow.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static final String FXML \u003d \"StatsReportWindow.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private StatisticsCard statsCard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private Label tipLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private StackPane statisticsPanelPlaceholder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Creates a new StatsReportWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param root Stage to use as the root of the StatsReportWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public StatsReportWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        tipLabel.setText(TIP);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        root.setFullScreen(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        // Set keyboard listener"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        root.getScene().addEventFilter(KeyEvent.KEY_PRESSED, (KeyEvent keyEvent) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            if (keyEvent.getCode() \u003d\u003d KeyCode.ESCAPE) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                root.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        root.getScene().getStylesheets().add(\"view/LightTheme.css\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        root.getScene().getStylesheets().add(\"view/Extensions.css\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Creates a new StatsReportWindow."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public StatsReportWindow() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setStatsCard(StatisticsCard statsCard) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.statsCard \u003d statsCard;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        statisticsPanelPlaceholder.getChildren().add(statsCard.getRoot());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Shows the statistics window."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        logger.fine(\"Showing Statistics Report...\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        getRoot().setFullScreen(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns true if the statistics report window is currently being shown."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Hides the statistics report window."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Focuses on the statistics report window."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class StudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private static final String FXML \u003d \"StudentListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alages97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alages97"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alages97"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alages97"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return name.getText().equals(card.name.getText())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alages97"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alages97": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alages97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alages97"
        },
        "content": " * Panel containing the list of students."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class StudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private static final String FXML \u003d \"StudentListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private ListView\u003cStudent\u003e studentListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alages97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "        studentListView.setItems(studentList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alages97"
        },
        "content": "        studentListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alages97"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alages97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alages97"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alages97"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alages97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alages97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alages97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alages97"
        },
        "content": "                setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alages97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alages97": 46
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ".header {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    -fx-text-color: white;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "#distributionChart {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    -fx-background-color: #FFFFFF;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 17,
      "-": 352
    }
  },
  {
    "path": "src/main/resources/view/EventSchedulePanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    \u003cBorderPane fx:id\u003d\"eventScheduleBorderPane\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lumwb": 8
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ".copyable-label {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     -fx-background-color: rgba(255,255,255,0.75),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                           linear-gradient(to bottom,#aaaaaa 0%,#cccccc 100%);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     -fx-background-insets: 0,1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     -fx-padding: 7px;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     -fx-background-radius: 3px;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     -fx-border-radius: 3px;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     -fx-effect: innershadow(three-pass-box, rgba(0,0,0,0.75),1,0,1,1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     -fx-font: 14px \"Arial\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 17
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        \u003cVBox fx:id\u003d\"mainPanel\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "          \u003cStackPane fx:id\u003d\"mainPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003cHBox fx:id\u003d\"bottomRow\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "          \u003cHBox fx:id\u003d\"notesList\" styleClass\u003d\"pane-with-border\" alignment\u003d\"TOP_RIGHT\" minWidth\u003d\"200\" prefWidth\u003d\"200\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cStackPane fx:id\u003d\"notesListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "          \u003c/HBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" alignment\u003d\"BOTTOM_CENTER\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 9,
      "lumwb": 3,
      "-": 56
    }
  },
  {
    "path": "src/main/resources/view/NotesListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"noteTitle\" styleClass\u003d\"cell_big_label\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$first\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 31
    }
  },
  {
    "path": "src/main/resources/view/NotesListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    \u003cBorderPane xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                prefHeight\u003d\"500\" prefWidth\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003ctop\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cText text\u003d\"Njoy Notes\" styleClass\u003d\"cell_big_label\" textAlignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003c/top\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003ccenter\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cListView fx:id\u003d\"notesListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003c/center\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 20
    }
  },
  {
    "path": "src/main/resources/view/QuestionPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003cVBox alignment\u003d\"CENTER_LEFT\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "      \u003cLabel fx:id\u003d\"questionLabel\" text\u003d\"Question\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \u003cInsets bottom\u003d\"30.0\" top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "      \u003cLabel fx:id\u003d\"answerLabel\" text\u003d\"Answer\" textFill\u003d\"#07a431\" visible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 27
    }
  },
  {
    "path": "src/main/resources/view/SlideshowWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Slideshow\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "         \u003cVBox alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"176.0\" prefWidth\u003d\"254.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "               \u003cHBox alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                     \u003cLabel fx:id\u003d\"tipLabel\" text\u003d\"Press \u0027Esc\u0027 to exit\" textAlignment\u003d\"RIGHT\" textFill\u003d\"#00000076\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                        \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                           \u003cFont name\u003d\"System Italic\" size\u003d\"11.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                        \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "               \u003cLabel fx:id\u003d\"questionNoLabel\" text\u003d\"Question\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                     \u003cFont size\u003d\"32.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                  \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                     \u003cInsets top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                  \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "               \u003cPane fx:id\u003d\"questionPane\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                  \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                     \u003cInsets top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                  \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "               \u003c/Pane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "               \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 53
    }
  },
  {
    "path": "src/main/resources/view/StatisticsCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    \u003cHBox alignment\u003d\"TOP_RIGHT\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_RIGHT\" minHeight\u003d\"105\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cpadding\u003e\u003cInsets top\u003d\"100\" right\u003d\"100\" bottom\u003d\"100\" left\u003d\"100\"/\u003e\u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cLineChart fx:id\u003d\"lineChart\" VBox.vgrow\u003d\"SOMETIMES\" prefHeight\u003d\"400\" prefWidth\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u003cxAxis\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    \u003cNumberAxis side\u003d\"BOTTOM\" label\u003d\"Num Students\" autoRanging\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u003cyAxis\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    \u003cNumberAxis side\u003d\"LEFT\" label\u003d\"Score\" autoRanging\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cpadding\u003e\u003cInsets top\u003d\"100\" right\u003d\"100\" bottom\u003d\"100\" left\u003d\"100\"/\u003e\u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cPieChart fx:id\u003d\"distributionChart\" VBox.vgrow\u003d\"SOMETIMES\" prefHeight\u003d\"400\" prefWidth\u003d\"600\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    \u003cHBox alignment\u003d\"BOTTOM_CENTER\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cLabel text\u003d\"Total Students: \" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"totalStudents\" text\u003d\"\\$first\" styleClass\u003d\"copyable-label\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cpadding\u003e\u003cInsets right\u003d\"50\" bottom\u003d\"20\" left\u003d\"10\"/\u003e\u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cLabel text\u003d\"Mean: \" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"mean\" text\u003d\"\\$first\" styleClass\u003d\"copyable-label\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cpadding\u003e\u003cInsets right\u003d\"50\" bottom\u003d\"20\" left\u003d\"10\"/\u003e\u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cLabel text\u003d\"Median: \" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"median\" text\u003d\"\\$first\" styleClass\u003d\"copyable-label\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cpadding\u003e\u003cInsets right\u003d\"50\" bottom\u003d\"20\" left\u003d\"10\"/\u003e\u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cLabel text\u003d\"Min: \" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"min\" text\u003d\"\\$first\" styleClass\u003d\"copyable-label\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cpadding\u003e\u003cInsets right\u003d\"50\" bottom\u003d\"20\" left\u003d\"10\"/\u003e\u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cLabel text\u003d\"Max: \" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"max\" text\u003d\"\\$first\" styleClass\u003d\"copyable-label\"/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cpadding\u003e\u003cInsets right\u003d\"50\" bottom\u003d\"20\" left\u003d\"10\"/\u003e\u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cLabel text\u003d\"Standard Dev: \" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"standardDev\" text\u003d\"\\$first\" styleClass\u003d\"copyable-label\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cpadding\u003e\u003cInsets right\u003d\"50\" bottom\u003d\"20\" left\u003d\"10\"/\u003e\u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 69
    }
  },
  {
    "path": "src/main/resources/view/StatsReportWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Statistics Report\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003cVBox prefHeight\u003d\"176.0\" prefWidth\u003d\"254.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    \u003cHBox alignment\u003d\"TOP_CENTER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                            \u003cLabel fx:id\u003d\"tipLabel\" text\u003d\"Press \u0027Esc\u0027 to exit\" textAlignment\u003d\"RIGHT\" textFill\u003d\"#00000076\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                                    \u003cFont name\u003d\"System Italic\" size\u003d\"11.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    \u003cHBox fx:id\u003d\"statistics\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"600\" prefWidth\u003d\"600\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"statisticsPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 47
    }
  },
  {
    "path": "src/main/resources/view/StudentListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alages97"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alages97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alages97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alages97"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alages97"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alages97"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alages97"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alages97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alages97"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alages97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "alages97": 32
    }
  },
  {
    "path": "src/main/resources/view/StudentListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": "    \u003cListView fx:id\u003d\"studentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "alages97": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //---------------- Tests for isSimilarWord --------------------------------------"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void isSimilarWord_exactSameWord() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        assertTrue(StringUtil.isSimilarWord(\"testString\", \"testString\", 1.0));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void isSimilarWord_differentWord() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        assertFalse(StringUtil.isSimilarWord(\"a\", \"b\", 0.1));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 13,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "///**import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "// **/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "///**import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;**/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "///**import static seedu.address.testutil.TypicalPersons.AMY;**/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "///**import org.junit.jupiter.api.BeforeEach;**/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "///**import org.junit.jupiter.api.Test;**/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "///**import seedu.address.logic.commands.AddCommand;**/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "///**import seedu.address.logic.commands.ListCommand;**/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "///**import seedu.address.model.person.Person;**/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "///**import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;**/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public Path temporaryFolder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    /**@BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        //StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        //logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     **/"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    /**@Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     **/"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    /**@Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    **/"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    /**@Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    **/"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    /**@Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alages97"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alages97"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // Execute add command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     **/"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    /**@Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    **/"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//            String expectedMessage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//            super(filePath);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 165,
      "alages97": 2,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 35,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        public void addQuestion(Question question) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        public String getQuestionsSummary() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 21,
      "-": 193
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 25,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", CommandResultType.OTHER);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", CommandResultType.OTHER)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", CommandResultType.SHOW_HELP)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", CommandResultType.EXIT)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \"feedback\", CommandResultType.SHOW_HELP).hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \"feedback\", CommandResultType.EXIT).hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 8,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "        } catch (CommandException | IOException ce) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 127,
      "fabbbbbbyy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 99,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 163,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, CommandResultType.EXIT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 1,
      "Russell-Loh-NUS": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 75,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, CommandResultType.SHOW_HELP);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 1,
      "Russell-Loh-NUS": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 30,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/question/QuestionAddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.logic.commands.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.testutil.question.TypicalQuestions.getTypicalSavedQuestions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.EventRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.note.NotesRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.McqQuestion;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.OpenEndedQuestion;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.quiz.SavedQuizzes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.statistics.StatisticsRecord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.student.StudentRecord;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class QuestionAddCommandIntegrationTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new StudentRecord(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        getTypicalSavedQuestions(), new SavedQuizzes(), new NotesRecord(), new EventRecord(), new StatisticsRecord(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void execute_nullParameters_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new QuestionAddCommand(null, null, null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void execute_addOpenEndedQuestion_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String question \u003d \"What is 1+1?\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String answer \u003d \"2\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String type \u003d \"open\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionAddCommand addOpenCommand \u003d new QuestionAddCommand(question, answer, type);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Question expectedQuestion \u003d new OpenEndedQuestion(question, answer);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String expectedMessage \u003d \"Added question: \" + expectedQuestion;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertCommandSuccess(addOpenCommand, model, expectedMessage, model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void execute_addMcqQuestion_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String question \u003d \"What is 1+1?\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String answer \u003d \"2\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String type \u003d \"mcq\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String optionA \u003d \"1\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String optionB \u003d \"2\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String optionC \u003d \"3\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String optionD \u003d \"4\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionAddCommand addMcqCommand \u003d new QuestionAddCommand(question, answer, type, optionA,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            optionB, optionC, optionD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Question expectedQuestion \u003d new McqQuestion(question, answer, optionA, optionB, optionC,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            optionD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String expectedMessage \u003d \"Added question: \" + expectedQuestion;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertCommandSuccess(addMcqCommand, model, expectedMessage, model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionAddCommand addOpenCommand \u003d new QuestionAddCommand(\"What is 1+1?\", \"2\", \"open\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionAddCommand addMcqCommand \u003d new QuestionAddCommand(\"What is 1+1?\", \"2\", \"mcq\", \"1\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \"2\", \"3\", \"4\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // Same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertTrue(addOpenCommand.equals(addOpenCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertTrue(addMcqCommand.equals(addMcqCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // Null"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertFalse(addOpenCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertFalse(addMcqCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // Different questions"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertFalse(addOpenCommand.equals(addMcqCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 2,
      "Russell-Loh-NUS": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/question/QuestionDeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.logic.commands.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.testutil.question.TypicalQuestions.getTypicalSavedQuestions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.EventRecord;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.note.NotesRecord;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.quiz.SavedQuizzes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.statistics.StatisticsRecord;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.student.StudentRecord;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class QuestionDeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new StudentRecord(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        getTypicalSavedQuestions(), new SavedQuizzes(), new NotesRecord(), new EventRecord(), new StatisticsRecord(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void execute_deleteQuestion_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionDeleteCommand deleteCommand \u003d new QuestionDeleteCommand(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Question expectedQuestion \u003d model.getQuestion(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String expectedMessage \u003d \"Deleted question: \" + expectedQuestion;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void execute_invalidQuestionIndex_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getAllQuestions().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionDeleteCommand deleteCommand \u003d new QuestionDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            -\u003e deleteCommand.execute(model));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionDeleteCommand deleteCommand \u003d new QuestionDeleteCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // Same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertTrue(deleteCommand.equals(deleteCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // Null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertFalse(deleteCommand.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // Different index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionDeleteCommand deleteCommandDiffIndex \u003d new QuestionDeleteCommand("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            Index.fromOneBased(2));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertFalse(deleteCommand.equals(deleteCommandDiffIndex));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 2,
      "Russell-Loh-NUS": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/question/QuestionEditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.logic.commands.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.testutil.question.TypicalQuestions.getTypicalSavedQuestions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.event.EventRecord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.note.NotesRecord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.McqQuestion;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.OpenEndedQuestion;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.quiz.SavedQuizzes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.statistics.StatisticsRecord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.student.StudentRecord;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class QuestionEditCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new StudentRecord(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        getTypicalSavedQuestions(), new SavedQuizzes(), new NotesRecord(), new EventRecord(), new StatisticsRecord(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void execute_editQuestionWithDifferentType_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        HashMap\u003cString, String\u003e fields \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"question\", \"Test Edit\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"answer\", \"Test Answer\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"type\", \"mcq\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        HashMap\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        options.put(\"optionA\", \"1\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        options.put(\"optionB\", \"2\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        options.put(\"optionC\", \"3\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        options.put(\"optionD\", \"4\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionEditCommand editCommand \u003d new QuestionEditCommand(index, fields, options);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Question expectedQuestion \u003d new McqQuestion(fields.get(\"question\"), fields.get(\"answer\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            options.get(\"optionA\"), options.get(\"optionB\"), options.get(\"optionC\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            options.get(\"optionD\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String expectedMessage \u003d \"Edited question: \" + expectedQuestion;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void execute_editQuestionWithSameType_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        HashMap\u003cString, String\u003e fields \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"question\", \"Test Edit\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"answer\", \"Test Answer\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"type\", \"open\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionEditCommand editCommand \u003d new QuestionEditCommand(index, fields);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Question expectedQuestion \u003d new OpenEndedQuestion(fields.get(\"question\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            fields.get(\"answer\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String expectedMessage \u003d \"Edited question: \" + expectedQuestion;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void execute_invalidQuestionIndex_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getAllQuestions().size() + 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        HashMap\u003cString, String\u003e fields \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"question\", \"Test Edit\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"answer\", \"Test Answer\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"type\", \"mcq\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionEditCommand editCommand \u003d new QuestionEditCommand(outOfBoundIndex, fields);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX, ()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            -\u003e editCommand.execute(model));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        HashMap\u003cString, String\u003e fields \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"question\", \"Test Edit\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"answer\", \"Test Answer\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"type\", \"mcq\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionEditCommand editCommand \u003d new QuestionEditCommand(Index.fromOneBased(1), fields);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // Same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertTrue(editCommand.equals(editCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // Null"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertFalse(editCommand.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // Different index"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionEditCommand editCommandDiffIndex \u003d new QuestionEditCommand(Index.fromOneBased(2),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            fields);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertFalse(editCommand.equals(editCommandDiffIndex));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // Different question"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        HashMap\u003cString, String\u003e fieldsDiffQuestion \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"question\", \"Test Edit Question\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"answer\", \"Test Answer\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"type\", \"mcq\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionEditCommand editCommandDiffQuestion \u003d new QuestionEditCommand(Index.fromOneBased(2),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            fieldsDiffQuestion);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertFalse(editCommand.equals(editCommandDiffQuestion));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // Different answer"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        HashMap\u003cString, String\u003e fieldsDiffAnswer \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"question\", \"Test Edit\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"answer\", \"Test Answer Different\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"type\", \"mcq\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionEditCommand editCommandDiffAnswer \u003d new QuestionEditCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            fieldsDiffAnswer);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertFalse(editCommand.equals(editCommandDiffAnswer));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // Different type"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        HashMap\u003cString, String\u003e fieldsDiffType \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"question\", \"Test Edit\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"answer\", \"Test Answer\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"type\", \"open\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionEditCommand editCommandDiffType \u003d new QuestionEditCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            fieldsDiffType);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertFalse(editCommand.equals(editCommandDiffType));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 2,
      "Russell-Loh-NUS": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/NjoyParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.commons.core.Messages.EXCEL_FILE_ILLEGAL_INPUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.commons.core.Messages.EXCEL_FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.question.QuestionEditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.statistics.StatisticsAddCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.OpenEndedQuestion;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.testutil.QuestionUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class NjoyParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final NjoyParser parser \u003d new NjoyParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void parseCommand_statistics_addValidFile() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Command command \u003d parser.parseCommand("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \"statistics file/src/test/data/SampleStatisticsData/ValidSampleStatistics.xlsx\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        assertTrue(command instanceof StatisticsAddCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void parseCommand_statistics_addInvalidFile() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        assertThrows(ParseException.class, EXCEL_FILE_ILLEGAL_INPUT, () -\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            parser.parseCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                \"statistics file/src/test/data/SampleStatisticsData/InvalidSampleStatistics.xlsx\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void parseCommand_statistics_addEmptyFile() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        assertThrows(ParseException.class, EXCEL_FILE_NOT_FOUND, () -\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            parser.parseCommand(\"statistics file/e\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void parseCommand_statistics_invalidSyntax() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        assertThrows(ParseException.class, String.format("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            MESSAGE_INVALID_COMMAND_FORMAT, StatisticsAddCommand.MESSAGE_USAGE), () -\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            parser.parseCommand(\"statistics\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void parseCommand_question_edit() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Question question \u003d new OpenEndedQuestion(\"Test\", \"Test Answer\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        HashMap\u003cString, String\u003e fields \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"question\", \"Test Edit\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"answer\", \"Test Answer\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        fields.put(\"type\", \"mcq\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionEditCommand command \u003d (QuestionEditCommand) parser"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            .parseCommand(QuestionUtil.getEditCommand(question));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertEquals(new QuestionEditCommand(INDEX_FIRST_PERSON, fields), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 21,
      "Russell-Loh-NUS": 23,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 191,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 126,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/note/NoteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class NoteTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void sameNoteTitle_consideredDuplicateNote() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Note note \u003d new Note(\"sampleNote\", \"description\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Note otherNote \u003d new Note(\"sampleNote\", \"other description\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        assertTrue(note.isSameNote(otherNote));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void differentNoteTitleSameDescription_consideredUnique() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Note note \u003d new Note(\"sampleNote\", \"description\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Note otherNote \u003d new Note(\"other sampleNote\", \"description\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        assertTrue(!note.isSameNote(otherNote));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableNoteRecordTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class JsonSerializableNoteRecordTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/QuestionUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.question.QuestionAddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.question.QuestionDeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.question.QuestionEditCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * A utility class for Questions."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class QuestionUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns an add command string for adding the {@code Question}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static String getAddCommand(Question question) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return QuestionAddCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_QUESTION + question"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            .getQuestion() + \" \" + CliSyntax.PREFIX_ANSWER + question.getAnswer() + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            + CliSyntax.PREFIX_TYPE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            + \"open\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns an edit command string for adding the {@code Question}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static String getEditCommand(Question question) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return QuestionEditCommand.COMMAND_WORD + \" 1 \" + CliSyntax.PREFIX_QUESTION + \"Test Edit\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            + \" \" + CliSyntax.PREFIX_ANSWER + \"Test Answer\" + \" \" + CliSyntax.PREFIX_TYPE + \"mcq\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns a delete command string for adding the {@code Question}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static String getDeleteCommand(int index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return QuestionDeleteCommand.COMMAND_WORD + \" delete \" + index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/question/QuestionBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.testutil.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.McqQuestion;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.OpenEndedQuestion;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * A utility class to help with building Question objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " *     {@code QuestionBuilder qb \u003d new QuestionBuilder().withQuestion(\"What is 1+1?\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class QuestionBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String DEFAULT_QUESTION \u003d \"How awesome is Njoy?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String DEFAULT_ANSWER \u003d \"Awesome\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String DEFAULT_TYPE \u003d \"open\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String DEFAULT_OPTIONA \u003d \"Very Awesome\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String DEFAULT_OPTIONB \u003d \"Awesome\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String DEFAULT_OPTIONC \u003d \"OK\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String DEFAULT_OPTIOND \u003d \"No Comment\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String optionA;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String optionB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String optionC;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String optionD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        question \u003d DEFAULT_QUESTION;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        answer \u003d DEFAULT_ANSWER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        type \u003d DEFAULT_TYPE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        optionA \u003d DEFAULT_OPTIONA;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        optionB \u003d DEFAULT_OPTIONB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        optionC \u003d DEFAULT_OPTIONC;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        optionD \u003d DEFAULT_OPTIOND;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets the {@code Question} of the {@code Question} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets the {@code Answer} of the {@code Question} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets the {@code Type} of the {@code Question} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionBuilder withType(String type) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets the {@code OptionA} of the {@code Question} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionBuilder withOptionA(String optionA) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.optionA \u003d optionA;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets the {@code OptionB} of the {@code Question} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionBuilder withOptionB(String optionB) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.optionB \u003d optionB;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets the {@code OptionC} of the {@code Question} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionBuilder withOptionC(String optionC) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.optionC \u003d optionC;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets the {@code OptionD} of the {@code Question} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionBuilder withOptionD(String optionD) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.optionD \u003d optionD;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Builds the question with the specified fields."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return Question object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Question build() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (type.equals(\"mcq\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return new McqQuestion(question, answer, optionA, optionB, optionC, optionD);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } else { // Default to open ended"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return new OpenEndedQuestion(question, answer);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/question/TypicalQuestions.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.testutil.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.SavedQuestions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * A utility class containing a list of {@code Question} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class TypicalQuestions {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final Question OPEN_ENDED \u003d new QuestionBuilder().withQuestion(\"What is 1+1?\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        .withAnswer(\"2\").withType(\"open\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final Question MCQ \u003d new QuestionBuilder().withQuestion(\"What is 1+1?\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        .withAnswer(\"B\").withType(\"mcq\").withOptionA(\"1\").withOptionB(\"2\").withOptionC(\"3\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        .withOptionD(\"4\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns an {@code SavedQuestions} with all the typical questions."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static SavedQuestions getTypicalSavedQuestions() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        SavedQuestions sq \u003d new SavedQuestions();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        for (Question question : getTypicalQuestions()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            sq.addQuestion(question);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return sq;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static List\u003cQuestion\u003e getTypicalQuestions() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(OPEN_ENDED, MCQ));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 35
    }
  }
]
