[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d SecureIT"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "https://travis-ci.org/se-edu/addressbook-level3[image:https://travis-ci.org/AY1920S1-CS2103T-F11-3/main.svg?branch\u003dmaster[Build Status]] https://coveralls.io/github/AY1920S1-CS2103T-F11-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-F11-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* SecureIT is a desktop application to manage information securely. It offers features including managing passwords, secret notes, credit cards and encrypted files. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* SecureIT caters to the need of small start-ups with both monetary and infrastructural constraints. With the application, the start-ups can manage their corporate credentials at one place with minimum effort. Moreover, the employees can also use the application to manage their work credentials and personal information."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* SecureIT stores all data locally and securely with one master password."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* The original source of the code is the https://github.com/se-edu/addressbook-level3[AddressBook-Level3] project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 5,
      "hooncp": 1,
      "-": 25
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    implementation group: \u0027org.apache.pdfbox\u0027, name: \u0027pdfbox\u0027, version: \u00272.0.1\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    implementation group: \u0027org.apache.poi\u0027, name: \u0027poi-ooxml\u0027, version: \u00274.1.1\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    implementation group: \u0027org.bouncycastle\u0027, name: \u0027bcprov-jdk15on\u0027, version: \u00271.64\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    archiveName \u003d \u0027SecureIT.jar\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        \u0027site-name\u0027: \u0027SecureIT\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-F11-3/main\u0027,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 7,
      "yhtingg": 2,
      "-": 152
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "SecureIT was developed by the https://github.com/orgs/AY1920S1-CS2103T-F11-3/teams[F11-3] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d Ni Tian Zhen"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "image::niqiukun.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "{empty}[http://github.com/niqiukun[github]]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "Role: Developer / Code Quality +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "Responsibilities: File encryption"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d Hoon Chee Ping"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "image::hooncp.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "{empty}[http://github.com/hooncp[github]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "Role: Developer / Testing +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "Responsibilities: Password encryption"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d Lee Ee Jian"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "image::eejian97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "{empty}[http://github.com/eejian97[github]]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "Role: Developer / UI +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "Responsibilities: Password generation and Analysis"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d Yang Hui Ting"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "image::yhtingg.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "{empty}[http://github.com/yhtingg[github]]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "Role: Developer / Analysis  +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "Responsibilities: Credit card details encryption"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d Leow Jit Yong"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "image::jityong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "{empty}[http://github.com/jityong[github]]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "Role: Developer / Design +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "Responsibilities: Notes encryption"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "jityong": 26,
      "-": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F11-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "* *Email us* : You can also reach us at `teammoonlight97@gmail.com`"
      }
    ],
    "authorContributionMap": {
      "jityong": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d SecureIT - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "By: `SecureIT`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Refer to \u003c\u003cDesign-Logic, 2.3 Logic Component\u003e\u003e to view the Class Diagram of the Logic Component."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ".  `Logic` uses the `ABCBookParser` class to parse the user command, depending on the current mode of the App."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jityong"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a note)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "NOTE: The lifeline for `DeleteNoteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jityong"
        },
        "content": "* stores the CardBook, FileBook, PasswordBook and NoteBook data."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jityong"
        },
        "content": "* exposes unmodifiable `ObservableList\u003cCard\u003e`, `ObservableList\u003cFile\u003e`,`ObservableList\u003cPassword\u003e` and `ObservableList\u003cNote\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to the lists so that the UI automatically updates when the data in the lists change."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* can save the SecureIT data in json format and read it back, including Password Book, File Book, Note Book and Card Book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003d\u003d\u003d Analyse Password"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eejian97"
        },
        "content": "The following class diagram is the current structure of the `Analyser` component, using `DictionaryAnalyser` as an example:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eejian97"
        },
        "content": "image::AnalyserClassDiagram.png[]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eejian97"
        },
        "content": "The `Analyser` component,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* can analyse the current list of `Password` object to produce a list of analysis `Results`."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eejian97"
        },
        "content": "The analyse password makes use of various analysers."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Each type of analyser implements it\u0027s own implementation of `#analyse()` , and inspects the following aspects of the password:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* Complexity (Strength)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* Uniqueness"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* Similarity"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* Commonly-used passwords"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* Commonly-used sequences"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Given below is the example usage of how the analysis for commonly-used passwords is implemented, using the `DictionaryAnalyser`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Step 1. The user inputs `analyse` into the command line. An `AnalysePasswordCommand` is generated and executed by `Logic`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Step 2. On `#execute`, AnalysePasswordCommand retrieves the current list of passwords via `Model#getFilteredPasswordList()`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eejian97"
        },
        "content": "It also retrieves the required analysers via `#getRequiredAnalysers()`. Each analyser will then `#analyse` the list of passwords."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Step 3. In the case of `DictionaryAnalyser`, each subsequence of the particular password is checked against a common-password dictionary"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Every match found is appended to the list of `Match` objects. The following sequence diagram explains how this is done:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eejian97"
        },
        "content": "image::GetAllMatchesSequence.png[]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Step 4. An `AnalysisReport` compiles all the `Results` of each analyser into a string-formatted report for the user."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Step 5. Should the user wish to view a more detailed report for a specific password, user may input `analyse strong/\u003cindex\u003e`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eejian97"
        },
        "content": "The following sequence diagram shows how the overall analyse functionality works:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hooncp"
        },
        "content": "image::AnalysePasswordSequenceDiagram.png[]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How analyse/analyse strong executes"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* **Alternative 1 (current choice):** Always analyse the entire list of Password objects for every \"analyse\" command,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eejian97"
        },
        "content": "even if the list of Passwords was unchanged."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eejian97"
        },
        "content": "** Pros: Easy to implement, not required to check state if the current list of Passwords has been modified."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eejian97"
        },
        "content": "** Cons: May have performance issues in terms of speed of the programme."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* **Alternative 2:** Save in memory the result produced by the Analyser objects, and update result upon modification of"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eejian97"
        },
        "content": "list of Passwords (e.g. new passwords added/ passwords deleted.)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eejian97"
        },
        "content": "** Pros: Performance of programme will be a lot faster."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eejian97"
        },
        "content": "** Cons: Hard to implement. Have to keep track of state of the list of Password objects and check if the list has been modified"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eejian97"
        },
        "content": "from the last time they were analysed."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d Data Encryption"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d Initialization and Validation"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "All data files of SecureIT are encrypted with a master password set by the user. The initialization and validation of the master password is handled by `TestStorage`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "The following sequence diagram shows how the master password is initialized when the user uses the app for the first time, and validated for subsequent uses of the app."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "image::InitPasswordSequenceDiagram.png[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Note that the main components of the app (`Storage`, `Ui`, `Logic`, `Model`) can only be initialised with a correct master password."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "The app does not store the master password itself. Instead, during initialization, the app encrypts a magic word using the password and stores it in the storage. For validation, the app tries to decrypt the stored magic word using the password given and compares if the original word is obtained. If the password given is correct, the decrypted magic word should be the same as the original one."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d Encryption Method"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "The following sequence diagram explains how the `EncryptionUtil` class encrypts an input byte array (`byte[] input`) using using a password (`String pwd`)."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "image::EncryptionUtilSequenceDiagram.png[]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Before the encryption, both a key (`SecretKey key`) and a set of parameter specification (`PBEParameterSpec paramSpec`) are required. The key is generated from the password string and a specified encryption method (`PBEWithMD5AndTripleDES`) via a utility class (`SecretKeyFactory`). On the other hand, the parameter specification is generated with hardcoded parameters (`SALT`, `ITERATION`). Hardcoded parameters ensure that the same password can always be correctly validated at different times."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Finally, a `Cipher` class is constructed with the same encryption method specified above (`PBEWithMD5AndTripleDES`) and initialised with the key and the set of parameter specifications. The `doFinal` method conducts the actual encryption on the input array and returns the encrypted byte array."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "The decryption process is similar to the encryption process, except that the `ENCRYPT_MODE` is changed to `DECRYPT_MODE`. The same password is necessary to decrypt an encrypted byte array to its original content."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* has a significant number of confidential documents to keep track of"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* prefers localised storage for confidential documents to online or third party vault for storing personal information and passwords"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "eejian97"
        },
        "content": "*Value proposition*: Remember only one password, and save the hassle of remembering all other confidential documents (account details, credit card details, secret files, secret notes). Have a safe and secure way to store all confidential documents locally, without the use of the online/ third party / cloud-reliant vaults."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* * *` |employee with multiple confidential items |only have to remember a single password|store all other confidential documents"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* * *` |employee with multiple passwords |store my passwords| access the passwords easily if I forget them"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* * *` |employee handling confidential files |encrypt my files (image , text files) |other users cannot access my files"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* * *` |employee handling confidential files |decrypt my files (images, text files) |re-access my encrypted file/ deem them as no longer confidential"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* * *` |employee with multiple credit/debit cards |store my credit / debit card information |access the card information easily if i did not bring it out"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* *` |employee that has to remember confidential snippets of information |Store notes |other users cannot see my notes  / I have a list of confidential notes which i can access easily"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* *` |employee with multiple passwords |delete my passwords | my list of passwords will not have any passwords which I do not need"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* *` |employee with multiple passwords |update my passwords | I can have the most updated list of passwords"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* *` |employee with multiple passwords |generate strong passwords | I can create new passwords will not be cracked easily"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* *` |employee with multiple passwords |analyse my passwords |I know which passwords are vulnerable and I should change them"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* *` |employee handling confidential files |receive confirmation of which files have been encrypted |I can be sure that I have encrypted the correct files"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`*  *` |employee handling confidential files |see the encryption status of my files |I can know which files are encrypted at one glance"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`*  *` |employee with many credit cards/debit cards |delete my credit cards/debit cards |my list of credit cards/debit cards will not have any unnecessary ones"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`*  *` |employee with many credit cards/debit cards |receive expiry date notifications |I can be sure that my cards are not expired"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`*  *` |employee that has to remember confidential snippets of information|delete notes |my list of confidential notes will not have any unnecessary confidential notes"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`*  *` |employee that has to remember confidential snippets of information|update notes |I can change my notes if there are any new updates to the confidential information"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hooncp"
        },
        "content": "(For all use cases below, the *Actor* is the `user`, the precondition is that `user` needs to be *logged in*, unless specified otherwise)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hooncp"
        },
        "content": "System: `PasswordSys`, `FileSys`, `NoteSys`, `CardSys`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d Use case:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. UC01 - Access password window"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. UC02 - Access file window"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. UC03 - Access note window"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hooncp"
        },
        "content": "4. UC04 - Access credit card window"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hooncp"
        },
        "content": "---"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC01 - Access password window"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User request to access password window"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. PasswordSys checks if user is logged in and gives access to user"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC02 - Access file window"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User request to access file window"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. FileSys checks if user is logged in and gives access to user"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC03 - Access note window"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User request to access note window"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. NoteSys checks if user is logged in and gives access to user"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC02 - Access credit card window"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User request to access credit card window"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. CardSys checks if user is logged in and gives access to user"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "hooncp"
        },
        "content": "---"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hooncp"
        },
        "content": "System: `PasswordSys`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d Use case:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. UC11 - Add a password"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. UC12 - Delete a password"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. UC13 - Update a password"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hooncp"
        },
        "content": "4. UC14 - Generate a password"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hooncp"
        },
        "content": "5. UC15 - Analyse all password"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hooncp"
        },
        "content": "---"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC11 - Add a password"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User chooses to add password"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. User enters details"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. PasswordSys adds the password"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 2a. Not all details are entered."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a1. PasswordSys shows an error message"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case end."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC12 - Delete a password"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User chooses to delete a password"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. User enters description of password"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. PasswordSys removes the password"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 2a. Description entered is invalid"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a1. PasswordSys shows an error message"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case end."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC13 - Update a password"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User chooses to update a password"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. User enters description of password and details of changed password"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. PasswordSys updates the password"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 2a. Description entered is invalid"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a1. PasswordSys shows an error message"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case end."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC14 - Generate a password"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User chooses to generate a password"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. User enters description of password"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. PasswordSys generates a password"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 2a. No description entered"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a1. PasswordSys shows an error message"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case end."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "hooncp"
        },
        "content": "--"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 2b. Description entered already exists"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2b1. PasswordSys shows an error message"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case end."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC15 - Analyse all password"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User chooses to analyse passwords"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. PasswordSys shows report of analysis"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 2a. No passwords available"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a1. PasswordSys shows an error message"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case end."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "hooncp"
        },
        "content": "---"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "System: `FileSys`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d Use case:"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "1. UC21 - Encrypt a file"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "2. UC22 - Decrypt a file"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "---"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC21 - Encrypt a file"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "1. User chooses to encrypt a file"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "2. User enter details"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "3. FileSys encrypts the file"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "* 2a. Details entered are invalid"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "** 2a1. FileSys shows an error message"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC22 - Decrypt a file"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "1. User chooses to decrypt a file"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "2. User enters details"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "3. FileSys decrypts the file"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "* 2a. Details entered are invalid"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "** 2a1. FileSys shows an error message"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "---"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "hooncp"
        },
        "content": "System: `NoteSys`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d Use case:"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. UC31 - Add a note"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. UC32 - Delete a note"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. UC33 - Update a note"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "hooncp"
        },
        "content": "---"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC31 - Add a note"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Guarantees:*"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. Note will be created after step 2 has been executed"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User chooses to add a note"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. User enters description of note"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. NoteSys opens a new note"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "hooncp"
        },
        "content": "4. User enters note details"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "hooncp"
        },
        "content": "5. User submits the note"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "hooncp"
        },
        "content": "6. NoteSys saves the note"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 2a. Description entered already exists"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a1. NoteSys shows an error message"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a2. NoteSys requests for a new description"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a3. User enters new description"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** Steps 2a1-2a3 are repeated until the description entered is valid"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** Use case resumes from step 4"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "hooncp"
        },
        "content": "--"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 5a. No text entered"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 5a1. NoteSys shows a warning message"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case resumes from step 5"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC32 - Delete a note"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User chooses to delete a note"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. User enters description of note"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. NoteSys removes the note"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 2a. Description entered is invalid"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a1. NoteSys shows an error message"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC33 - Update a note"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User chooses to update a note"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. User enters description of password"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. NoteSys opens the note"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "hooncp"
        },
        "content": "4. User edits note details"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "hooncp"
        },
        "content": "5. User submits the note"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "hooncp"
        },
        "content": "6. NoteSys saves the note"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 2a. Description entered is invalid"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a1. NoteSys shows an error message"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 5a. No text entered"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 5a1. NoteSys shows an error message"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "---"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "System: `CardSys`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d Use Case:"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "1. UC41 - Add a card"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "2. UC42 - Delete a card"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "---"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC41 - Add a card"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "1. User chooses to add a card"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "2. User enters description and details"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "3. CardSys adds the card"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "* 2a. Details entered are invalid"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "** 2a1. CardSys shows an error message"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "** 2a2.CardSys requests for new details"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "** 2a3. User enters new details"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "** Steps 2s1-2s3 are repeated until the details entered are valid"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "** Use case resumes from step 3"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC42 - Delete a card"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "1. User chooses to delete a card"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "2. User enters description"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "3. CardSys removes the card"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "* 2a. Description entered does not exist"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "** 2a1. CardSys shows an error message"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Accessibility"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "* A user shall be able to download the released JAR file conveniently from the newest tagged release."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*  The app shall be accessible by anyone who has downloaded the released JAR file."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* Should be accommodating for both advanced, seasoned users as well as new users."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Efficiency"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*  The response of the app to any user action shall appear within 5 seconds."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Performance"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*  The app shall be able to contain up to 1000 items without any drop in performance."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Reliability"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "* The app shall throw appropriate exceptions when any user input is invalid or any user action fails to execute completely."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Security"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "* The app shall resist unauthorised, accidential or unintended usage and provide access only to legitimate users."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Usability"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*  A user with above average typing speed for regular English (i.e. not code, not system admin commands) shall be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Data Integrity"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* Should be able to check for the data integrity as to verify that no one has modified the files within secureIT in an unauthorised fashion."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "jityong"
        },
        "content": ".  Should be able to hold up to 1000 notes without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d Deleting a note"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "jityong"
        },
        "content": ". Deleting a note while all notes are listed"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "jityong"
        },
        "content": ".. Prerequisites: List all notes using the `list` command. Multiple notes in the list."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "jityong"
        },
        "content": "   Expected: No note is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 17,
      "yhtingg": 149,
      "jityong": 8,
      "eejian97": 74,
      "hooncp": 250,
      "-": 347
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What other user stories do you think AddressBook should support? Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all notes who had the `friends` tag will now have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "a `buddies` tag instead)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class. This method will return `true` for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data. The above approach, while not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class implements the `ReadOnlyAddressBook` interface so that clients who don\u0027t need write access to the `AddressBook` can access the `AddressBook` through the `ReadOnlyAddressBook` interface instead."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyAddressBookUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Phone`, `Email`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Phone: 12349862`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Add the following method in a suitable place of some other class. Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jityong"
        },
        "content": "The above method can be used to get a printable string representing a bunch of note details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "// p is a Person object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "return getPrintableString(p.getPhone(), p.getEmail(), p.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method. Notice how Java compiler will not allow it,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "unless you add the same `throws` clause to the parent class method. This is because if a child class throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "the parent class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "the programmer to enforce it. For example, if the method in the parent class works for `null` input, the overridden"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "method in the child class should not reject `null` inputs. This will not be enforced by the compiler."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Consider adding a new command to the Address Book. e.g. an `edit` command. Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* Is it possible to make the `AddressBookParser` class more OCP-compliant in terms of extending it to handle more"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "command types?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "jityong": 2,
      "-": 214
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d SecureIT - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "By: `SecureIT`      Since: `August 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Welcome to SecureIT!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Tired of having to keep track of all your confidential information? Look no further!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "SecureIT is specifically designed to help manage your confidential information all in one application. More importantly,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "it *stores your information locally,*  and does not use any form of online storage!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "SecureIT is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "For those of you who are type fast, SecureIT can get can manage your confidential information faster than traditional GUI apps."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d Basic Information"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "This following guide will teach you how you can use `SecureIT` to keep track of your confidential information so you will never have to worry about your information ever again."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Confused? You refer to \u003c\u003cQuick Start\u003e\u003e for a simple set-up."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "If you are overwhelmed by all the instructions and don\u0027t know which one to use, our \u003c\u003cCheatSheet of commands\u003e\u003e is here to help you."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "The following list of icons below will assist you to understand our material:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[cols\u003d\"3,40\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "|Icon | Meaning"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "a|image::tip.png[width \u003d \"20\"] | Some tips for you to familiarise with the commands"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "a|image::warning.png[width \u003d \"20\"] | Warning! Danger zone. Make sure you know what you are doing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": ".  Download the latest `SecureIT.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your *SecureIT*."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ".  Since this is the first time that you are using *SecureIT*, you will be asked to create a new master password. Type your preferred master password in the command box and hit the `Enter` key."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ".  With that, you have created your very own *SecureIT* account. You can now enter commands in the command box and press `Enter` to execute it."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ".  Here are some example commands that you can try out:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "* `add d/Gmail u/randomGuy p/qwerty123` : adds a password with username \u0027randomGuy\u0027 and password \u0027qwerty123\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "* `analyse` : briefly analyses all your passwords and produces a security report"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "* `analyse strong/1` : analyses your first password and produces a detailed security report"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "* `generate` : generates a random strong password for you"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "* `encrypt \u003cfilepath\u003e` : encrypts the file in the specified filepath"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ".  You may refer to \u003c\u003cFeatures\u003e\u003e for more details of all our available commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "--"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": "image::tip.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "--"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by you e.g. in `add u/USERNAME`, `USERNAME` is a parameter which can be used as `add u/User Doe`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* Items in square brackets are optional e.g `u/USERNAME [t/TAG]` can be used as `u/User Doe t/work` or as `n/User Doe`."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* Items with `…`​ after them can be used multiple times until a limit including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/Work`, `t/SocialMedia t/Personal` etc."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `u/USERNAME p/PASSWORD`, `p/PASSWORD u/USERNAME` is also acceptable."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* All index specified must be a positive number 1,2,3..."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d Password"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hooncp"
        },
        "content": "You can access the password directory using this command : `goto password`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a password : `add`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Too many passwords to remember? You can add a password to the application."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `add d/DESCRIPTION u/USERNAME p/PASSWORD [w/WEBSITE] [t/TAG]...`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `add d/Gmail u/user1 p/password1 w/www.gmail.com/signin t/work`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d Accessing a password : `read`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hooncp"
        },
        "content": "You can open and view the password for the specified index."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `read INDEX`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `read 1`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Copying a field in a password : `copy`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hooncp"
        },
        "content": "You can copy the password value, website or username for the specific index."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `copy password INDEX`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hooncp"
        },
        "content": "--"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hooncp"
        },
        "content": "image::tip.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hooncp"
        },
        "content": "--"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Tip*"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* You can type cp for copy, p for password, u for username and w for website."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* You can only copy one field at a time"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `copy password 1`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `cp p 1`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `cp username 2`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `cp w 2`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d Updating a password : `edit`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Added a wrong password? No worries, you can edit the password."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `edit INDEX [d/DESCRIPTION] [u/USERNAME] [p/PASSWORD] [w/WEBSITE] [t/TAG]`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hooncp"
        },
        "content": "--"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hooncp"
        },
        "content": "image::tip.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hooncp"
        },
        "content": "--"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Tip*"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* You do not need not type all the fields of the password again."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* You can just type the fields that you want to change."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* When editing tags, the existing tags of the password will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* You can remove all the password’s tags by typing t/ without specifying any tags after it."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `edit 1 u/NewUsername`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `edit 1 p/password123 t/`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a password: `delete`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hooncp"
        },
        "content": "--"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hooncp"
        },
        "content": "image::warning.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hooncp"
        },
        "content": "--"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Warning*"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* Deleted passwords are not recoverable"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hooncp"
        },
        "content": "No longer use the user account? You can delete the password as specified by the user."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jityong"
        },
        "content": "Example: `delete 2`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Finding a password: `find`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Too many passwords? You can find the password description as specified by the user."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hooncp"
        },
        "content": "--"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hooncp"
        },
        "content": "image::tip.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hooncp"
        },
        "content": "--"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Tip*"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* The search is case insensitive. e.g `gmail` will match `GMAIL`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* Only the description is searched."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* Incomplete-words will be matched e.g. `Han` will match `Hans`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `find Gmail`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Generating a new password: `generate`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Lazy to think of a strong password?"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Simply enter `generate` into the command box to get one."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eejian97"
        },
        "content": "--"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eejian97"
        },
        "content": "image::tip.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eejian97"
        },
        "content": "--"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eejian97"
        },
        "content": "*Try it out!*"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* You can add custom preferences and configure the following:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eejian97"
        },
        "content": "** Length of password"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eejian97"
        },
        "content": "** Inclusion of upper / lower alphabets"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eejian97"
        },
        "content": "** Inclusion of numbers"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eejian97"
        },
        "content": "** Inclusion of special characters"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* All passwords are automatically copied onto your clipboard."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Format: `generate [length/LENGTH] [lower/TRUE] [upper/TRUE] [num/TRUE] [special/TRUE]`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* The various fields are set to TRUE by default."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* To disable these fields, set to FALSE."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Example: `generate`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Example `generate length/10`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Example: `generate lower/true upper/true num/true special/false`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003d\u003d\u003d\u003d Analysing passwords : `analyse`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Curious how secure your passwords really are? Type `analyse` into the command box to find out."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "eejian97"
        },
        "content": "--"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "eejian97"
        },
        "content": "image::tip.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "eejian97"
        },
        "content": "--"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "eejian97"
        },
        "content": "*Try it out!*"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* You can opt to view:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "eejian97"
        },
        "content": "** A general, summary security report for all passwords, or"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "eejian97"
        },
        "content": "** A detailed security report for a specific password."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* To view the detailed analysis of a particular password, simply add in the `strong` prefix."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Format: `analyse [strong/INDEX]`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Example: `analyse`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Example: `analyse strong/8`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d Card"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Too many credit cards to carry around? With SecureIT, you can easily manage your card information."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "To access your cards, simply enter `goto card` in the command box."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Creating a card : `add`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "You can easily adds cards to the application."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Format: `add d/DESCRIPTION c/CARDNUMBER v/CVC e/EXPIRY [t/TAG]`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Example: `add d/VisaPOSB c/5203123458392748 v/456 e/12/25 t/groceries`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d\u003d Reading a card : `read`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "You can also obtain the details of a card easily, just by its description."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Format: `read d/DESCRIPTION v/CVC`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Example: `read d/VisaPOSB v/456`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a card: `delete`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "If your card has expired, you can easily remove it from the application, by its description."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Format: `delete DESCRIPTION`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `delete VisaPOSB`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d File"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "SecureIT has a file manager which helps you keep secret files that you do not wish others to see. Using your master password, SecureIT convert your files into encrypted code which other apps cannot understand."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "To access the file manager, simply enter `goto file` in the command box."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Encrypting a file : `encrypt`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Encrypts a local file as specified by its file path. The file\u0027s content is converted into encrypted code which other apps cannot understand. Encrypted files have the prefix `[LOCKED]` in their file names."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "As you encrypt the file, you may tag the file at the same time for easy reference later on."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Format: `encrypt FILEPATH [t/TAG]...`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "For Windows: `encrypt C:\\Users\\YOUR_USERNAME\\Desktop\\Test.txt t/personal` +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "For macOS: `encrypt /Users/YOUR_USERNAME/Desktop/Test.txt t/personal` +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "(The actual file path may differ on your OS. Hence, it is always recommended to drag the file in the input field.)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "--"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "image::tip.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "--"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "*Tip*"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* Instead of typing the file path, you can drag the file into the input field to easily append the file path. This also applies to other commands (e.g. `add`, `move`)."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* The app may freeze for some time if the file to be encrypted is large. Please do not force exit the app during encryption."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* The app does not support encryption of files larger than 2GB."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "--"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "image::warning.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "--"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "*Warning*"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* The `encrypt` command only alters the file content but does not set up additional access rights. In other words, it keeps your information secret but does not keep your files safe from malicious alteration or deletion."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* If you wish to prevent alternation or deletion of files, please set up additional access rights using your operating system. SecureIT is not responsible for any data loss resulting from lack of access right settings."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* If you are using Windows, please close the file before encryption."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d Decrypting a file : `decrypt`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Decrypts a local file as specified by the displayed index number."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Format: `decrypt INDEX`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Example: `decrypt 1` (This command decrypts the first file in the displayed file list.)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "--"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "image::tip.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "--"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "*Tip*"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* If you notice that the file decryption fails, it may be because you have renamed the file or moved the file to another location without using SecureIT (for example, using your operating system directly)."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* In that case, use `remove` command to remove the file from the list first, and then use `add` command to add the renamed/moved file. Please refer to the `remove` and `add` command sections for detailed instructions."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an encrypted file : `add`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Adds an encrypted file as specified by its file path. The file must be encrypted by SecureIT previously."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "As you add the file, you may tag the file at the same time for easy reference later on."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Format: `add FILENAME [t/TAG]...`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "For Windows: `add C:\\Users\\YOUR_USERNAME\\Desktop\\[LOCKED] Test.txt t/personal` +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "For macOS: `add /Users/YOUR_USERNAME/Desktop/[LOCKED] Test.txt t/personal` +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "(The actual file path may differ on your OS. Hence, it is always recommended to drag the file in the input field.)"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "--"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "image::tip.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "--"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "*Tip*"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* The file name does not have to contain the prefix `[LOCKED]`. SecureIT can recognise the file and automatically prepend the prefix."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d Removing a file : `remove`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Removes an encrypted file record as specified by the displayed index number."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Please note that only the file record within SecureIT is removed. The actual file is not deleted from the file system."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Format: `remove INDEX`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Example: `remove 1`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "--"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "image::warning.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "--"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "*Warning*"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* The \"encrypted at\" and \"last edited at\" timestamps are stored within SecureIT and will be discarded if you remove the record from SecureIT. They are not recoverable even if you add the file back using `add` command."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d Renaming an encrypted file : `rename`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Renames an encrypted file as specified by its index number. The prefix `[LOCKED]` is retained."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Format: `rename INDEX TARGET_FILENAME`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Example: `rename 1 Test2`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "--"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "image::tip.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "--"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "*Tip*"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* The file extension of the file is retained using `rename` command. If you give a file extension in the target file name, it will be ignored."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d Moving an encrypted file : `move`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Moves an encrypted file as specified by its index number. The target directory must be a real directory (not a shortcut, alias, symbolic link, etc.)"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Format: `move INDEX TARGET_DIRECTORY`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "For Windows: `move 1 C:\\Users\\YOUR_USERNAME\\Desktop` +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "For macOS: `move 1 /Users/YOUR_USERNAME/Desktop` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "(The actual file path may differ on your OS. Hence, it is always recommended to drag the directory in the input field.)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "--"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "image::tip.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "--"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "*Tip*"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* It is recommended to rename and move files using SecureIT to better manage your files."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* If you have renamed or moved your files without using SecureIT (for example, using the operating system directly), you have to use `remove` command to remove the file from the list first, and then use `add` command to add the renamed/moved file."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d Finding encrypted files : `find`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Finds matching encrypted files as specified by the search keywords."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "To return from search results, use `list` command."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Format: `find KEYWORDS...`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Example: `find Test`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "--"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "image::tip.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "--"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "*Tip*"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* The search is case insensitive. e.g `test` will match `Test`."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* Both the file name and the file path are searched. Hence, you can look for files with certain types (e.g. `find .png .jpg`) or files inside certain directories (e.g. `find /Desktop`)."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all files : `list`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Lists all encrypted files managed by SecureIT."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing an encrypted file : `preview` [coming soon]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Previews an encrypted file as specified by its index number. You can only preview `.txt`, `.jpg` and `.png` files."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Format: `preview INDEX`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Example: `preview 1`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d  Note"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jityong"
        },
        "content": "Accessing note directory : `goto note`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Creating a note : `add`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Adds a note to the app."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jityong"
        },
        "content": "Format: `add ti/TITLE d/DESCRIPTION t/TAG c/CONTENT `"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jityong"
        },
        "content": "Example: `add ti/Diary d/documentation of 2020 t/Personal c/day1 documentation`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jityong"
        },
        "content": "--"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jityong"
        },
        "content": "image::warning.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jityong"
        },
        "content": "--"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jityong"
        },
        "content": "*Warning*"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jityong"
        },
        "content": "* You are not allowed to add notes with the same title."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jityong"
        },
        "content": "* Title, description and tag fields must not be empty."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d Accessing a note : `open`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jityong"
        },
        "content": "Opens the note corresponding to the index in the app."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jityong"
        },
        "content": "Format: `open INDEX`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jityong"
        },
        "content": "Example: `open 1`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "jityong"
        },
        "content": "--"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jityong"
        },
        "content": "image::tip.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jityong"
        },
        "content": "--"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jityong"
        },
        "content": "*Tip*"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jityong"
        },
        "content": "* Opens a new panel on the right that allows you to read and edit easily."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jityong"
        },
        "content": "* Click on save button after editing to save changes made to the content of the note."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a note: `delete`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Deletes a note as specified by the user."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jityong"
        },
        "content": "Example: `delete 1`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a note: `edit`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jityong"
        },
        "content": "Edits a note specified by the user."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jityong"
        },
        "content": "Format: `edit INDEX [ti/TITLE] [d/DESCRIPTION] [t/TAG c/CONTENT]`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jityong"
        },
        "content": "Example: `edit 1 ti/NewTitle d/NewDescription t/NewTag c/NewContent`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jityong"
        },
        "content": "Example: `edit 1 ti/NewTitle`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jityong"
        },
        "content": "--"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jityong"
        },
        "content": "image::warning.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jityong"
        },
        "content": "--"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jityong"
        },
        "content": "*Warning*"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jityong"
        },
        "content": "* INDEX and at least one optional field is compulsory to successfully edit the note."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jityong"
        },
        "content": "* You are not allowed to edit notes to have the same title."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Finding a note: `find`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Finds a note as specified by the user."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jityong"
        },
        "content": "Format: `find TEXT`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jityong"
        },
        "content": "Example:`find Personal_diary`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jityong"
        },
        "content": "--"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jityong"
        },
        "content": "image::tip.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jityong"
        },
        "content": "--"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jityong"
        },
        "content": "*Tip*"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jityong"
        },
        "content": "* Your input TEXT for search is case insensitive. e.g `Personal_diary` will match `personal_diary`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jityong"
        },
        "content": "* Searches title, description and content of all notes and returns those that contains the TEXT."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d Sorting notes: `sort`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jityong"
        },
        "content": "Sorts notes in ways specified by the user."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jityong"
        },
        "content": "Format: `sort by/SORTBYCONDITION`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jityong"
        },
        "content": "Example: `sort by/DateModified`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jityong"
        },
        "content": "--"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jityong"
        },
        "content": "image::warning.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jityong"
        },
        "content": "--"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jityong"
        },
        "content": "*Warning*"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jityong"
        },
        "content": "* SORTBYCONDITION must be either \"DateModified\", \"DateCreated\" and \"NumOfAccess\"."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jityong"
        },
        "content": "* SORTBYCONDITION is not case-sensitive."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d Undo notes action: `undo`"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jityong"
        },
        "content": "Undo last action on notes."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jityong"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jityong"
        },
        "content": "Example: `undo`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jityong"
        },
        "content": "--"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jityong"
        },
        "content": "image::tip.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jityong"
        },
        "content": "--"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jityong"
        },
        "content": "*Tip*"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jityong"
        },
        "content": "* You can only perform undo on undo-able commands. Undoable commands are: `add`, `edit`, `delete`, `clear` and `sort`"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jityong"
        },
        "content": "* You can undo as many commands as you wish until there are no more commands that can be undone."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d Redo notes action: `redo`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jityong"
        },
        "content": "Redo last undone action on notes."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "jityong"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "jityong"
        },
        "content": "Example: `redo`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "jityong"
        },
        "content": "--"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "jityong"
        },
        "content": "image::tip.png[width \u003d \"20\", float \u003d \"left\"]"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "jityong"
        },
        "content": "--"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "jityong"
        },
        "content": "*Tip*"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "jityong"
        },
        "content": "* You can redo as many commands as you wish until there are no more commands that can be redone."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "jityong"
        },
        "content": "* If you perform a new undo-able command, all existing redo-able commands will be cleared."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "jityong"
        },
        "content": "Clears all entries from the current book user is on. +"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "hooncp"
        },
        "content": "SecureIT data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d CheatSheet of commands"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "*Password*"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jityong"
        },
        "content": "Accessing Password directory: `goto password`"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "hooncp"
        },
        "content": "- `add d/DESCRIPTION u/USERNAME p/PASSWORD [w/WEBSITE] [t/TAG]...` : Adds a password to the app."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "hooncp"
        },
        "content": "- `read INDEX`:  Shows the username and password for the specified index provided by you."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "hooncp"
        },
        "content": "- `edit INDEX [d/DESCRIPTION] [u/USERNAME] [p/PASSWORD] [w/WEBSITE] [t/TAG]`: Edits a password as specified by you."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "hooncp"
        },
        "content": "- `copy password INDEX`: Copies the password value, website or username for the specific index"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "hooncp"
        },
        "content": "- `delete INDEX`: Deletes a password as specified by the user."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "hooncp"
        },
        "content": "- `find DESCRIPTION`: Finds a password description as specified by the user."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "eejian97"
        },
        "content": "- `generate [length/LENGTH] [lower/TRUE] [upper/TRUE] [num/TRUE] [special/TRUE]`: Generates a new random password based on user preference input and copies generated password into user clipboard."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "jityong"
        },
        "content": "- `analyse`: Analyses all passwords currently stored and produces a security summary report."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "eejian97"
        },
        "content": "- `analyse [strong/INDEX]`: Analyses in detail a specified password based on the user specified index."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "*Card*"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "jityong"
        },
        "content": "Accessing Card directory: `goto card`"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "jityong"
        },
        "content": "- `add d/DESCRIPTION c/CARDNUMBER e/EXPIRY v/CVC`: Adds a credit/debit card to the app."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jityong"
        },
        "content": "- `delete DESCRIPTION`: Deletes a card as specified by the user."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "*File*"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jityong"
        },
        "content": "Accessing File directory: `goto file`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jityong"
        },
        "content": "- `encrypt FILEPATH [t/TAG]...`: Encrypts a local file as specified by its file path."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jityong"
        },
        "content": "- `decrypt INDEX`: Decrypts a local file as specified by the displayed index number."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jityong"
        },
        "content": "- `add FILENAME [t/TAG]...`: Adds an encrypted file as specified by its file path."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jityong"
        },
        "content": "- `remove INDEX`: Removes an encrypted file record as specified by the displayed index number."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "jityong"
        },
        "content": "- `rename INDEX TARGET_FILENAME`: Renames an encrypted file as specified by its index number."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "jityong"
        },
        "content": "- `move INDEX TARGET_DIRECTORY`: Moves an encrypted file as specified by its index number."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "jityong"
        },
        "content": "- `find KEYWORDS...`: Finds matching encrypted files as specified by the search keywords."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "- `list`: Lists all encrypted files managed by SecureIT."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "*Note*"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "jityong"
        },
        "content": "Accessing Note directory: `goto note`"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "jityong"
        },
        "content": "- `open INDEX`: Opens the note corresponding to the index."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jityong"
        },
        "content": "- `delete INDEX`: Deletes a note as specified by you."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "jityong"
        },
        "content": "- `edit INDEX ti/TITLE d/DESCRIPTION t/TAG c/CONTENT`: Edits a note specified by you."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "jityong"
        },
        "content": "- `find TEXT`: Finds notes containing the text specified by the user."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "jityong"
        },
        "content": "- `sort by/SORTBYCONDITION`: Sorts notes by the condition specified by you."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "jityong"
        },
        "content": "- `undo`: Undo last action on notes."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "jityong"
        },
        "content": "- `redo`: Redo last undone action on notes."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "*Others*"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "jityong"
        },
        "content": "Other commands"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "jityong"
        },
        "content": "- `clear`: Clears all entries from the current book user is on."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "- `exit`: Exits the program."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*A*: Install the app in the other computer and copy store.tmp files from the application’s directory to the new computer."
      }
    ],
    "authorContributionMap": {
      "niqiukun": 162,
      "yhtingg": 27,
      "jityong": 150,
      "eejian97": 65,
      "hooncp": 167,
      "-": 94
    }
  },
  {
    "path": "docs/diagrams/AnalyseFunctionality/AnalyserClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Class AnalysePasswordCommand LOGIC_COLOR_T1{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "--"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "+execute() : CommandResult"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Class Password LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    Interface Analyser LOGIC_COLOR_T1 {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    ----"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    + analyse(List\u003cPassword\u003e p) : List\u003cResult\u003e r"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "together {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    Class DictionaryAnalyser LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    Class SimilarityAnalyser LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    Class SequenceAnalyser  LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    Class StrengthAnalyser  LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    Class UniqueAnalyser  LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Class \"{abstract}\\nResult\" as Result LOGIC_COLOR_T1{"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "# password : Password"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "# description : String"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "---"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "+ {abstract} getGreaterDetail : String"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "+ toString() : String"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "together {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    Class DictionaryResult LOGIC_COLOR_T1{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    - matches : List\u003cDictionaryMatch\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    Class SimilarityResult LOGIC_COLOR_T1{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    - matches : List\u003cSimilarityMatch\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    Class SequenceResult LOGIC_COLOR_T1 {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    - matches : List\u003cSequenceMatch\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    Class StrengthResult LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    Class UniqueResult LOGIC_COLOR_T1 {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    - matches : List\u003cUniqueMatch\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Class AnalysisReport LOGIC_COLOR_T1{"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "-reportBuilder : StringBuilder"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "----"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "- write(Result r): void"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "AnalysePasswordCommand .\u003e Password : retrieves"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "AnalysePasswordCommand .down.\u003e Analyser : retrieves"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Analyser \"*\" .right.\u003e \"*\" Password : analyses"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "(Analyser, Password) .. Result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "DictionaryAnalyser .up.|\u003e Analyser"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "SimilarityAnalyser .up.|\u003e Analyser"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "UniqueAnalyser .up.|\u003e Analyser"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "SequenceAnalyser .up.|\u003e Analyser"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "StrengthAnalyser .up.|\u003e Analyser"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "UniqueAnalyser -[hidden]up- SimilarityAnalyser"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "SequenceAnalyser -[hidden]up UniqueAnalyser"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "StrengthAnalyser -[hidden]up SequenceAnalyser"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "SimilarityAnalyser -[hidden]up DictionaryAnalyser"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eejian97"
        },
        "content": "AnalysisReport \"1\".down.\u003e\"*\" Result : writes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eejian97"
        },
        "content": "DictionaryResult  -up-|\u003e Result"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eejian97"
        },
        "content": "SimilarityResult -up-|\u003e Result"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eejian97"
        },
        "content": "SequenceResult  -up-|\u003e Result"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eejian97"
        },
        "content": "UniqueResult -up-|\u003e Result"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eejian97"
        },
        "content": "StrengthResult  -up-|\u003e Result"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eejian97"
        },
        "content": "SimilarityResult -[hidden]up- SequenceResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eejian97"
        },
        "content": "UniqueResult -[hidden]up- DictionaryResult"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eejian97"
        },
        "content": "StrengthResult -[hidden]up- DictionaryResult"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eejian97"
        },
        "content": "show members"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eejian97"
        },
        "content": "skinparam classFontColor #000000"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eejian97"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eejian97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "eejian97": 91
    }
  },
  {
    "path": "docs/diagrams/AnalyseFunctionality/GetAllMatchesSequence.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "participant \":DictionaryAnalyser\" as DictionaryAnalyser LOGIC_COLOR"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "participant \"d : Dictionary\" as Dictionary LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "participant \"\u003c\u003cclass\u003e\u003e\\n:LeetUtil\" as LeetUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "participant \":DictionaryMatch\" as DictionaryMatch LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "participant \":DictionaryResult\" as DictionaryResult LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "activate DictionaryAnalyser"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "activate Dictionary"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "[-\u003e DictionaryAnalyser : analyse(passwordList)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "DictionaryAnalyser -\u003e DictionaryAnalyser : getAllMatches(password)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "activate DictionaryAnalyser"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "loop hasSubsequence"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    DictionaryAnalyser -\u003e Dictionary : get(subsequence)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    opt ifExist"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        DictionaryAnalyser -\u003e DictionaryMatch"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        activate DictionaryMatch"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        DictionaryMatch --\u003e DictionaryAnalyser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        deactivate DictionaryMatch"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    end"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    DictionaryAnalyser -\u003e LeetUtil : unleet(subsequence)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    activate LeetUtil"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    LeetUtil --\u003e DictionaryAnalyser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    deactivate LeetUtil"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    DictionaryAnalyser -\u003e Dictionary : get(unleetSubsequence)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    opt ifExist"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        DictionaryAnalyser -\u003e DictionaryMatch"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        activate DictionaryMatch"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        DictionaryMatch --\u003e DictionaryAnalyser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        deactivate DictionaryMatch"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    end"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "end"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "DictionaryAnalyser --\u003e DictionaryAnalyser : matches"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "deactivate DictionaryAnalyser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "alt matches found"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    DictionaryAnalyser -\u003e DictionaryResult : DictionaryResult(password, DESC_FAIL, matches)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    activate DictionaryResult"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    DictionaryResult --\u003e DictionaryAnalyser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    deactivate DictionaryResult"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "else matches not found"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    DictionaryAnalyser -\u003e DictionaryResult : DictionaryResult(password, DESC_PASS, matches)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        activate DictionaryResult"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        DictionaryResult --\u003e DictionaryAnalyser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        deactivate DictionaryResult"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "end"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "deactivate Dictionary"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "[\u003c-- DictionaryAnalyser : results"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "deactivate DictionaryAnalyser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "eejian97": 55
    }
  },
  {
    "path": "docs/diagrams/AnalysePasswordSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "participant \":PasswordBookParser\" as PasswordBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "participant \":AnalyseCommand\" as AnalyseCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "participant \":DictionaryAnalyser\" as DictionaryAnalyser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "participant \"dictionary: Dictionary\" as Dictionary LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "participant \":DictionaryMatch\" as DictionaryMatch LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "participant \":DictionaryResult\" as DictionaryResult LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[-\u003e LogicManager : execute(analyse)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "LogicManager -\u003e PasswordBookParser : parseCommand(analyse)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "activate PasswordBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "create AnalyseCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "PasswordBookParser -\u003e AnalyseCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "activate AnalyseCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "AnalyseCommand --\u003e PasswordBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "deactivate AnalyseCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "PasswordBookParser --\u003e LogicManager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "deactivate PasswordBookParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "LogicManager -\u003e AnalyseCommand : execute()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "activate AnalyseCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "AnalyseCommand -\u003e AnalyseCommand : getRequiredAnalysers()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "activate AnalyseCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "create Dictionary"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "AnalyseCommand -\u003e Dictionary"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "activate Dictionary"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Dictionary --\u003e AnalyseCommand : dictionary"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "deactivate Dictionary"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "create DictionaryAnalyser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "AnalyseCommand -\u003e DictionaryAnalyser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "activate DictionaryAnalyser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "DictionaryAnalyser --\u003e AnalyseCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "deactivate DictionaryAnalyser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "deactivate AnalyseCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "loop hasAnalyser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    AnalyseCommand -\u003e DictionaryAnalyser : analyse(passwordList)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    activate DictionaryAnalyser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        loop hasPassword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "           DictionaryAnalyser -\u003e DictionaryAnalyser : getAllMatches(password)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "           activate DictionaryAnalyser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "           DictionaryAnalyser -\u003e Dictionary : getDictionary()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "           activate Dictionary"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "           Dictionary --\u003e DictionaryAnalyser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "           deactivate Dictionary"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "           create DictionaryMatch"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "           DictionaryAnalyser -\u003e DictionaryMatch"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "           activate DictionaryMatch"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "           DictionaryMatch --\u003e DictionaryAnalyser"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "           deactivate DictionaryMatch"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            deactivate DictionaryAnalyser"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            create DictionaryResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            DictionaryAnalyser -\u003e DictionaryResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            activate DictionaryResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            DictionaryResult --\u003e DictionaryAnalyser"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            deactivate DictionaryResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                DictionaryAnalyser --\u003e AnalyseCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            deactivate DictionaryAnalyser"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        end"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    end"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    AnalyseCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    deactivate AnalyseCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hooncp"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hooncp"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "hooncp": 85
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Participant \":JsonUtil\" as jsonUtil UTIL_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePassword(password)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : savePasswordBook(passwordBook)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "storage -[STORAGE_COLOR]\u003e jsonUtil : saveEncryptedJsonFile(passwordBook)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "activate jsonUtil UTIL_COLOR"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "jsonUtil -[UTIL_COLOR]\u003e storage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "deactivate jsonUtil"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 8,
      "-": 32
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager  \" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser  \" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "participant \":DeleteNoteCommandParser    \" as DeleteNoteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "participant \"d:DeleteNoteCommand   \" as DeleteNoteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult  \" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "create DeleteNoteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "AddressBookParser -\u003e DeleteNoteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "activate DeleteNoteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "DeleteNoteCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "deactivate DeleteNoteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "AddressBookParser -\u003e DeleteNoteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "activate DeleteNoteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "create DeleteNoteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "DeleteNoteCommandParser -\u003e DeleteNoteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "activate DeleteNoteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "DeleteNoteCommand --\u003e DeleteNoteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "deactivate DeleteNoteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "DeleteNoteCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "deactivate DeleteNoteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "DeleteNoteCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "destroy DeleteNoteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "LogicManager -\u003e DeleteNoteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "activate DeleteNoteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "DeleteNoteCommand -\u003e Model : deleteNote(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Model --\u003e DeleteNoteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "DeleteNoteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "CommandResult --\u003e DeleteNoteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "DeleteNoteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "deactivate DeleteNoteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 26,
      "-": 43
    }
  },
  {
    "path": "docs/diagrams/EncryptionUtilSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "participant \":EncryptionUtil\" as EncryptionUtil LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "[--\u003e EncryptionUtil : encryptBytes(input, pwd)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "activate EncryptionUtil"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "EncryptionUtil -\u003e EncryptionUtil : cipherBytes(input, pwd, mode.ENCRYPT)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "activate EncryptionUtil"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "create \"keySpec:PBEKeySpec\" as PBEKeySpec LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "EncryptionUtil -\u003e PBEKeySpec : PBEKeySpec(pwd)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "activate PBEKeySpec"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "PBEKeySpec --\u003e EncryptionUtil : keySpec"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "deactivate PBEKeySpec"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "create \"keyFactory:SecretKeyFactory\" as SecretKeyFactory LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "EncryptionUtil -\u003e SecretKeyFactory : getInstance(\"PBEWithMD5AndTripleDES\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "activate SecretKeyFactory"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "SecretKeyFactory --\u003e EncryptionUtil : keyFactory"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "deactivate SecretKeyFactory"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "EncryptionUtil -\u003e SecretKeyFactory : generateSecret(keySpec)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "activate SecretKeyFactory"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "create \"key:SecretKey\" as SecretKey LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "SecretKeyFactory -\u003e SecretKey"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "activate SecretKey"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "SecretKey --\u003e SecretKeyFactory : key"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "deactivate SecretKey"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "SecretKeyFactory --\u003e EncryptionUtil : key"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "deactivate SecretKeyFactory"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "SecretKeyFactory -[hidden]-\u003e EncryptionUtil"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "destroy SecretKeyFactory"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "destroy PBEKeySpec"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "create \"paramSpec:PBEParameterSpec\" as PBEParameterSpec LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "EncryptionUtil -\u003e PBEParameterSpec : PBEParameterSpec(SALT, ITERATION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "activate PBEParameterSpec"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "PBEParameterSpec --\u003e EncryptionUtil : paramSpec"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "deactivate PBEParameterSpec"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "create \"cipher:Cipher\" as Cipher LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "EncryptionUtil -\u003e Cipher : getInstance(\"PBEWithMD5AndTripleDES\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "activate Cipher"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Cipher --\u003e EncryptionUtil : cipher"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "deactivate Cipher"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "EncryptionUtil -\u003e Cipher : init(ENCRYPT_MODE, key, paramSpec)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "activate Cipher"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Cipher --\u003e EncryptionUtil"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "deactivate Cipher"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "EncryptionUtil -\u003e Cipher : doFinal(input)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "activate Cipher"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Cipher --\u003e EncryptionUtil : output"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "deactivate Cipher"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Cipher -[hidden]-\u003e EncryptionUtil"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "destroy Cipher"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "destroy PBEParameterSpec"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "destroy SecretKey"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "EncryptionUtil --\u003e EncryptionUtil : output"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "deactivate EncryptionUtil"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "[\u003c-- EncryptionUtil : output"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "deactivate EncryptionUtil"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 80
    }
  },
  {
    "path": "docs/diagrams/InitPasswordSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "participant \":MainApp\" as MainApp MODEL_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "box Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "participant \":TestStorage\" as TestStorage STORAGE_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "participant \":Storage\" as Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "participant \":DialogManager\" as DialogManager UI_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "participant \":Ui\" as Ui UI_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "participant \":Logic\" as Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "end box"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "[-\u003e MainApp : start(primaryStage)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "activate MainApp"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "MainApp -\u003e TestStorage : isUserExist()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "activate TestStorage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "TestStorage --\u003e MainApp : userExists"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "deactivate TestStorage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "alt user does not exist"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    MainApp -\u003e DialogManager : showCreatePasswordDialog()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    activate DialogManager"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    DialogManager --\u003e MainApp : password"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    deactivate DialogManager"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    MainApp -\u003e TestStorage : initPassword(password)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    activate TestStorage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    deactivate TestStorage"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "else user exists"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    loop password is incorrect"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        MainApp -\u003e DialogManager : showValidatePasswordDialog()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        activate DialogManager"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        DialogManager --\u003e MainApp : password"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        deactivate DialogManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        MainApp -\u003e TestStorage : testPassword(password)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        activate TestStorage"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        TestStorage --\u003e MainApp : isCorrect"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        deactivate TestStorage"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "end"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "MainApp -\u003e MainApp : initWithPassword(password)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "activate MainApp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "create Storage"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "MainApp -\u003e Storage"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "create Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "MainApp -\u003e Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "create Logic"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "MainApp -\u003e Logic"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "create Ui"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "MainApp -\u003e Ui"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "deactivate MainApp"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "MainApp -\u003e MainApp : startSecureIt(primaryStage)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "activate MainApp"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "MainApp -\u003e Ui : start(primaryStage)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "activate Ui"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 84
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Class ABCBookParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "LogicManager --\u003e\"1\" ABCBookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "note left of ABCBookParser: ABCBookParser \u003d PasswordBookParser,    \\nFileBookParser, etc"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "ABCBookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 4,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class CardBook"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class FileBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class PasswordBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class NoteBook"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class ReadOnlyCardBook"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class ReadOnlyFileBook"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class ReadOnlyNoteBook"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class ReadOnlyPasswordBook"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "Package Note {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class Note"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class Title"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class NoteDescription"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class Content"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class UniqueNoteList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "Package Card {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class Card"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class CardNumber"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class CardDescription"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class Cvc"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class UniqueCardList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "Package File {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class File"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class EncryptedAt"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class EncryptedFile"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class FileName"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class FilePath"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class UniqueFileList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "Package Password {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class Password"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class PasswordValue"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class PasswordDescription"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class Username"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class UniquePasswordList"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jityong"
        },
        "content": "CardBook .right.|\u003e ReadOnlyCardBook"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jityong"
        },
        "content": "FileBook .right.|\u003e ReadOnlyFileBook"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jityong"
        },
        "content": "NoteBook .right.|\u003e ReadOnlyNoteBook"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jityong"
        },
        "content": "PasswordBook .right.|\u003e ReadOnlyPasswordBook"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": "ModelManager o-down-\u003e \"1\" NoteBook"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jityong"
        },
        "content": "ModelManager o-down-\u003e \"1\" CardBook"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jityong"
        },
        "content": "ModelManager o-down-\u003e \"1\" FileBook"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jityong"
        },
        "content": "ModelManager o-down-\u003e \"1\" PasswordBook"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jityong"
        },
        "content": "CardBook *--\u003e \"1\" UniqueCardList"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jityong"
        },
        "content": "UniqueCardList o--\u003e \"*\" Card"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jityong"
        },
        "content": "Card *--\u003e CardDescription"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jityong"
        },
        "content": "Card *--\u003e CardNumber"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jityong"
        },
        "content": "Card *--\u003e Cvc"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jityong"
        },
        "content": "Card *-down-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jityong"
        },
        "content": "PasswordBook *--\u003e \"1\" UniquePasswordList"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jityong"
        },
        "content": "UniquePasswordList o--\u003e \"*\" Password"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jityong"
        },
        "content": "Password *--\u003e PasswordDescription"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jityong"
        },
        "content": "Password *--\u003e PasswordValue"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jityong"
        },
        "content": "Password *--\u003e Username"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jityong"
        },
        "content": "Password *-down-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jityong"
        },
        "content": "FileBook *--\u003e \"1\" UniqueFileList"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jityong"
        },
        "content": "UniqueFileList o--\u003e \"*\" File"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jityong"
        },
        "content": "File *--\u003e EncryptedFile"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jityong"
        },
        "content": "File *--\u003e EncryptedAt"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jityong"
        },
        "content": "File *--\u003e FileName"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jityong"
        },
        "content": "File *--\u003e FilePath"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jityong"
        },
        "content": "File *-down-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jityong"
        },
        "content": "NoteBook *--\u003e \"1\" UniqueNoteList"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jityong"
        },
        "content": "UniqueNoteList o--\u003e \"*\" Note"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jityong"
        },
        "content": "Note *--\u003e NoteDescription"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jityong"
        },
        "content": "Note *--\u003e Title"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jityong"
        },
        "content": "Note *--\u003e Content"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jityong"
        },
        "content": "Note *-down-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jityong"
        },
        "content": "ModelManager -[hidden]down- PasswordBook"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jityong"
        },
        "content": "ModelManager -[hidden]down- NoteBook"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jityong"
        },
        "content": "ModelManager -[hidden]down- FileBook"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jityong"
        },
        "content": "ModelManager -[hidden]down- CardBook"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jityong"
        },
        "content": "EncryptedAt-[hidden]down- Tag"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jityong"
        },
        "content": "EncryptedFile -[hidden]up- File"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jityong"
        },
        "content": "ModelManager --\u003e\"1\" Note : filtered list"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jityong"
        },
        "content": "ModelManager --\u003e\"1\" Password : filtered list"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jityong"
        },
        "content": "ModelManager --\u003e\"1\" File : filtered list"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jityong"
        },
        "content": "ModelManager --\u003e\"1\" Card : filtered list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jityong": 97,
      "-": 33
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Interface PasswordBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Interface FileBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Interface NoteBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Interface CardBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "Class TestStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "StorageManager o--\u003e PasswordBookStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "StorageManager o--\u003e FileBookStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "StorageManager o--\u003e NoteBookStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "StorageManager o--\u003e CardBookStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "JsonPasswordBookStorage .up.|\u003e PasswordBookStorage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "JsonFileBookStorage .up.|\u003e FileBookStorage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "JsonNoteBookStorage .up.|\u003e NoteBookStorage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "JsonCardBookStorage .up.|\u003e CardBookStorage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "JsonPasswordBookStorage .down.\u003e JsonSerializablePasswordBook"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "JsonFileBookStorage .down.\u003e JsonSerializableFileBook"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "JsonNoteBookStorage .down.\u003e JsonSerializableNoteBook"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "JsonCardBookStorage .down.\u003e JsonSerializableCardBook"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "JsonSerializablePasswordBook .down.\u003e JsonAdaptedPassword"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "JsonSerializableFileBook .down.\u003e JsonAdaptedFile"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "JsonSerializableNoteBook .down.\u003e JsonAdaptedNote"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "JsonSerializableCardBook .down.\u003e JsonAdaptedCard"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "JsonAdaptedPassword .down.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "JsonAdaptedFile .down.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "JsonAdaptedNote .down.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "JsonAdaptedCard .down.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 25,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class XYZListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class XYZCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "Class EditObjectWindow"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "MainWindow *-down-\u003e XYZListPanel"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "MainWindow *-down-\u003e EditObjectWindow"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "XYZListPanel -down-\u003e XYZCard"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "XYZListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "XYZCard --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "XYZCard ..\u003e Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "EditObjectWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "XYZListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jityong": 11,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "!define UTIL_COLOR #123456"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 2,
      "-": 75
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Changes the remark of an existing note in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the note identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"by the index number used in the last note listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param index of the note in the filtered note list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param remark of the note to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jityong"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the note\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jityong"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a note."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jityong"
        },
        "content": "Create a new `Remark` in `seedu.address.model.note`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jityong"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each note."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jityong"
        },
        "content": "public PersonCard(Person note, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jityong"
        },
        "content": "    remark.setText(note.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Person editedNote \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jityong"
        },
        "content": "        model.setPerson(personToEdit, editedNote);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedNote));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "jityong": 14,
      "-": 411
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.note.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jityong"
        },
        "content": "  \"notes\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "jityong": 2,
      "-": 115
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "`seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jityong"
        },
        "content": "    Person editedNote \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jityong"
        },
        "content": "    if (!personToEdit.isSamePerson(editedNote) \u0026\u0026 model.hasPerson(editedNote)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jityong"
        },
        "content": "    model.setPerson(personToEdit, editedNote);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jityong"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedNote));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jityong"
        },
        "content": "    notes.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "jityong": 5,
      "-": 253
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.CardBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.FileBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.PasswordBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.ReadOnlyCardBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.ReadOnlyNoteBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.ReadOnlyPasswordBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.VersionedNoteBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.util.SampleDataCardUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.util.SampleDataNotesUtil;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.util.SampleDataPasswordUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.storage.CardBookStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.storage.FileBookStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.storage.JsonCardBookStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.storage.JsonFileBookStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.storage.JsonNoteBookStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.storage.JsonPasswordBookStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.storage.NoteBookStorage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.storage.PasswordBookStorage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.storage.TestStorage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.ui.DialogManager;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Initialises SecureIT app with the given password."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the master password used to encrypt data."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private void initWithPassword(String password) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing SecureIT ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath(), password);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath(), password);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                new JsonAddressBookStorage(userPrefs.getAddressBookFilePath(), password);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FileBookStorage fileBookStorage \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                new JsonFileBookStorage(userPrefs.getFileBookFilePath(), password);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        CardBookStorage cardBookStorage \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                new JsonCardBookStorage(userPrefs.getCardBookFilePath(), password);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        NoteBookStorage noteBookStorage \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                new JsonNoteBookStorage(userPrefs.getNoteBookFilePath(), password);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        PasswordBookStorage passwordBookStorage \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new JsonPasswordBookStorage(userPrefs.getPasswordBookFilePath(), password);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jityong"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, fileBookStorage, cardBookStorage, noteBookStorage,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                passwordBookStorage, userPrefsStorage, password);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jityong"
        },
        "content": "        ReadOnlyAddressBook initialAddressData;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jityong"
        },
        "content": "            initialAddressData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jityong"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty file\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jityong"
        },
        "content": "            initialAddressData \u003d new AddressBook();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jityong"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty file\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jityong"
        },
        "content": "            initialAddressData \u003d new AddressBook();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        ReadOnlyFileBook initialDataFile \u003d initFileBook(storage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        ReadOnlyCardBook initialCardData \u003d initCardBook(storage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jityong"
        },
        "content": "        ReadOnlyNoteBook initialNoteData \u003d initNoteBook(storage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        ReadOnlyPasswordBook initialDataPassword \u003d initPasswordBook(storage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return new ModelManager(initialAddressData, initialDataFile, initialCardData, initialNoteData,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                initialDataPassword, userPrefs);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns data from {@code storage}\u0027s file book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private ReadOnlyFileBook initFileBook(Storage storage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Optional\u003cReadOnlyFileBook\u003e fileBookOptional;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        ReadOnlyFileBook initialFileData;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            fileBookOptional \u003d storage.readFileBook();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            if (!fileBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with an empty FileBook\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            initialFileData \u003d fileBookOptional.orElseGet(FileBook::new);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty FileBook\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            initialFileData \u003d new FileBook();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FileBook\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            initialFileData \u003d new FileBook();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return initialFileData;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Initializes a ReadOnlyNoteBook."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param storage storage object used for application."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @return ReadOnlyNoteBook from storage object if present, else a new ReadOnlyNoteBook."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private ReadOnlyNoteBook initNoteBook(Storage storage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Optional\u003cReadOnlyNoteBook\u003e noteBookOptional;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jityong"
        },
        "content": "        ReadOnlyNoteBook initialNoteData;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jityong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jityong"
        },
        "content": "            noteBookOptional \u003d storage.readNoteBook();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jityong"
        },
        "content": "            if (!noteBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jityong"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jityong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jityong"
        },
        "content": "            initialNoteData \u003d noteBookOptional.orElseGet(SampleDataNotesUtil::getSampleNoteBook);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jityong"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jityong"
        },
        "content": "            logger.warning(e + \"\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jityong"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty file\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jityong"
        },
        "content": "            initialNoteData \u003d new VersionedNoteBook();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jityong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jityong"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty file\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jityong"
        },
        "content": "            initialNoteData \u003d new VersionedNoteBook();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return initialNoteData;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns a {@code Card} with the data from {@code storage}\u0027s card book. \u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * The data from the sample card book will be used instead if {@code storage}\u0027s card book is not found,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * or an empty card book will be used instead if errors occur when reading {@code storage}\u0027s card book."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private ReadOnlyCardBook initCardBook(Storage storage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        Optional\u003cReadOnlyCardBook\u003e cardBookOptional;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        ReadOnlyCardBook initialCardData;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            cardBookOptional \u003d storage.readCardBook();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            if (!cardBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample CardBook\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            initialCardData \u003d cardBookOptional.orElseGet(SampleDataCardUtil::getSampleCardBook);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty CardBook\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            initialCardData \u003d new CardBook();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CardBook\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            initialCardData \u003d new CardBook();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return initialCardData;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns a {@code Password} with the data from {@code storage}\u0027s password book. \u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * The data from the sample password book will be used instead if {@code storage}\u0027s password book is not found,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * or an empty password book will be used instead if errors occur when reading {@code storage}\u0027s password book."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private ReadOnlyPasswordBook initPasswordBook(Storage storage) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Optional\u003cReadOnlyPasswordBook\u003e passwordBookOptional;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        ReadOnlyPasswordBook initialDataPassword \u003d SampleDataPasswordUtil.getSamplePasswordBook();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            passwordBookOptional \u003d storage.readPasswordBook();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            if (!passwordBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample PasswordBook\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            initialDataPassword \u003d passwordBookOptional.orElseGet(SampleDataPasswordUtil::getSamplePasswordBook);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty PasswordBook\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            initialDataPassword \u003d new PasswordBook();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PasswordBook\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            initialDataPassword \u003d new PasswordBook();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return initialDataPassword;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Starts the log."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    protected Config initConfig(Path configFilePath, String password) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readEncryptedConfig(configFilePathUsed, password);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed, password);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!TestStorage.isUserExist()) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            showDialog("
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                DialogManager::showCreatePasswordDialog,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                result -\u003e !\"\".equals(result),"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                result -\u003e {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        TestStorage.initPassword(result);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        initWithPassword(result);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        startSecureIt(primaryStage);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    } catch (IOException e) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        //TODO: if init password fails"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            );"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            showDialog("
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                DialogManager::showValidatePasswordDialog,"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                password -\u003e {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        return TestStorage.testPassword(password);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    } catch (IOException e) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        //TODO: if test password fails"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                },"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                result -\u003e {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    initWithPassword(result);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    startSecureIt(primaryStage);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            );"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Display a dialog specified by the method supplied. After the dialog is dismissed, it"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * validates the result based on the validation given, and redisplay the dialog if the"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * validation fails. Otherwise, the callback is executed based on the result."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param method specifies which dialog to be displayed."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param validation validates the result from the dialog."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param callback executes after validation succeeded."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private void showDialog(Function\u003cBoolean, Optional\u003cString\u003e\u003e method,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                           Predicate\u003cString\u003e validation,"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                           Consumer\u003cString\u003e callback) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        boolean validationFailed \u003d false;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Optional\u003cString\u003e result \u003d method.apply(validationFailed);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            if (result.isEmpty()) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            if (validation.test(result.get())) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                callback.accept(result.get());"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            validationFailed \u003d true;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Starts the main app."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param primaryStage the primary stage of ui"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private void startSecureIt(Stage primaryStage) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        logger.info(\"Starting SecureIT \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (storage !\u003d null) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 110,
      "yhtingg": 35,
      "jityong": 40,
      "eejian97": 3,
      "hooncp": 41,
      "-": 166
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Dictionary.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.exceptions.DictionaryException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents dictionary object with name and dictionary look up."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class Dictionary {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private final Map\u003cString, Integer\u003e dictionary;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Creates dictionary object with specific name and dictionary."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param name name of dictionary object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param dictionary the hashmap of dictionary word to ranking"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public Dictionary(String name, Map\u003cString, Integer\u003e dictionary) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.dictionary \u003d dictionary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Builds the required dictionary based on the specified dictionary name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param name the name of the required dictionary"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the dictionary object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static Dictionary build(String name) throws DictionaryException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            switch (name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            case \"passwords.txt\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                return new Dictionary(name, load(\"/dictionaries/passwords.txt\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                throw new DictionaryException(\"Requested dictionary not found\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (DictionaryException de) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new DictionaryException(de.getMessage(), de);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Loads the content of the file from the path into the dictionary."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param path the path of the file with dictionary words"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the hashmap of dictionary word to ranking"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static Map\u003cString, Integer\u003e load(String path) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        //File initialFile \u003d new File(path);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        Map\u003cString, Integer\u003e dictionary \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try (InputStream is \u003d Dictionary.class.getResourceAsStream(path);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "             BufferedReader br \u003d new BufferedReader(new InputStreamReader(is, \"UTF-8\"))) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                dictionary.put(line, i++);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            System.out.println(\"Error while reading \" + path);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return dictionary;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Gets the hashmap of dictionary word to ranking."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the dictionary"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public Map\u003cString, Integer\u003e getDictionary() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return this.dictionary;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_DISPLAYED_INDEX \u003d \"The file index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String MESSAGE_INVALID_CARD_DISPLAYED \u003d \"The card provided is invalid. Note that \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    + \"description is case sensitive!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String MESSAGE_INVALID_CARD_DISPLAYED_INDEX \u003d \"The card index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String MESSAGE_INVALID_CVC_DISPLAYED \u003d \"The CVC provided is incorrect\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_FILES_LISTED_OVERVIEW \u003d \"%1$d files listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_INVALID_NOTE_DISPLAYED_INDEX \u003d \"The note index provided is invalid\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_NOTES_LISTED_OVERVIEW \u003d \"%1$d notes listed!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FIELDS \u003d \"Duplicate fields detected.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_TOO_MANY_TAG_FIELDS \u003d \"Limit of the number of tags is 5\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String MESSAGE_EXCESS_CARD_FIELDS \u003d \"Too many fields provided! Please provide either \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    + \"index or description only\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_PASSWORD_LISTED_OVERVIEW \u003d \"%1$d password listed!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_INVALID_PASSWORD_DISPLAYED_INDEX \u003d \"The password index provided is invalid\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 2,
      "yhtingg": 6,
      "jityong": 2,
      "hooncp": 4,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Mode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * The mode of SecureIT."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public enum Mode {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    HOME,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    PASSWORD,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    FILE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    NOTE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    CARD,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    ADDRESS"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 2,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/DictionaryException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Signals that there are erorrs during dictionary construction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class DictionaryException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public DictionaryException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public DictionaryException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/TargetFileExistException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Signals that the target file already exists during encryption."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class TargetFileExistException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public TargetFileExistException(String targetFileName) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        super(targetFileName);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/ClipboardUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.awt.Toolkit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.awt.datatransfer.Clipboard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.awt.datatransfer.ClipboardOwner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.awt.datatransfer.StringSelection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.awt.datatransfer.Transferable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * A class for handling user clipboard."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class ClipboardUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Copies generated password to user clipboard"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param textToCopy the password to copy"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param user the user local"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static void copyToClipboard(String textToCopy, ClipboardOwner user) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        //Create \u0026 get the clipboard from the computer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        Clipboard clipboard \u003d Toolkit.getDefaultToolkit().getSystemClipboard();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        //Make the text selected"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        Transferable selectedText \u003d new StringSelection(textToCopy);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        //Copy \u0026 Write the selected text to the user\u0027s clipboard"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        clipboard.setContents(selectedText, user);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static Optional\u003cConfig\u003e readEncryptedConfig(Path configFilePath, String password)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return JsonUtil.readEncryptedJsonFile(configFilePath, Config.class, password);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath, String password) throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        JsonUtil.saveEncryptedJsonFile(config, configFilePath, password);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 7,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/EncryptionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.StandardOpenOption;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javax.crypto.Cipher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javax.crypto.SecretKey;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javax.crypto.SecretKeyFactory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javax.crypto.spec.PBEKeySpec;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javax.crypto.spec.PBEParameterSpec;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.exceptions.TargetFileExistException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * A class for handling encryption and decryption."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class EncryptionUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * An enumeration to represent encryption mode and decryption mode."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private enum EncryptionMode {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        ENCRYPT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        DECRYPT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final byte[] SALT \u003d {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        (byte) 0x43, (byte) 0x76, (byte) 0x95, (byte) 0xc7,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        (byte) 0x5b, (byte) 0xd7, (byte) 0x45, (byte) 0x17"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final int ITERATION \u003d 68;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String SIGNATURE \u003d \"[LOCKED]\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Encrypts or decrypts a byte array using a given password."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param input the byte array to be encrypted or decrypted."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the password used for encryption or decryption."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param mode whether to encrypt or decrypt the byte array."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the encrypted or decrypted byte array."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static byte[] cipherBytes(byte[] input, String password, EncryptionMode mode)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throws GeneralSecurityException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        PBEKeySpec keySpec \u003d new PBEKeySpec(password.toCharArray());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        SecretKeyFactory keyFactory \u003d SecretKeyFactory.getInstance(\"PBEWithMD5AndTripleDES\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        SecretKey key \u003d keyFactory.generateSecret(keySpec);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        PBEParameterSpec pbeParameterSpec \u003d new PBEParameterSpec(SALT, ITERATION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Cipher cipher \u003d Cipher.getInstance(\"PBEWithMD5AndTripleDES\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case ENCRYPT:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            cipher.init(Cipher.ENCRYPT_MODE, key, pbeParameterSpec);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case DECRYPT:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            cipher.init(Cipher.DECRYPT_MODE, key, pbeParameterSpec);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return cipher.doFinal(input);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Encrypts a byte array using a given password."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param input the byte array to be encrypted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the password used for encryption."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the encrypted byte array."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static byte[] encryptBytes(byte[] input, String password) throws GeneralSecurityException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return cipherBytes(input, password, EncryptionMode.ENCRYPT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Decrypts a byte array using a given password."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param input the byte array to be decrypted."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the password used for encryption."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the decrypted byte array."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static byte[] decryptBytes(byte[] input, String password) throws GeneralSecurityException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return cipherBytes(input, password, EncryptionMode.DECRYPT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Encrypts a string into byte array using a given password."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param input the string to be encrypted."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the password used for encryption."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the encrypted byte array."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static byte[] encryptBytesFromString(String input, String password) throws GeneralSecurityException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return encryptBytes(input.getBytes(), password);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Decrypts a byte array into string using a given password."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param input the byte array to be decrypted."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the password used for decryption."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the decrypted string."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static String decryptBytesToString(byte[] input, String password) throws GeneralSecurityException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new String(decryptBytes(input, password));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Decrypts a file to a byte array."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param filepath the file path of the file to be decrypted."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the password used for decryption."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the decrypted byte array."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static byte[] decryptFileToBytes(String filepath, String password)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throws IOException, GeneralSecurityException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Path oldPath \u003d Paths.get(filepath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        byte[] fileData \u003d new byte[(int) Files.size(oldPath) - SIGNATURE.length()];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        InputStream inStream \u003d new FileInputStream(new File(filepath));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        inStream.skip(SIGNATURE.length());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        inStream.read(fileData, 0, fileData.length);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        inStream.close();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return decryptBytes(fileData, password);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Encrypts a file using the given file paths and password."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param source the path of the original file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param target the path of the encrypted file."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the password used for decryption."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IOException if the encryption fails."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static void encryptFile(String source, String target, String password)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throws IOException, TargetFileExistException, GeneralSecurityException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Path newPath \u003d Paths.get(target);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (Files.exists(newPath)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new TargetFileExistException(target);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Path oldPath \u003d Paths.get(source);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        byte[] fileData \u003d Files.readAllBytes(oldPath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        byte[] processedData \u003d encryptBytes(fileData, password);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Files.write(newPath, SIGNATURE.getBytes());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Files.write(newPath, processedData, StandardOpenOption.APPEND);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Files.deleteIfExists(oldPath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            // If deletion of original file fails, delete the encrypted file to prevent duplication."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(newPath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Decrypts a file using the given file paths and password."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param source the path of the original file."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param target the path of the decrypted file."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the password used for decryption."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IOException if the decryption fails."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static void decryptFile(String source, String target, String password)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throws IOException, TargetFileExistException, GeneralSecurityException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Path newPath \u003d Paths.get(target);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (Files.exists(newPath)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new TargetFileExistException(target);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        byte[] processedData \u003d decryptFileToBytes(source, password);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Files.write(newPath, processedData);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Path oldPath \u003d Paths.get(source);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Files.deleteIfExists(oldPath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(newPath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns true if the file is an encrypted file."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static boolean isFileEncrypted(String path) throws IOException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        byte[] fileSignature \u003d new byte[SIGNATURE.length()];"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        InputStream inStream \u003d new FileInputStream(new File(path));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        int signLength \u003d inStream.read(fileSignature, 0, SIGNATURE.length());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        inStream.close();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (signLength !\u003d SIGNATURE.length()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return Arrays.equals(SIGNATURE.getBytes(), fileSignature);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 178,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Read data as string from an encrypted file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param file the file to be decrypted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password used to decrypt the file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the decrypted string."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IOException if the file cannot be decrypted using the password."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static String readFromEncryptedFile (Path file, String password) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new String(EncryptionUtil.decryptBytes(Files.readAllBytes(file), password), CHARSET);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new IOException(\"Read encrypted file failed.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Write data as string to an encrypted file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param file the file to be written."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password used to encrypt the string."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IOException if the file cannot be encrypted using the password."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static void writeToEncryptedFile (Path file, String content, String password) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jityong"
        },
        "content": "            Files.write(file, EncryptionUtil.encryptBytes(content.getBytes(CHARSET), password));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new IOException(\"Write encrypted file failed.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 23,
      "jityong": 8,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/GeneratorUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.security.SecureRandom;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * A class for generating random passwords."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class GeneratorUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_LENGTH \u003d \"Length of password should be positive \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            + \"and at least of length 4.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_BOOLEAN \u003d \"Please input \\\"true\\\" or \\\"false\\\" \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            + \"when customizing password generation configuration.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static String[] lowAlpha \u003d new String[] {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static String[] highAlpha \u003d new String[] {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static String[] specialChars \u003d new String[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        \"~\", \"`\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"\u0026\", \"*\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        \"(\", \")\", \"-\", \"_\", \"+\", \"\u003d\", \"[\", \"{\", \"]\", \"}\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        \"|\", \"\\\\\", \"\u0027\", \"\\\"\", \";\", \":\", \"?\", \"/\", \".\", \"\u003e\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        \"\u003c\", \",\"};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static String[] numbers \u003d new String[] {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Generates random password value based on user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return a random password value string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static String generateRandomPassword(int length, boolean lower,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                                                boolean upper, boolean num, boolean special) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cString[]\u003e characterSet \u003d setCharacterSet(lower, upper, special, num);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        SecureRandom randomNumGen \u003d new SecureRandom();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StringBuilder password \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        //generate random character from characterSet for 8 times."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (int k \u003d 0; k \u003c length; k++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            int ranArrayChooser \u003d randomNumGen.nextInt(characterSet.size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            int randomLetterIndex \u003d randomNumGen.nextInt(characterSet.get(ranArrayChooser).length - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            password.append(characterSet.get(ranArrayChooser)[randomLetterIndex]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return password.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static ArrayList\u003cString[]\u003e setCharacterSet(boolean lower,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                                                       boolean upper, boolean special, boolean num) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cString[]\u003e characterSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (lower) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            characterSet.add(lowAlpha);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (upper) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            characterSet.add(highAlpha);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (special) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            characterSet.add(specialChars);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (num) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            characterSet.add(numbers);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return characterSet;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    static \u003cT\u003e void serializeObjectToEncryptedJsonFile(Path jsonFile, T objectToSerialize, String password)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "        FileUtil.writeToEncryptedFile(jsonFile, toJsonString(objectToSerialize), password);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromEncryptedJsonFile(Path jsonFile,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                                                        Class\u003cT\u003e classOfObjectToDeserialize,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                                                        String password)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return fromJsonString(FileUtil.readFromEncryptedFile(jsonFile, password), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns the Json object from the given encrypted file or {@code Optional.empty()} object if the file is not"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * found. If any values are missing from the file, default values will be used, as long as the file is a valid"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * json file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password used to decrypt the Json file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readEncryptedJsonFile("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize, String password) throws DataConversionException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            jsonFile \u003d deserializeObjectFromEncryptedJsonFile(filePath, classOfObjectToDeserialize, password);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Encrypts and saves the Json object to the specified file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password used to encrypt the file"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static \u003cT\u003e void saveEncryptedJsonFile(T jsonFile, Path filePath, String password) throws IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        serializeObjectToEncryptedJsonFile(filePath, jsonFile, password);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 51,
      "jityong": 2,
      "-": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/LeetUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * A class for converting a leet password into list of unleet possibilities."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class LeetUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static Map\u003cCharacter, Character[]\u003e defaultLeetTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u00274\u0027, new Character[]{\u0027a\u0027});"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u0027@\u0027, new Character[]{\u0027a\u0027});"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u00278\u0027, new Character[]{\u0027b\u0027});"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u0027(\u0027, new Character[]{\u0027c\u0027});"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u0027{\u0027, new Character[]{\u0027c\u0027});"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u0027[\u0027, new Character[]{\u0027c\u0027});"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u0027\u003c\u0027, new Character[]{\u0027c\u0027});"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u00273\u0027, new Character[]{\u0027e\u0027});"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u00279\u0027, new Character[]{\u0027g\u0027});"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u00276\u0027, new Character[]{\u0027g\u0027});"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u0027\u0026\u0027, new Character[]{\u0027g\u0027});"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u0027#\u0027, new Character[]{\u0027h\u0027});"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u0027!\u0027, new Character[]{\u0027i\u0027, \u0027l\u0027});"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u00271\u0027, new Character[]{\u0027i\u0027, \u0027l\u0027});"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u0027|\u0027, new Character[]{\u0027i\u0027, \u0027l\u0027});"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u00270\u0027, new Character[]{\u0027o\u0027});"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u0027$\u0027, new Character[]{\u0027s\u0027});"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u00275\u0027, new Character[]{\u0027s\u0027});"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u0027+\u0027, new Character[]{\u0027t\u0027});"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u00277\u0027, new Character[]{\u0027t\u0027, \u0027l\u0027});"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u0027%\u0027, new Character[]{\u0027x\u0027});"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        defaultLeetTable.put(\u00272\u0027, new Character[]{\u0027z\u0027});"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Generates the possible list of translations given a password."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param password the password string to unleet"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the list of possible unleet passwords"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static List\u003cString\u003e translateLeet(String password) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cString\u003e translations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        final TreeMap\u003cInteger, Character[]\u003e replacements \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (int i \u003d 0; i \u003c password.length(); i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            Character[] replacement \u003d defaultLeetTable.get(password.charAt(i));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            if (replacement !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                replacements.put(i, replacement);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                // for each character, if the special character has mapping to normal, then put inside the tree."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        // Do not bother continuing if we\u0027re going to replace every single character"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (replacements.keySet().size() \u003d\u003d password.length()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return translations;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (replacements.size() \u003e 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            char[] passwordChar \u003d new char[password.length()];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            for (int i \u003d 0; i \u003c password.length(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                passwordChar[i] \u003d password.charAt(i);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            replaceAtIndex(replacements, replacements.firstKey(), passwordChar, translations);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return translations;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Internal function to recursively build the list of un-leet possibilities."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static void replaceAtIndex(final TreeMap\u003cInteger, Character[]\u003e replacements,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                                       Integer currentIndex, char[] password, List\u003cString\u003e finalPasswords) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        Character[] listOfReplacementsForSpecialCharacter \u003d replacements.get(currentIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (char replacement : listOfReplacementsForSpecialCharacter) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            password[currentIndex] \u003d replacement;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            if (currentIndex.equals(replacements.lastKey())) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                finalPasswords.add(new String(password));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            } else if (finalPasswords.size() \u003d\u003d 100) { //TODO: What is an appropriate length to stop at?"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                // Give up if we\u0027ve already made 100 replacements"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                replaceAtIndex(replacements, replacements.higherKey(currentIndex), password, finalPasswords);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/PreviewUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import org.apache.poi.openxml4j.exceptions.NotOfficeXmlFileException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import org.apache.poi.xwpf.usermodel.XWPFDocument;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * A class for converting byte arrays to human readable formats."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class PreviewUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Converts an input byte array to string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param input the input array."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return converted string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static String convertToString(byte[] input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new String(input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Converts an input byte array to a buffered image."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param input the input array."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return converted buffered image."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IOException if the input cannot be converted to an image."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static BufferedImage convertToImage(byte[] input) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return ImageIO.read(new ByteArrayInputStream(input));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Converts an input byte array to a PDF document."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static PDDocument convertToPdf(byte[] input) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return PDDocument.load(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Converts an input byte array to a MS Word document."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static XWPFDocument convertToWord(byte[] input) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new XWPFDocument(new ByteArrayInputStream(input));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (NotOfficeXmlFileException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new IOException(\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *   Ignores case, and a full word match is not required."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *       containsStringIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *       containsStringIgnoreCase(\"ABc def\", \"DE\") \u003d\u003d true //Works despite not full word match"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"EF\") \u003d\u003d false //Does not contain \"EF\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static boolean containsStringIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return preppedSentence.contains(preppedWord.toLowerCase());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns true if two strings are equal, or both strings are null."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param a the first string to be compared."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param b the second string to be compared."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return whether two strings are equal, or both strings are null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static boolean equalOrBothNull(String a, String b) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (a \u003d\u003d null \u0026\u0026 b \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else if (a !\u003d null \u0026\u0026 b !\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return a.equals(b);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns the encrypted Password with asterixs."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @param password"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return encrypted Password"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static String passwordToAsterix(String password) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        int len \u003d password.length();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return asterix(len);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns the encrypted Card Number with asterixs."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @param cardNumber"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @return encrypted card number"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static String cardNumberToAsterix(String cardNumber) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        String asterisks \u003d asterix(4) + \"-\" + asterix(4) + \"-\" + asterix(4) + \"-\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return asterisks + cardNumber.substring(15, 19);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns the encrypted Cvc with asterixs."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @return encrypted cvc"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static String cvcToAsterix() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return asterix(3);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns a string with the asterix of length length."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param length"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return String with asterix of length length"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static String asterix(int length) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        for (int i \u003d 0; i \u003c length; i++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            sb.append(\"*\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 16,
      "yhtingg": 21,
      "jityong": 23,
      "hooncp": 20,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.Mode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.exceptions.DictionaryException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.ReadOnlyCardBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.ReadOnlyNoteBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.ReadOnlyPasswordBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.ExpiringCard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, DictionaryException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "    ReadOnlyNoteBook getNoteBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "    ObservableList\u003cNote\u003e getFilteredNoteList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns the FileBook."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @see seedu.address.model.Model#getFileBook()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    ReadOnlyFileBook getFileBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of files */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    ObservableList\u003cEncryptedFile\u003e getFilteredFileList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns the user prefs\u0027 file book file path."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    Path getFileBookFilePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns the user prefs\u0027 note book file path."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": "    Path getNoteBookFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns the CardBook."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @see seedu.address.model.Model#getCardBook()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    ReadOnlyCardBook getCardBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of cards */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    ObservableList\u003cCard\u003e getFilteredCardList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /** Returns an unmodifiable view of the list of expiring cards"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @return*/"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    ObservableList\u003cExpiringCard\u003e getExpiringCardList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns the user prefs\u0027 card book file path."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    Path getCardBookFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void setMode(Mode newMode);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    Mode getMode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    ObservableList\u003cPassword\u003e getFilteredPasswordList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @see seedu.address.model.Model#getPasswordBook()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    ReadOnlyPasswordBook getPasswordBook();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    Path getPasswordBookFilePath();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 24,
      "yhtingg": 22,
      "jityong": 10,
      "eejian97": 2,
      "hooncp": 18,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.Mode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.exceptions.DictionaryException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.logic.parser.CardBookParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.parser.FileBookParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.parser.NoteBookParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.parser.PasswordBookParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.ReadOnlyCardBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.ReadOnlyNoteBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.ReadOnlyPasswordBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.ExpiringCard;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final FileBookParser fileBookParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final CardBookParser cardBookParser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final NoteBookParser noteBookParser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final PasswordBookParser passwordBookParser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private Mode mode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        mode \u003d Mode.PASSWORD;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fileBookParser \u003d new FileBookParser(storage.getStoragePassword());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        cardBookParser \u003d new CardBookParser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteBookParser \u003d new NoteBookParser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwordBookParser \u003d new PasswordBookParser();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException, DictionaryException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Command command \u003d parseCommand(commandText);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            saveToBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        saveToBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses the command text using the appropriate parser."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private Command parseCommand(String commandText) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case FILE:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return fileBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case CARD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return cardBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case NOTE:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return noteBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case PASSWORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return passwordBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Saves the appropriate book to storage."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private void saveToBook() throws CommandException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            switch (mode) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            case FILE:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                storage.saveFileBook(model.getFileBook());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            case CARD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                storage.saveCardBook(model.getCardBook());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            case NOTE:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jityong"
        },
        "content": "                storage.saveNoteBook(model.getNoteBook());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jityong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            case PASSWORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                storage.savePasswordBook(model.getPasswordBook());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public ReadOnlyNoteBook getNoteBook() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return model.getNoteBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ReadOnlyFileBook getFileBook() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return model.getFileBook();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ObservableList\u003cEncryptedFile\u003e getFilteredFileList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return model.getFilteredFileList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return model.getFilteredNoteList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Path getFileBookFilePath() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return model.getFileBookFilePath();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public ReadOnlyCardBook getCardBook() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return model.getCardBook();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return model.getFilteredCardList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public ObservableList\u003cExpiringCard\u003e getExpiringCardList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return model.getFilteredCardList()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .map(ExpiringCard::of)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .filter(card -\u003e card.getMonthToExp() \u003e\u003d 0 \u0026\u0026 card.getMonthToExp() \u003c\u003d 2)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .collect(Collectors.toCollection(FXCollections::observableArrayList));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Path getCardBookFilePath() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return model.getCardBookFilePath();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Path getNoteBookFilePath() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return model.getNoteBookFilePath();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setMode(Mode newMode) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        mode \u003d newMode;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Mode getMode() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return mode;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public ReadOnlyPasswordBook getPasswordBook() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return model.getPasswordBook();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Path getPasswordBookFilePath() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return model.getPasswordBookFilePath();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public ObservableList\u003cPassword\u003e getFilteredPasswordList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return model.getFilteredPasswordList();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 75,
      "yhtingg": 36,
      "jityong": 20,
      "eejian97": 2,
      "hooncp": 21,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCardCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CARDNUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CVC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPIRYDATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Adds a card to the card book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class AddCardCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a card to the app. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + PREFIX_CARDNUMBER + \"CARD NUMBER \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + PREFIX_CVC + \"CVC \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + PREFIX_EXPIRYDATE + \"EXPIRY DATE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + PREFIX_DESCRIPTION + \"POSB Debit \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + PREFIX_CARDNUMBER + \"5283201212034958 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + PREFIX_CVC + \"876 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + PREFIX_EXPIRYDATE + \"12/25 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + PREFIX_TAG + \"groceries\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New card added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD \u003d \"This card already exists in the app!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD_DESCRIPTION \u003d \"Another card has the same description!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final Card toAddCard;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Creates an AddCardCommand to add the specified {@code Card}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public AddCardCommand(Card card) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        toAddCard \u003d card;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (model.hasCardDescription(toAddCard)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CARD_DESCRIPTION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (model.hasCard(toAddCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        model.addCard(toAddCard);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAddCard));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 toAddCard.equals(((AddCardCommand) other).toAddCard));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddFileCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.util.EncryptionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedAt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.ModifiedAt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Add an encrypted file identified using it\u0027s file path."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class AddFileCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \": Adds an encrypted file in user\u0027s file system using the specified file path.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Parameters: FILEPATH [t/TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" /Users/YOUR_USERNAME/Desktop/[LOCKED] Test.txt t/personal\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"File added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Cannot add file.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"File does not exist.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FILE \u003d \"This file is already added.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_ENCRYPTED \u003d \"File is not yet encrypted.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Use encrypt command to encrypt files instead.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final EncryptedFile toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Creates an EncryptFileCommand to encrypt the specified {@code File}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public AddFileCommand(EncryptedFile file) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireAllNonNull(file);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        toAdd \u003d file;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (model.hasFile(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FILE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        String realFilePath \u003d toAdd.getEncryptedPath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!Files.exists(Path.of(realFilePath))) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            realFilePath \u003d toAdd.getFullPath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            if (!Files.exists(Path.of(realFilePath))) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                throw new CommandException(MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            if (!EncryptionUtil.isFileEncrypted(realFilePath)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                throw new CommandException(MESSAGE_FILE_NOT_ENCRYPTED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            toAdd.setModifiedAt(new ModifiedAt(new Date(0)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            toAdd.setEncryptedAt(new EncryptedAt(new Date(0)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            new File(realFilePath).renameTo(new File(toAdd.getEncryptedPath()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        model.addFile(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddFileCommand) other).toAdd));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddNotesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class AddNotesCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a note to the notebook. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + PREFIX_TAG + \"TAG \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + PREFIX_CONTENT + \"CONTENT\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New note added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"A note with this title already exists in the note book\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final Note toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public AddNotesCommand(Note note) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "        toAdd \u003d note;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (model.hasNote(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "        model.commitNote();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "        model.addNote(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "        model.sortNoteBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "                || (other instanceof AddNotesCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddNotesCommand) other).toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddPasswordCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORDVALUE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PASSWORDS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Adds a password to the password book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class AddPasswordCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a password to the password book. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + PREFIX_USERNAME + \"USERNAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + PREFIX_PASSWORDVALUE + \"PASSWORD \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"[\" + PREFIX_WEBSITE + \"WEBSITE] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New password added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PASSWORD \u003d \"This password already exists in the password book.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"Please ensure that your password adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"1) Should not have the same description and username as those already existing in the password book\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"2) Description and username are case-insensitive.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final Password toAddPassword;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public AddPasswordCommand(Password password) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        toAddPassword \u003d password;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (model.hasPassword(toAddPassword)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PASSWORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        model.addPassword(toAddPassword);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        model.updateFilteredPasswordList(PREDICATE_SHOW_ALL_PASSWORDS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAddPassword));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                || (other instanceof AddPasswordCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u0026\u0026 toAddPassword.equals(((AddPasswordCommand) other).toAddPassword));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AnalysePasswordCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STRONG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PASSWORDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.core.Dictionary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.exceptions.DictionaryException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.Analyser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.DictionaryAnalyser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.SequenceAnalyser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.SimilarityAnalyser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.StrengthAnalyser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.UniqueAnalyser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.report.AnalysisReport;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.result.Result;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Analyses passwords in the password book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class AnalysePasswordCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Results are shown below\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"analyse\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            + \": Analyses security of the entire list of passwords.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            + \"OPTIONAL Parameters: \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            + PREFIX_STRONG + \"INDEX (Analyses the password identified by the index in greater detail.)\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static final String DICTIONARY_PASSWORD \u003d \"passwords.txt\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public AnalysePasswordCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, DictionaryException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        model.updateFilteredPasswordList(PREDICATE_SHOW_ALL_PASSWORDS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        List\u003cPassword\u003e passwordList \u003d model.getFilteredPasswordList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        List\u003cAnalyser\u003e analyserList \u003d getRequiredAnalysers();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        AnalysisReport analysisReport \u003d new AnalysisReport();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (Analyser analyser : analyserList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            analysisReport.writeHeading(analyser.getHeader());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            List\u003cResult\u003e results \u003d analyser.analyse(passwordList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            analysisReport.write(results);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return CommandResult.builder(MESSAGE_SUCCESS)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                .read()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                .setObject(analysisReport)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    List\u003cAnalyser\u003e getRequiredAnalysers() throws DictionaryException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cAnalyser\u003e analyserList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        analyserList.add(new UniqueAnalyser());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        //analyserList.add(new UserAsPassAnalyser());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        analyserList.add(new StrengthAnalyser());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        analyserList.add(new SimilarityAnalyser());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        analyserList.add(new DictionaryAnalyser(Dictionary.build(DICTIONARY_PASSWORD)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        analyserList.add(new SequenceAnalyser());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return analyserList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AnalyseStrongPasswordCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PASSWORDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.exceptions.DictionaryException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.Analyser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.report.AnalysisReport;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.result.Result;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Analyses a specific password in password book as given by the index."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class AnalyseStrongPasswordCommand extends AnalysePasswordCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public AnalyseStrongPasswordCommand(Index index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, DictionaryException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        model.updateFilteredPasswordList(PREDICATE_SHOW_ALL_PASSWORDS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        List\u003cPassword\u003e passwordList \u003d model.getFilteredPasswordList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d passwordList.size()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PASSWORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        AnalysisReport analysisReport \u003d new AnalysisReport();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        analysisReport.writePassword(passwordList.get(index.getZeroBased()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        List\u003cAnalyser\u003e analyserList \u003d super.getRequiredAnalysers();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (Analyser analyser : analyserList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            analysisReport.writeHeading(analyser.getHeader());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            List\u003cResult\u003e results \u003d analyser.analyse(passwordList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            analysisReport.write(results.get(index.getZeroBased()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return CommandResult.builder(MESSAGE_SUCCESS)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                .read()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                .setObject(analysisReport)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.VersionedNoteBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class ClearNoteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Note book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "        model.commitNote();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "        model.setNoteBook(new VersionedNoteBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.exceptions.DictionaryException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException, DictionaryException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.Mode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final boolean isGoTo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final Mode modeToGoTo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final boolean read;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final Object object;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean goTo,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                         Mode modeToGoTo) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.isGoTo \u003d goTo;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.modeToGoTo \u003d modeToGoTo;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.read \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.object \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.index \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean goTo,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                         Mode modeToGoTo, boolean read, Object object, Index index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.isGoTo \u003d goTo;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.modeToGoTo \u003d modeToGoTo;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.read \u003d read;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.object \u003d object;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this(feedbackToUser, false, false, false,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static Builder builder(String feedbackToUser) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return new Builder(feedbackToUser);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Represents a CommandResult constructor builder."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static class Builder {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        private String feedbackToUser;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        private boolean showHelp;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        /** The application should exit. */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        private boolean exit;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        private boolean isGoTo;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        private boolean read;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        private Mode modeToGoTo;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        private Object object;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        private Index index;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        public Builder (String feedbackToUser) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "         * Toggles showHelp boolean to true."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "         * @return builder with showHelp as true."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        public Builder showHelp() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            this.showHelp \u003d true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "         * Toggles exit boolean to true."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "         * @return builder with exit as true."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        public Builder exit() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            this.exit \u003d true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "         * Toggles isGoTo boolean to true."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "         * @return builder with isGoTo as true."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        public Builder isGoTo() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            this.isGoTo \u003d true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "         * Toggles read boolean to true."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "         * @return builder with read as true."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        public Builder read() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            this.read \u003d true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        public Builder setMode(Mode mode) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            this.modeToGoTo \u003d mode;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        public Builder setObject(Object object) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            this.object \u003d object;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        public Builder setIndex(Index index) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            this.index \u003d index;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        public CommandResult build() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return new CommandResult(feedbackToUser, showHelp, exit, isGoTo, modeToGoTo, read, object, index);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Object getObject() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return object;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean isGoTo() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return isGoTo;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Mode getModeToGoTo() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return modeToGoTo;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean isRead() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return read;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 isGoTo \u003d\u003d otherCommandResult.isGoTo"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 modeToGoTo \u003d\u003d otherCommandResult.modeToGoTo;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, isGoTo, modeToGoTo);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 16,
      "yhtingg": 94,
      "jityong": 7,
      "hooncp": 14,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CopyPasswordCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Copies password, website, username from password identified."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public abstract class CopyPasswordCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"copy\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String COMMAND_WORD1 \u003d \"cp\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"/\" + COMMAND_WORD1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \" [\" + CopyPasswordValueCommand.COMMAND_WORD + \"/\" + CopyPasswordValueCommand.COMMAND_WORD1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"] / [\" + CopyWebsiteCommand.COMMAND_WORD + \"/\" + CopyWebsiteCommand.COMMAND_WORD1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"] / [\" + CopyUsernameCommand.COMMAND_WORD + \"/\" + CopyUsernameCommand.COMMAND_WORD1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"]\" + \" : Opens and copies password/website/username identified by \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"the index number used in the display list. \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"Parameters: INDEX (must be positive integer)\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"Example: \" + CopyPasswordCommand.COMMAND_WORD1 + \" \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + CopyPasswordValueCommand.COMMAND_WORD1 + \" 1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CopyPasswordValueCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.exceptions.DictionaryException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.util.ClipboardUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Copies a password value from the password identified using it\u0027s displayed index"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * from the password book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class CopyPasswordValueCommand extends CopyPasswordCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"password\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String COMMAND_WORD1 \u003d \"p\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Copied password\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public CopyPasswordValueCommand(Index index) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, DictionaryException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        List\u003cPassword\u003e lastShownList \u003d model.getFilteredPasswordList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PASSWORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password passwordToRead \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwordToRead.updateExpiry();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        ClipboardUtil.copyToClipboard(passwordToRead.getNonEncryptedPasswordValue(), null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return CommandResult.builder(MESSAGE_SUCCESS)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .setObject(passwordToRead)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .read()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .setIndex(targetIndex)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CopyUsernameCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.exceptions.DictionaryException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.util.ClipboardUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Copies a username from the password identified using it\u0027s displayed index"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * from the password book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class CopyUsernameCommand extends CopyPasswordCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"username\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String COMMAND_WORD1 \u003d \"u\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Copied username\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public CopyUsernameCommand(Index index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, DictionaryException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        List\u003cPassword\u003e lastShownList \u003d model.getFilteredPasswordList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PASSWORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password passwordToRead \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        ClipboardUtil.copyToClipboard(passwordToRead.getUsername().value, null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwordToRead.updateExpiry();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return CommandResult.builder(MESSAGE_SUCCESS)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .setObject(passwordToRead)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .setIndex(targetIndex)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .read()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CopyWebsiteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.exceptions.DictionaryException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.util.ClipboardUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Copies a password value from the password identified using it\u0027s displayed index"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * from the password book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class CopyWebsiteCommand extends CopyPasswordCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"website\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String COMMAND_WORD1 \u003d \"w\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Copied website\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public CopyWebsiteCommand(Index index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, DictionaryException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        List\u003cPassword\u003e lastShownList \u003d model.getFilteredPasswordList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PASSWORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password passwordToRead \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwordToRead.updateExpiry();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        ClipboardUtil.copyToClipboard(passwordToRead.getWebsite().value, null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return CommandResult.builder(MESSAGE_SUCCESS)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .setObject(passwordToRead)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .setIndex(targetIndex)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .read()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DecryptFileCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FILES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.FileSystemException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.exceptions.TargetFileExistException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.util.EncryptionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Decrypts a file identified using it\u0027s displayed index from the file book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class DecryptFileCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"decrypt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \": Decrypt the file identified by the index number used in the displayed file list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_DELETE_FILE_SUCCESS \u003d \"File decrypted: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_DELETE_FILE_FAILURE \u003d \"File decryption failed.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FILE_IS_OPENED \u003d \"File encryption failed.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"This file is being used by another process. Close the file and try again.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_TARGET_FILE_EXISTS \u003d \"File decryption failed. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Target file already exists.\\nRename %1$s and try again.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_DECRYPT_FILE_FAILURE \u003d \"File decryption failed. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"File may be corrupted. \\nUse remove command to remove the file from the file list.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public DecryptFileCommand(Index targetIndex, String password) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile fileToDecrypt \u003d FileCommandUtil.getFileWithIndex(targetIndex, model);;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FileCommandUtil.checkIfFileExists(fileToDecrypt, model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            FileCommandUtil.checkIfFileEncrypted(fileToDecrypt, model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            EncryptionUtil.decryptFile(fileToDecrypt.getEncryptedPath(), fileToDecrypt.getFullPath(), password);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileSystemException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_IS_OPENED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_DELETE_FILE_FAILURE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            model.setFileStatus(fileToDecrypt, FileStatus.CORRUPTED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            model.updateFilteredFileList(PREDICATE_SHOW_ALL_FILES);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_DECRYPT_FILE_FAILURE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (TargetFileExistException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_TARGET_FILE_EXISTS, e.getMessage()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        model.deleteFile(fileToDecrypt);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FILE_SUCCESS, fileToDecrypt));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof DecryptFileCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DecryptFileCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "niqiukun": 73,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCardCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Deletes a card identified using it\u0027s description from the card book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class DeleteCardCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + \": Deletes the card identified by the description or index used \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + \"in the displayed card list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + \"Parameters: DESCRIPTION\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" POSB Debit\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + \"Parameters: INDEX (must be positive integer\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String MESSAGE_DELETE_CARD_SUCCESS \u003d \"Deleted Card: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public DeleteCardCommand(Description description) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.targetIndex \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public DeleteCardCommand(Index index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.description \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        List\u003cCard\u003e lastShownList \u003d model.getFilteredCardList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        Card cardToDelete;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        assert((targetIndex !\u003d null) || (description !\u003d null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (targetIndex !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            cardToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            if (!lastShownList.contains(new Card(description))) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            cardToDelete \u003d lastShownList.get(lastShownList.indexOf(new Card(description)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        model.deleteCard(cardToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CARD_SUCCESS, cardToDelete));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                || (other instanceof DeleteCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 description.equals(((DeleteCardCommand) other).description)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCardCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class DeleteNoteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \": Deletes the note identified by the index number used in the displayed note list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_DELETE_NOTE_SUCCESS \u003d \"Deleted Note with title: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public DeleteNoteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "        List\u003cNote\u003e lastShownList \u003d model.getFilteredNoteList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "        model.commitNote();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Note noteToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "        model.deleteNote(noteToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_NOTE_SUCCESS, noteToDelete.getTitle()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "                || (other instanceof DeleteNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteNoteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeletePasswordCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Deletes a password identified using it\u0027s displayed index from the password book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class DeletePasswordCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"Deletes a password identified by the index number from the existing password book\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted Password: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public DeletePasswordCommand(Index index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        List\u003cPassword\u003e lastShownList \u003d model.getFilteredPasswordList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PASSWORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password passwordToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        model.deletePassword(passwordToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, passwordToDelete));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.DateAdded;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.DateModified;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.NumOfAccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class EditNoteCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + PREFIX_DESCRIPTION + \"change description \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_EDIT_NOTE_SUCCESS \u003d \"Edited Note: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"A note with this title already exists in the note book.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final EditNoteDescriptor editNoteDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public EditNoteCommand(Index index, EditNoteDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.editNoteDescriptor \u003d new EditNoteDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": "        List\u003cNote\u003e lastShownList \u003d model.getFilteredNoteList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Note noteToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Note editedNote \u003d createEditedNote(noteToEdit, editNoteDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!noteToEdit.isSameNote(editedNote) \u0026\u0026 model.hasNote(editedNote)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jityong"
        },
        "content": "        model.commitNote();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jityong"
        },
        "content": "        model.setNote(noteToEdit, editedNote);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jityong"
        },
        "content": "        model.sortNoteBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return CommandResult.builder(String.format(\"Note opened on the right panel.\", editedNote))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jityong"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Creates and returns a {@code Note} with the details of {@code noteToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * edited with {@code editNoteDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private static Note createEditedNote(Note noteToEdit, EditNoteDescriptor editNoteDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jityong"
        },
        "content": "        assert noteToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Title updatedTitle \u003d editNoteDescriptor.getTitle().orElse(noteToEdit.getTitle());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Description updatedDescription \u003d editNoteDescriptor.getDescription().orElse(noteToEdit.getDescription());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Content updatedContent \u003d editNoteDescriptor.getContent().orElse(noteToEdit.getContent());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jityong"
        },
        "content": "        DateModified updatedDateModified \u003d noteToEdit.updateDateModified();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jityong"
        },
        "content": "        DateAdded dateAdded \u003d noteToEdit.getDateAdded();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jityong"
        },
        "content": "        NumOfAccess numOfAccess \u003d noteToEdit.getNumOfAccess();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editNoteDescriptor.getTags().orElse(noteToEdit.getTags());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new Note(updatedTitle, updatedDescription, updatedTags, updatedContent,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jityong"
        },
        "content": "                updatedDateModified, dateAdded, numOfAccess);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jityong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jityong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!(other instanceof EditNoteCommand)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jityong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jityong"
        },
        "content": "        EditNoteCommand e \u003d (EditNoteCommand) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u0026\u0026 editNoteDescriptor.equals(e.editNoteDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static class EditNoteDescriptor {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jityong"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jityong"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jityong"
        },
        "content": "        private Content content;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jityong"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public EditNoteDescriptor() {}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jityong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jityong"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jityong"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jityong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public EditNoteDescriptor(EditNoteCommand.EditNoteDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jityong"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jityong"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jityong"
        },
        "content": "            setContent(toCopy.content);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jityong"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jityong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jityong"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jityong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, description, content, tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jityong"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jityong"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public void setContent(Content content) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jityong"
        },
        "content": "            this.content \u003d content;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public Optional\u003cContent\u003e getContent() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return Optional.ofNullable(content);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jityong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jityong"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jityong"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jityong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jityong"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jityong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jityong"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jityong"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jityong"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jityong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jityong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jityong"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jityong"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jityong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jityong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jityong"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jityong"
        },
        "content": "            if (!(other instanceof EditNoteDescriptor)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jityong"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jityong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jityong"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jityong"
        },
        "content": "            EditNoteDescriptor e \u003d (EditNoteDescriptor) other;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 216
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditPasswordCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORDVALUE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PASSWORDS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordDescription;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordModifiedAt;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordValue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Username;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Website;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Edits the details of an existing password in the password book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class EditPasswordCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the password identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"by the index number used in the displayed password list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"[\" + PREFIX_USERNAME + \"USER] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"[\" + PREFIX_PASSWORDVALUE + \"PASSWORD] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"[\" + PREFIX_WEBSITE + \"WEBSITE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_EDIT_PASSWORD_SUCCESS \u003d \"Edited Password: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PASSWORD \u003d \"This password already exists in the password book.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final EditPasswordDescriptor editPasswordDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param index of the password in the filtered password list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param editPasswordDescriptor details to edit the password with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public EditPasswordCommand(Index index, EditPasswordDescriptor editPasswordDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(editPasswordDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.editPasswordDescriptor \u003d new EditPasswordDescriptor(editPasswordDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        List\u003cPassword\u003e lastShownList \u003d model.getFilteredPasswordList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PASSWORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password passwordToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password editedPassword \u003d createEditedPassword(passwordToEdit, editPasswordDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!passwordToEdit.isSamePassword(editedPassword) \u0026\u0026 model.hasPassword(editedPassword)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PASSWORD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        model.setPassword(passwordToEdit, editedPassword);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        model.updateFilteredPasswordList(PREDICATE_SHOW_ALL_PASSWORDS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PASSWORD_SUCCESS, editedPassword));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Creates and returns a {@code Password} with the details of {@code passwordToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * edited with {@code editPasswordDescriptor}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private static Password createEditedPassword(Password passwordToEdit,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                                                 EditPasswordDescriptor editPasswordDescriptor) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        assert passwordToEdit !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        PasswordDescription updatedPasswordDescription \u003d editPasswordDescriptor"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .getPasswordDescription().orElse(passwordToEdit.getPasswordDescription());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Username updatedUsername \u003d editPasswordDescriptor"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .getUsername().orElse(passwordToEdit.getUsername());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        PasswordValue updatedPasswordValue \u003d editPasswordDescriptor"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .getPasswordValue().orElse(passwordToEdit.getPasswordValue());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        PasswordModifiedAt updatedPasswordModifiedAt;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!updatedPasswordValue.equals(passwordToEdit.getPasswordValue())) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            updatedPasswordModifiedAt \u003d new PasswordModifiedAt(new Date());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            updatedPasswordModifiedAt \u003d passwordToEdit.getPasswordModifiedAt();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Website updatedWebsite \u003d editPasswordDescriptor.getWebsite().orElse(passwordToEdit.getWebsite());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPasswordDescriptor"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .getTags().orElse(passwordToEdit.getTags());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new Password(updatedPasswordDescription, updatedUsername, updatedPasswordValue,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                updatedPasswordModifiedAt, updatedWebsite, updatedTags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!(other instanceof EditPasswordCommand)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        EditPasswordCommand e \u003d (EditPasswordCommand) other;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u0026\u0026 editPasswordDescriptor.equals(e.editPasswordDescriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static class EditPasswordDescriptor {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        private PasswordDescription passwordDescription;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        private Username username;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        private PasswordValue passwordValue;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        private Website website;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public EditPasswordDescriptor() {}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public EditPasswordDescriptor(EditPasswordDescriptor toCopy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            setPasswordDescription(toCopy.passwordDescription);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            setUsername(toCopy.username);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            setPasswordValue(toCopy.passwordValue);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            setWebsite(toCopy.website);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return CollectionUtil.isAnyNonNull(passwordDescription, username, passwordValue, website, tags);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public void setPasswordDescription(PasswordDescription passwordDescription) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            this.passwordDescription \u003d passwordDescription;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public Optional\u003cPasswordDescription\u003e getPasswordDescription() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return Optional.ofNullable(passwordDescription);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public void setUsername(Username username) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            this.username \u003d username;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public Optional\u003cUsername\u003e getUsername() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return Optional.ofNullable(username);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public void setPasswordValue(PasswordValue passwordValue) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            this.passwordValue \u003d passwordValue;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public Optional\u003cPasswordValue\u003e getPasswordValue() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return Optional.ofNullable(passwordValue);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public void setWebsite(Website website) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            this.website \u003d website;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public Optional\u003cWebsite\u003e getWebsite() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return Optional.ofNullable(website);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            if (!(other instanceof EditPasswordDescriptor)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            EditPasswordDescriptor e \u003d (EditPasswordDescriptor) other;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return getPasswordDescription().equals(e.getPasswordDescription())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    \u0026\u0026 getUsername().equals(e.getUsername())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    \u0026\u0026 getPasswordValue().equals(e.getPasswordValue())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 237
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EncryptFileCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.FileSystemException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.exceptions.TargetFileExistException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.util.EncryptionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedAt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.ModifiedAt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Encrypt a file identified using it\u0027s file path."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class EncryptFileCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"encrypt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \": Encrypts a file in user\u0027s file system using the specified file path.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Parameters: FILEPATH [t/TAG]...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" /Users/YOUR_USERNAME/Desktop/Test.txt t/personal\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"File encrypted: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"File encryption failed.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FILE_IS_OPENED \u003d \"File encryption failed.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"This file is being used by another process. Close the file and try again.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_IS_DIRECTORY \u003d \"File encryption failed.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"SecureIT currently does not support encrypting directories.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"File does not exist.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FILE \u003d \"This file is already in the list.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_ENCRYPTED_FILE \u003d \"This file is already encrypted.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Use add command to add encrypted files to the list.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_TARGET_FILE_EXISTS \u003d \"File encryption failed. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Target file already exists.\\nRename %1$s and try again.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final EncryptedFile toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Creates an EncryptFileCommand to encrypt the specified {@code File}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public EncryptFileCommand(EncryptedFile file, String password) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireAllNonNull(file, password);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        toAdd \u003d file;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (model.hasFile(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FILE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!Files.exists(Path.of(toAdd.getFullPath()))) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (Files.isDirectory(Path.of(toAdd.getFullPath()))) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_IS_DIRECTORY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            if (EncryptionUtil.isFileEncrypted(toAdd.getFullPath())) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                throw new CommandException(MESSAGE_ENCRYPTED_FILE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            toAdd.setModifiedAt("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    new ModifiedAt("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                            new Date("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                                    Files.getLastModifiedTime("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                                            Path.of(toAdd.getFullPath())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                                    ).toMillis()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                            )"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            );"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            EncryptionUtil.encryptFile(toAdd.getFullPath(), toAdd.getEncryptedPath(), password);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            toAdd.setEncryptedAt(new EncryptedAt(new Date()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileSystemException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_IS_OPENED);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IOException | GeneralSecurityException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (TargetFileExistException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_TARGET_FILE_EXISTS, e.getMessage()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        model.addFile(toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 toAdd.equals(((EncryptFileCommand) other).toAdd));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 98,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return CommandResult.builder(MESSAGE_EXIT_ACKNOWLEDGEMENT)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .exit()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FileCommandUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FILES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.util.EncryptionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Utility class for file commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FileCommandUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"File does not exist. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"File may be renamed or deleted. \\nUse remove command to remove the file from the file list.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_ENCRYPTED \u003d \"File may not be encrypted or may be corrupted.\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"\\nUse remove command to remove the file from the file list.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Checks if the file specified exists in the file system and updates the model."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static void checkIfFileExists(EncryptedFile file, Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!Files.exists(Path.of(file.getEncryptedPath()))) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            model.setFileStatus(file, FileStatus.MISSING);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            model.updateFilteredFileList(PREDICATE_SHOW_ALL_FILES);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Checks if the file specified is encrypted and updates the model."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static void checkIfFileEncrypted(EncryptedFile file, Model model)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throws CommandException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!EncryptionUtil.isFileEncrypted(file.getEncryptedPath())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            model.setFileStatus(file, FileStatus.CORRUPTED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            model.updateFilteredFileList(PREDICATE_SHOW_ALL_FILES);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_NOT_ENCRYPTED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Gets the file from the displayed list with the specified index."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static EncryptedFile getFileWithIndex(Index targetIndex, Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        List\u003cEncryptedFile\u003e lastShownList \u003d model.getFilteredFileList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FILE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindFileCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FullPathContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Finds and lists all files in file book whose full path contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FindFileCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all files whose file paths contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" .doc .txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final FullPathContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FindFileCommand(FullPathContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        model.updateFilteredFileList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                String.format(Messages.MESSAGE_FILES_LISTED_OVERVIEW, model.getFilteredFileList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof FindFileCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindFileCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class FindNoteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all notes whose title or description contain \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" personal diary\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public FindNoteCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "        model.updateFilteredNoteList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "                String.format(Messages.MESSAGE_NOTES_LISTED_OVERVIEW, model.getFilteredNoteList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "                || (other instanceof FindNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindNoteCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindPasswordCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordDescription;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Finds and lists all password in password book whose description contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class FindPasswordCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all passwords whose description contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"Parameters: DESCRIPTION \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + PasswordDescription.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final DescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public FindPasswordCommand(DescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        model.updateFilteredPasswordList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                String.format(Messages.MESSAGE_PASSWORD_LISTED_OVERVIEW, model.getFilteredPasswordList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                || (other instanceof FindPasswordCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindPasswordCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GeneratePasswordCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LENGTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_UPPER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.util.ClipboardUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.util.GeneratorUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Generates a random password value based on user input argument."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class GeneratePasswordCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"generate\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Password Generated: %s\" + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                                                            + \"Password has been copied to your clipboard!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Generates a random password. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            + \"OPTIONAL Parameters: \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            + PREFIX_LENGTH + \"LENGTH \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            + PREFIX_LOWER + \"\u003ctrue/false\u003e \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            + PREFIX_UPPER + \"\u003ctrue/false\u003e \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            + PREFIX_NUM + \"\u003ctrue/false\u003e \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            + PREFIX_SPECIAL + \"\u003ctrue/false\u003e\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private int length;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private boolean lower;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private boolean upper;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private boolean num;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private boolean special;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private PasswordGeneratorDescriptor configuration;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public GeneratePasswordCommand(PasswordGeneratorDescriptor configuration) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.configuration \u003d configuration;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.length \u003d configuration.getLength();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.lower \u003d configuration.getLower();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.upper \u003d configuration.getUpper();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.num \u003d configuration.getNum();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.special \u003d configuration.getSpecial();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Returns a CommandResult containing a randomly generated password."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param model the manager model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return randomly generated password"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        String password \u003d GeneratorUtil.generateRandomPassword(length, lower, upper, num, special);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ClipboardUtil.copyToClipboard(password, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, password));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Stores the details of password requirements."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static class PasswordGeneratorDescriptor {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        private int length;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        private boolean lower;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        private boolean upper;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        private boolean num;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        private boolean special;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        public PasswordGeneratorDescriptor(int length, boolean lower, boolean upper, boolean num, boolean special) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            this.length \u003d length;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            this.lower \u003d lower;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            this.upper \u003d upper;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            this.num \u003d num;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            this.special \u003d special;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        public PasswordGeneratorDescriptor() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            this.length \u003d 10;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            this.lower \u003d true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            this.upper \u003d true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            this.num \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            this.special \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        public void setLength(int length) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            this.length \u003d length;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        public void setLower(boolean lower) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            this.lower \u003d lower;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        public void setUpper(boolean upper) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            this.upper \u003d upper;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        public void setNum(boolean num) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            this.num \u003d num;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        public void setSpecial(boolean special) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            this.special \u003d special;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        public int getLength() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return length;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        public boolean getLower() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return lower;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        public boolean getUpper() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return upper;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        public boolean getNum() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return num;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        public boolean getSpecial() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return special;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        public static PasswordGeneratorDescriptor getDefaultConfiguration() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return new PasswordGeneratorDescriptor();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "eejian97": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GoToCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FILES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PASSWORDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.Mode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class GoToCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goto\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches to a specific mode. Parameters: MODE\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"SecureIT currently supports four modes: password, file, note, and card.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_GOTO_ACKNOWLEDGEMENT \u003d \"Switched to %s mode.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final Mode mode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public GoToCommand(Mode mode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        model.updateFilteredPasswordList(PREDICATE_SHOW_ALL_PASSWORDS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        model.updateFilteredNoteList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        model.updateFilteredFileList(PREDICATE_SHOW_ALL_FILES);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return CommandResult.builder(String.format(MESSAGE_GOTO_ACKNOWLEDGEMENT, mode))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .isGoTo()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .setMode(mode)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 28,
      "yhtingg": 4,
      "hooncp": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return CommandResult.builder(SHOWING_HELP_MESSAGE)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .showHelp()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListFileCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FILES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class ListFileCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all files\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        model.updateFilteredFileList(PREDICATE_SHOW_ALL_FILES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class ListNoteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all notes\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "        model.updateFilteredNoteList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListPasswordCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PASSWORDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Lists all password in the password book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class ListPasswordCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all passwords\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        model.updateFilteredPasswordList(PREDICATE_SHOW_ALL_PASSWORDS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MoveFileCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FilePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Moves a file identified using it\u0027s displayed index from the file book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class MoveFileCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"move\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \": Move the file identified by the index number from the displayed file list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Parameters: INDEX NEW_LOCATION\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 /Users/YOUR_USERNAME/Desktop\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_RENAME_FILE_SUCCESS \u003d \"File moved: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_RENAME_FILE_FAILURE \u003d \"Cannot move file.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_TARGET_FILE_EXISTS \u003d \"Cannot move file. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Target file already exists.\\nRename %1$s and try again.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FILE \u003d \"Target file is already in the list.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_IS_NOT_DIRECTORY \u003d \"Target path is not a directory.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Moving into shortcuts, aliases and symbolic links is not supported currently.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final FilePath newFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public MoveFileCommand(Index targetIndex, FilePath newFilePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.newFilePath \u003d newFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private void checkIfTargetFileExists(EncryptedFile newFile) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (Files.exists(Path.of(newFile.getEncryptedPath()))) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_TARGET_FILE_EXISTS, newFile.getEncryptedPath()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private void checkIfTargetFileDuplicated(EncryptedFile newFile, Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (model.hasFile(newFile)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FILE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private void checkIfParamIsDirectory(String param) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!Files.isDirectory(Path.of(param))) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_IS_NOT_DIRECTORY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile fileToMove \u003d FileCommandUtil.getFileWithIndex(targetIndex, model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FileCommandUtil.checkIfFileExists(fileToMove, model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        checkIfParamIsDirectory(newFilePath.value);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile newFile \u003d new EncryptedFile("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                fileToMove.getFileName(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                newFilePath,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                fileToMove.getFileStatus() \u003d\u003d FileStatus.CORRUPTED ? FileStatus.CORRUPTED : FileStatus.ACTIVE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                fileToMove.getTags(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                fileToMove.getEncryptedAt(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                fileToMove.getModifiedAt()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        checkIfTargetFileExists(newFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        checkIfTargetFileDuplicated(newFile, model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Files.move(Path.of(fileToMove.getEncryptedPath()), Path.of(newFile.getEncryptedPath()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_RENAME_FILE_FAILURE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        model.setFile(fileToMove, newFile);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_RENAME_FILE_SUCCESS, fileToMove));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof MoveFileCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((MoveFileCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "niqiukun": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/OpenNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.DateAdded;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.DateModified;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.NumOfAccess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class OpenNoteCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Opens the note identified \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"by the index number used in the displayed note list. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_READ_NOTE_SUCCESS \u003d \"Note title: %1$s\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public OpenNoteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "        List\u003cNote\u003e lastShownList \u003d model.getFilteredNoteList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Note noteToRead \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Note updatedNote \u003d createEditedNote(noteToRead);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "        //TODO: assert here to ensure updated note is different from any other note in the list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "        model.setNote(noteToRead, updatedNote);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "        model.sortNoteBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Index updatedIndex \u003d model.getNoteIndex(updatedNote);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return CommandResult.builder(\"Note opened on the right panel.\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "                .setObject(updatedNote)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "                .setIndex(updatedIndex)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .read()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jityong"
        },
        "content": "                || (other instanceof OpenNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((OpenNoteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Creates and returns a {@code Note} with the details of {@code noteToEdit}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private static Note createEditedNote(Note noteToEdit) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jityong"
        },
        "content": "        assert noteToEdit !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Title updatedTitle \u003d noteToEdit.getTitle();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Description updatedDescription \u003d noteToEdit.getDescription();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Content updatedContent \u003d noteToEdit.getContent();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jityong"
        },
        "content": "        DateModified updatedDateModified \u003d noteToEdit.getDateModified();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jityong"
        },
        "content": "        DateAdded dateAdded \u003d noteToEdit.getDateAdded();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d noteToEdit.getTags();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jityong"
        },
        "content": "        NumOfAccess numOfAccess \u003d noteToEdit.updateNumOfAccess();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new Note(updatedTitle, updatedDescription, updatedTags, updatedContent,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jityong"
        },
        "content": "                updatedDateModified, dateAdded, numOfAccess);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yhtingg": 2,
      "jityong": 83,
      "hooncp": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PreviewFileCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.util.EncryptionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.util.PreviewUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.ViewableFile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.ViewableFileType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Previews a file identified using it\u0027s displayed index from the file book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class PreviewFileCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"preview\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \": Preview the file identified by the index number from the displayed file list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_PREVIEW_FILE_SUCCESS \u003d \"File opened in the preview: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_PREVIEW_FILE_FAILURE \u003d \"File preview failed. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"File may be corrupted, or the file format does not match its extension.\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"\\nYou may use decrypt command to try to decrypt the file, or use remove command to remove the file.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_PREVIEW_FILE_UNSUPPORTED \u003d \"File type is unsupported. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"\\nSecureIT currently only supports preview of txt, jpg, png, docx, and pdf files.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public PreviewFileCommand(Index targetIndex, String password) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile fileToPreview \u003d FileCommandUtil.getFileWithIndex(targetIndex, model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FileCommandUtil.checkIfFileExists(fileToPreview, model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            FileCommandUtil.checkIfFileEncrypted(fileToPreview, model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            byte[] fileBytes \u003d EncryptionUtil.decryptFileToBytes(fileToPreview.getEncryptedPath(), password);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            ViewableFile viewableFile;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            switch (fileToPreview.getFileExtension().toLowerCase()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            case \"txt\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                viewableFile \u003d new ViewableFile\u003c\u003e("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        fileToPreview,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        ViewableFileType.TEXT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        PreviewUtil.convertToString(fileBytes)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            case \"jpg\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            case \"jpeg\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            case \"png\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                BufferedImage image \u003d PreviewUtil.convertToImage(fileBytes);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                if (image \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    throw new IOException(\"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                viewableFile \u003d new ViewableFile\u003c\u003e("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        fileToPreview,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        ViewableFileType.IMAGE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        PreviewUtil.convertToImage(fileBytes)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            case \"pdf\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                viewableFile \u003d new ViewableFile\u003c\u003e("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        fileToPreview,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        ViewableFileType.PDF,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        PreviewUtil.convertToPdf(fileBytes)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                );"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            case \"docx\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                viewableFile \u003d new ViewableFile\u003c\u003e("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        fileToPreview,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        ViewableFileType.WORD,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        PreviewUtil.convertToWord(fileBytes)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                );"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                throw new CommandException(MESSAGE_PREVIEW_FILE_UNSUPPORTED);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return CommandResult.builder(String.format(MESSAGE_PREVIEW_FILE_SUCCESS, fileToPreview))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    .read()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    .setObject(viewableFile)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IOException | GeneralSecurityException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_PREVIEW_FILE_FAILURE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof PreviewFileCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((PreviewFileCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "niqiukun": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ReadCardCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CVC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Cvc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Reads a card identified using it\u0027s displayed description from the card book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class ReadCardCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"read\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + \" : Opens and accesses the card identified by \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + \"the description used in the display list. Checks against\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + \"provided CVC as second level of security\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + \"Parameters: d/DESCRIPTION v/CVC\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_DESCRIPTION + \"POSB Debit \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + PREFIX_CVC + \"023\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + \"Parameters: INDEX v/CVC\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_CVC + \"023\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final Cvc cvc;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public ReadCardCommand(Cvc cvc, Description description) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.cvc \u003d cvc;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.targetIndex \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public ReadCardCommand(Cvc cvc, Index index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.cvc \u003d cvc;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.description \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        List\u003cCard\u003e lastShownList \u003d model.getFilteredCardList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        assert((description !\u003d null) || (targetIndex !\u003d null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        Card cardToRead;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (targetIndex !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            cardToRead \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            if (!lastShownList.contains(new Card(description))) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            cardToRead \u003d lastShownList.get(lastShownList.indexOf(new Card(description)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (!cardToRead.getNonEncryptedCvc().equals(cvc.getNonEncryptedCvc())) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CVC_DISPLAYED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return CommandResult.builder(String.format(MESSAGE_SUCCESS, cardToRead.toNonAsterixString()))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .read()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .setObject(cardToRead)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .setIndex(targetIndex)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                || (other instanceof ReadCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 description.equals(((ReadCardCommand) other).description)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ReadCardCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ReadPasswordCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Reads a password identified using it\u0027s displayed index from the password book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class ReadPasswordCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"read\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \" : Opens and accesses the password identified by \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"the index number used in the display list. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"Parameters: INDEX (must be positive integer)\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Results are shown on the right panel. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"Use Copy command to copy password | username | website. \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + CopyPasswordCommand.COMMAND_WORD + \"/\" + CopyPasswordCommand.COMMAND_WORD1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \" [\" + CopyPasswordValueCommand.COMMAND_WORD + \"/\" + CopyPasswordValueCommand.COMMAND_WORD1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"] / [\" + CopyWebsiteCommand.COMMAND_WORD + \"/\" + CopyWebsiteCommand.COMMAND_WORD1"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"] / [\" + CopyUsernameCommand.COMMAND_WORD + \"/\" + CopyUsernameCommand.COMMAND_WORD1"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"]\" + \" INDEX \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"Example: \" + CopyPasswordCommand.COMMAND_WORD1 + \" \" + CopyPasswordValueCommand.COMMAND_WORD1 + \" 1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public ReadPasswordCommand(Index index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        List\u003cPassword\u003e lastShownList \u003d model.getFilteredPasswordList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PASSWORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password passwordToRead \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwordToRead.updateExpiry();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return CommandResult.builder(MESSAGE_SUCCESS)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .read()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .setObject(passwordToRead)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .setIndex(targetIndex)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 3,
      "hooncp": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.exceptions.InvalidRedoException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class RedoNoteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_REDO_ACKNOWLEDGEMENT \u003d \"Redone last action on Note Book as requested\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_REDO_FAILED \u003d \"No commands to redo!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "            model.redoNote();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "        } catch (InvalidRedoException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new CommandResult(MESSAGE_REDO_FAILED);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new CommandResult(MESSAGE_REDO_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemoveFileCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Removes a file identified using it\u0027s displayed index from the file book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class RemoveFileCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \": Remove the file identified by the index number from the displayed file list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"The actual file will not be deleted.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_DELETE_FILE_SUCCESS \u003d \"File removed from list: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public RemoveFileCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile fileToRemove \u003d FileCommandUtil.getFileWithIndex(targetIndex, model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        model.deleteFile(fileToRemove);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FILE_SUCCESS, fileToRemove));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof RemoveFileCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((RemoveFileCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "niqiukun": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RenameFileCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Renames a file identified using it\u0027s displayed index from the file book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class RenameFileCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rename\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \": Rename the file identified by the index number from the displayed file list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Parameters: INDEX NEW_FILENAME\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 Test\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_RENAME_FILE_SUCCESS \u003d \"File renamed: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_RENAME_FILE_FAILURE \u003d \"Cannot rename file.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Please make sure that the target file name is acceptable by your operating system.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_TARGET_FILE_EXISTS \u003d \"Cannot rename file. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Target file already exists.\\nRename %1$s and try again.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FILE \u003d \"Target file is already in the list.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final FileName newFileName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public RenameFileCommand(Index targetIndex, FileName newFileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.newFileName \u003d newFileName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private void checkIfTargetFileExists(EncryptedFile newFile) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (Files.exists(Path.of(newFile.getEncryptedPath()))) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_TARGET_FILE_EXISTS, newFile.getEncryptedPath()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private void checkIfTargetFileDuplicated(EncryptedFile newFile, Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (model.hasFile(newFile)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FILE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile fileToRename \u003d FileCommandUtil.getFileWithIndex(targetIndex, model);;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FileCommandUtil.checkIfFileExists(fileToRename, model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile newFile \u003d new EncryptedFile("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                FileName.constructWithExtension(newFileName.getFileNameWithoutExtention(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        fileToRename.getFileName().getExtension()),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                fileToRename.getFilePath(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                fileToRename.getFileStatus() \u003d\u003d FileStatus.CORRUPTED ? FileStatus.CORRUPTED : FileStatus.ACTIVE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                fileToRename.getTags(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                fileToRename.getEncryptedAt(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                fileToRename.getModifiedAt()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        checkIfTargetFileExists(newFile);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        checkIfTargetFileDuplicated(newFile, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        boolean success \u003d new File(fileToRename.getEncryptedPath()).renameTo("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                new File(newFile.getEncryptedPath()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!success) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_RENAME_FILE_FAILURE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        model.setFile(fileToRename, newFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_RENAME_FILE_SUCCESS, newFile));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof RenameFileCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((RenameFileCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "niqiukun": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORTBY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.SortByCond;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class SortNoteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String DATEMODIFIED \u003d \"DateModified\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String DATEADDED \u003d \"DateAdded\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String NUMOFACCESS \u003d \"NumOfAccess\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the notes \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"by the condition given by the user. \\n \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "        + \"[\" + PREFIX_SORTBY + DATEMODIFIED + \" or \" + DATEADDED + \" or \" + NUMOFACCESS + \" ] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_SORTBY + \"DateModified\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_SORT_NOTE_SUCCESS \u003d \"Sorted Note by: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_NOT_SORTED \u003d \"Must provide at one and only one field to sort by.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"This notebook is already sorted.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private SortByCond sortByCond;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param sortByCond condition to sort NoteBook by."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public SortNoteCommand(SortByCond sortByCond) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(sortByCond);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.sortByCond \u003d sortByCond;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "        model.commitNote();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Predicate\u003cNote\u003e notePredicate \u003d model.getFilteredNoteListPred();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "        model.editNoteSortByCond(sortByCond);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "        model.sortNoteBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "        model.updateFilteredNoteList(notePredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SORT_NOTE_SUCCESS, sortByCond.sortByCond));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jityong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!(other instanceof SortNoteCommand)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jityong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jityong"
        },
        "content": "        SortNoteCommand e \u003d (SortNoteCommand) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return sortByCond.equals(e.sortByCond);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.exceptions.InvalidUndoException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class UndoNoteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_UNDO_ACKNOWLEDGEMENT \u003d \"Undone last action on Note Book as requested\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_UNDO_FAILED \u003d \"No commands to undo!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "            model.undoNote();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "        } catch (InvalidUndoException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new CommandResult(MESSAGE_UNDO_FAILED);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new CommandResult(MESSAGE_UNDO_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCardCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_FIELDS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CARDNUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CVC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPIRYDATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.logic.commands.AddCardCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.CardNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Cvc;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.ExpiryDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Parses input arguments and creates a new AddCardCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class AddCardCommandParser implements Parser\u003cAddCardCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCardCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * and returns an AddCardCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public AddCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_CARDNUMBER, PREFIX_CVC,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                        PREFIX_EXPIRYDATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_CARDNUMBER, PREFIX_CVC, PREFIX_EXPIRYDATE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_DESCRIPTION).size() \u003e 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                || argMultimap.getAllValues(PREFIX_CARDNUMBER).size() \u003e 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                || argMultimap.getAllValues(PREFIX_CVC).size() \u003e 1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                || argMultimap.getAllValues(PREFIX_EXPIRYDATE).size() \u003e 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_DUPLICATE_FIELDS, AddCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Description description \u003d ParserUtil.parseCardDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        CardNumber cardNumber \u003d ParserUtil.parseCardNumber(argMultimap.getValue(PREFIX_CARDNUMBER).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        Cvc cvc \u003d ParserUtil.parseCvc(argMultimap.getValue(PREFIX_CVC).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        ExpiryDate expiryDate \u003d ParserUtil.parseExpiryDate(argMultimap.getValue(PREFIX_EXPIRYDATE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        Card card \u003d new Card(description, cardNumber, cvc, expiryDate, tagList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return new AddCardCommand(card);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 63,
      "jityong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddFileCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.AddFileCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FilePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Parses input arguments and creates a new AddFileCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class AddFileCommandParser implements Parser\u003cAddFileCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public AddFileCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            String fullPath \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            FileName fileName \u003d ParserUtil.parseFileName(fullPath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            FilePath filePath \u003d ParserUtil.parseFilePath(fullPath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            EncryptedFile file \u003d new EncryptedFile(fileName, filePath, tagList, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new AddFileCommand(file);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFileCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.AddNotesCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class AddNoteCommandParser implements Parser\u003cAddNotesCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * and returns an AddNotesCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public AddNotesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_TAG, PREFIX_CONTENT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_TAG, PREFIX_CONTENT)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNotesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Description description \u003d ParserUtil.parseNoteDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Content content \u003d ParserUtil.parseContent(argMultimap.getValue(PREFIX_CONTENT).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Note note \u003d new Note(title, description, tagList, content);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new AddNotesCommand(note);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddPasswordCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_FIELDS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TOO_MANY_TAG_FIELDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORDVALUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.AddPasswordCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordModifiedAt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordValue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Username;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Website;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Parses input arguments and creates a new AddCommandPassword object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class AddPasswordCommandParser implements Parser\u003cAddPasswordCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPasswordCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * and returns an AddPasswordCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public AddPasswordCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        PREFIX_USERNAME, PREFIX_PASSWORDVALUE, PREFIX_WEBSITE, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_USERNAME, PREFIX_PASSWORDVALUE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_DESCRIPTION).size() \u003e 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                || argMultimap.getAllValues(PREFIX_USERNAME).size() \u003e 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                || argMultimap.getAllValues(PREFIX_PASSWORDVALUE).size() \u003e 1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                || argMultimap.getAllValues(PREFIX_WEBSITE).size() \u003e 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_DUPLICATE_FIELDS, AddPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        PasswordDescription passwordDescription \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                ParserUtil.parsePasswordDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Username username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        PasswordValue passwordValue \u003d ParserUtil.parsePasswordValue(argMultimap.getValue(PREFIX_PASSWORDVALUE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        PasswordModifiedAt passwordModifiedAt \u003d new PasswordModifiedAt(new Date());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Website website \u003d ParserUtil.parseWebsite(argMultimap.getValue(PREFIX_WEBSITE).orElse(\"NIL\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_TAG).size() \u003e 5) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_TOO_MANY_TAG_FIELDS, AddPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password password \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Password(passwordDescription, username, passwordValue, passwordModifiedAt, website, tagList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new AddPasswordCommand(password);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case GoToCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new GoToCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 4,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AnalysePasswordCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STRONG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.logic.commands.AnalysePasswordCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.logic.commands.AnalyseStrongPasswordCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Parses input arguments and creates a new AnalysePasswordCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class AnalysePasswordCommandParser implements Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AnalysePasswordCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * and returns a AnlaysePasswordCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public AnalysePasswordCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (userInput.equals(\"\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return new AnalysePasswordCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_STRONG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (!isPrefixPresent(argMultimap, PREFIX_STRONG)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                                                AnalysePasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STRONG).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return new AnalyseStrongPasswordCommand(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    AnalysePasswordCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static boolean isPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */ //todo should this be an error?"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CardBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.logic.commands.AddCardCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.logic.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.logic.commands.ReadCardCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class CardBookParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        case AddCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return new AddCardCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        case DeleteCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return new DeleteCardCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "        case GoToCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new GoToCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        case ReadCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return new ReadCardCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 56,
      "jityong": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final Prefix PREFIX_CARDNUMBER \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final Prefix PREFIX_CVC \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final Prefix PREFIX_EXPIRYDATE \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"ti/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final Prefix PREFIX_SORTBY \u003d new Prefix(\"by/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final Prefix PREFIX_CONTENT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final Prefix PREFIX_PASSWORDVALUE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final Prefix PREFIX_WEBSITE \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static final Prefix PREFIX_STRONG \u003d new Prefix(\"strong/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /* Prefix definitions for password generator */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static final Prefix PREFIX_LOWER \u003d new Prefix(\"lower/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static final Prefix PREFIX_UPPER \u003d new Prefix(\"upper/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static final Prefix PREFIX_NUM \u003d new Prefix(\"num/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static final Prefix PREFIX_SPECIAL \u003d new Prefix(\"special/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static final Prefix PREFIX_LENGTH \u003d new Prefix(\"length/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 4,
      "jityong": 3,
      "eejian97": 7,
      "hooncp": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CopyPasswordCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.CopyPasswordCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.CopyPasswordValueCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.CopyUsernameCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.CopyWebsiteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Parses input arguments and creates a new CopyPassword object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class CopyPasswordCommandParser implements Parser\u003cCopyPasswordCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CopyCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * and returns a CopyCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public CopyPasswordCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            case CopyPasswordValueCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            case CopyPasswordValueCommand.COMMAND_WORD1:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                return new CopyPasswordValueCommand(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            case CopyWebsiteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            case CopyWebsiteCommand.COMMAND_WORD1:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                return new CopyWebsiteCommand(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            case CopyUsernameCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            case CopyUsernameCommand.COMMAND_WORD1:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                return new CopyUsernameCommand(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DecryptFileCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.DecryptFileCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Parses input arguments and creates a new DecryptFileCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class DecryptFileCommandParser implements FileCommandParser\u003cDecryptFileCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public DecryptFileCommand parse(String args, String password) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new DecryptFileCommand(index, password);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DecryptFileCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCardCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.logic.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Parses input arguments and creates a new DeleteCardCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class DeleteCardCommandParser implements Parser\u003cDeleteCardCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCardCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * and returns a DeleteCardCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public DeleteCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return new DeleteCardCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        } catch (ParseException ipe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "                Description description \u003d ParserUtil.parseCardDescription(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                return new DeleteCardCommand(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            } catch (ParseException dpe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCardCommand.MESSAGE_USAGE), dpe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 33,
      "jityong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.DeleteNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class DeleteNoteCommandParser implements Parser\u003cDeleteNoteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public DeleteNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new DeleteNoteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteNoteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeletePasswordCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.DeletePasswordCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Parses input arguments and creates a new DeletePasswordCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class DeletePasswordCommandParser implements Parser\u003cDeletePasswordCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeletePasswordCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * and returns a DeletePasswordCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public DeletePasswordCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return new DeletePasswordCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.EditNoteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class EditNoteCommandParser implements Parser\u003cEditNoteCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditNoteCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public EditNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_TAG, PREFIX_CONTENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditNoteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor editNoteDescriptor \u003d new EditNoteCommand.EditNoteDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "            editNoteDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "            editNoteDescriptor.setDescription(ParserUtil.parseNoteDescription(argMultimap.getValue(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTENT).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "            String temp \u003d argMultimap.getValue(PREFIX_CONTENT).get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "            editNoteDescriptor.setContent(ParserUtil.parseContent(argMultimap.getValue(PREFIX_CONTENT).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editNoteDescriptor::setTags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!editNoteDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new ParseException(EditNoteCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new EditNoteCommand(index, editNoteDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jityong"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditPasswordCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_FIELDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TOO_MANY_TAG_FIELDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORDVALUE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.AddPasswordCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.EditPasswordCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.EditPasswordCommand.EditPasswordDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Parses input arguments and creates a new EditPasswordCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class EditPasswordCommandParser implements Parser\u003cEditPasswordCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditPasswordCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * and returns an EditPasswordCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public EditPasswordCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_DESCRIPTION, PREFIX_USERNAME, PREFIX_WEBSITE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        PREFIX_PASSWORDVALUE, PREFIX_TAG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    EditPasswordCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_DESCRIPTION).size() \u003e 1"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                || argMultimap.getAllValues(PREFIX_USERNAME).size() \u003e 1"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                || argMultimap.getAllValues(PREFIX_PASSWORDVALUE).size() \u003e 1"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                || argMultimap.getAllValues(PREFIX_WEBSITE).size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_DUPLICATE_FIELDS, AddPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_TAG).size() \u003e 5) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_TOO_MANY_TAG_FIELDS, EditPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        EditPasswordDescriptor editPasswordDescriptor \u003d new EditPasswordDescriptor();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            editPasswordDescriptor.setPasswordDescription("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    ParserUtil.parsePasswordDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (argMultimap.getValue(PREFIX_USERNAME).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            editPasswordDescriptor.setUsername("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PASSWORDVALUE).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            editPasswordDescriptor.setPasswordValue("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    ParserUtil.parsePasswordValue(argMultimap.getValue(PREFIX_PASSWORDVALUE).get()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WEBSITE).isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            editPasswordDescriptor.setWebsite("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    ParserUtil.parseWebsite(argMultimap.getValue(PREFIX_WEBSITE).get()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPasswordDescriptor::setTags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!editPasswordDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException(EditPasswordCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new EditPasswordCommand(index, editPasswordDescriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EncryptFileCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.EncryptFileCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FilePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Parses input arguments and creates a new EncryptFileCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class EncryptFileCommandParser implements FileCommandParser\u003cEncryptFileCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public EncryptFileCommand parse(String args, String password) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            String fullPath \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            FileName fileName \u003d ParserUtil.parseFileName(fullPath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            FilePath filePath \u003d ParserUtil.parseFilePath(fullPath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            EncryptedFile file \u003d new EncryptedFile(fileName, filePath, tagList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new EncryptFileCommand(file, password);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EncryptFileCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FileBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.AddFileCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.DecryptFileCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.EncryptFileCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.FindFileCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.ListFileCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.MoveFileCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.PreviewFileCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.RemoveFileCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.RenameFileCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Parses user input for file book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FileBookParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Initialises a FileBookParser with a given password for file encryption."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FileBookParser(String password) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case EncryptFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new EncryptFileCommandParser().parse(arguments, password);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case DecryptFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new DecryptFileCommandParser().parse(arguments, password);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case PreviewFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new PreviewFileCommandParser().parse(arguments, password);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case AddFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new AddFileCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case RemoveFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new RemoveFileCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case FindFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new FindFileCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case RenameFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new RenameFileCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case MoveFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new MoveFileCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case GoToCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new GoToCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case ListFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new ListFileCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FileCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public interface FileCommandParser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    T parse(String userInput, String password) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "niqiukun": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindFileCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.FindFileCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FullPathContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Parses input arguments and creates a new FindFileCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FindFileCommandParser implements Parser\u003cFindFileCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindFileCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * and returns a FindFileCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FindFileCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindFileCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new FindFileCommand(new FullPathContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.FindNoteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class FindNoteCommandParser implements Parser\u003cFindNoteCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public FindNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new FindNoteCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindPasswordCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.model.password.PasswordDescription.isValidDescription;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.FindPasswordCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Parses input arguments and creates a new FindPasswordCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class FindPasswordCommandParser implements Parser\u003cFindPasswordCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public FindPasswordCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!isValidDescription(trimmedArgs)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException(FindPasswordCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new FindPasswordCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GeneratePasswordCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LENGTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOWER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_UPPER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.logic.commands.GeneratePasswordCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.logic.commands.GeneratePasswordCommand.PasswordGeneratorDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Parses input arguments and creates a new GeneratePasswordCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class GeneratePasswordCommandParser implements Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public GeneratePasswordCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_LENGTH, PREFIX_LOWER,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                                                    PREFIX_UPPER, PREFIX_NUM, PREFIX_SPECIAL);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (!anyPrefixesPresent(argMultimap, PREFIX_LENGTH, PREFIX_LOWER, PREFIX_UPPER, PREFIX_NUM, PREFIX_SPECIAL)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            \u0026\u0026 !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                                                                            GeneratePasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        //returns default settings password generation settings if all empty"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (!anyPrefixesPresent(argMultimap, PREFIX_LENGTH, PREFIX_LOWER, PREFIX_UPPER, PREFIX_NUM, PREFIX_SPECIAL)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return new GeneratePasswordCommand(PasswordGeneratorDescriptor.getDefaultConfiguration());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        PasswordGeneratorDescriptor description \u003d new PasswordGeneratorDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LENGTH).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            description.setLength(ParserUtil.parseLength(argMultimap.getValue(PREFIX_LENGTH).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOWER).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            description.setLower(ParserUtil.parseBool(argMultimap.getValue(PREFIX_LOWER).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_UPPER).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            description.setUpper(ParserUtil.parseBool(argMultimap.getValue(PREFIX_UPPER).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NUM).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            description.setNum(ParserUtil.parseBool(argMultimap.getValue(PREFIX_NUM).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SPECIAL).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            description.setSpecial(ParserUtil.parseBool(argMultimap.getValue(PREFIX_SPECIAL).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return new GeneratePasswordCommand(description);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static boolean anyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GoToCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.Mode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class GoToCommandParser implements Parser\u003cGoToCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public GoToCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        String mode \u003d args.trim().toLowerCase();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case \"password\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new GoToCommand(Mode.PASSWORD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case \"file\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new GoToCommand(Mode.FILE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case \"note\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new GoToCommand(Mode.NOTE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case \"card\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new GoToCommand(Mode.CARD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoToCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MoveFileCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.MoveFileCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FilePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Parses input arguments and creates a new MoveFileCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class MoveFileCommandParser implements Parser\u003cMoveFileCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MoveFileCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * and returns a MoveFileCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public MoveFileCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(trimmedArgs.split(\" \")[0]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            if (trimmedArgs.indexOf(\u0027 \u0027) \u003d\u003d -1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                throw new ParseException(\"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            FilePath newPath \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    new FilePath(Path.of(trimmedArgs.substring(trimmedArgs.indexOf(\u0027 \u0027) + 1)).toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new MoveFileCommand(index, newPath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MoveFileCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NoteBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.AddNotesCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.ClearNoteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.DeleteNoteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.EditNoteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.FindNoteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.ListNoteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.OpenNoteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.RedoNoteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.SortNoteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.UndoNoteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class NoteBookParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\", Pattern.DOTALL);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "        case AddNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new AddNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "        case EditNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new EditNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": "        case DeleteNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new DeleteNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jityong"
        },
        "content": "        case OpenNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new ReadNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jityong"
        },
        "content": "        case ClearNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new ClearNoteCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jityong"
        },
        "content": "        case FindNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new FindNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jityong"
        },
        "content": "        case ListNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new ListNoteCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jityong"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jityong"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jityong"
        },
        "content": "        case GoToCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new GoToCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jityong"
        },
        "content": "        case SortNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new SortNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jityong"
        },
        "content": "        case UndoNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new UndoNoteCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jityong"
        },
        "content": "        case RedoNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new RedoNoteCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jityong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.util.GeneratorUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.CardNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Cvc;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.ExpiryDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FilePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.SortByCond;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordDescription;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordValue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Username;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Website;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static seedu.address.model.card.Description parseCardDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!seedu.address.model.card.Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new seedu.address.model.card.Description(trimmedDescription);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Parses a {@code String cardNumber} into a {@code CardNumber}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @throws ParseException if the given {@code cardNumber} is invalid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static CardNumber parseCardNumber(String cardNumber) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(cardNumber);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        String trimmedCardNumber \u003d cardNumber.trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (!CardNumber.isValidCardNumber(trimmedCardNumber)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new ParseException(CardNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return new CardNumber(trimmedCardNumber);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Parses a {@code String cvc} into a {@code Cvc}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @throws ParseException if the given {@code cvc} is invalid."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static Cvc parseCvc(String cvc) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(cvc);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        String trimmedCvc \u003d cvc.trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (!Cvc.isValidCvc(trimmedCvc)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException(Cvc.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return new Cvc(trimmedCvc);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Parses a {@code String expiryDate} into a {@code ExpiryDate}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @throws ParseException if the given {@code expiryDate} is invalid."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static ExpiryDate parseExpiryDate(String expiryDate) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(expiryDate);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        String trimmedExpiryDate \u003d expiryDate.trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (!ExpiryDate.isValidDate(trimmedExpiryDate)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new ParseException(ExpiryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (!ExpiryDate.isValidExpiryDate(trimmedExpiryDate)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new ParseException(ExpiryDate.PAST_EXPIRY_ERROR);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return new ExpiryDate(trimmedExpiryDate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses a {@code String fullPath} into a {@code FileName}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if the given {@code fullPath} does not contain valid file name."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static FileName parseFileName(String fullPath) throws ParseException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(fullPath);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        String fileName \u003d Path.of(fullPath).getFileName().toString();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!FileName.isValidFileName(fileName)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new ParseException(FileName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new FileName(fileName);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses a {@code String fullPath} into a {@code FilePath}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static FilePath parseFilePath(String fullPath) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(fullPath);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Optional\u003cPath\u003e parentPath \u003d Optional.ofNullable(Path.of(fullPath).getParent());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (parentPath.isPresent()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new FilePath(parentPath.get().toString());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new FilePath(\"\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //Notes \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jityong"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static seedu.address.model.note.Description parseNoteDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jityong"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!seedu.address.model.note.Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new seedu.address.model.note.Description(trimmedDescription);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Parses a {@code String content} into a {@code Content}."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @throws ParseException if the given {@code content} is invalid."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static Content parseContent(String content) throws ParseException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jityong"
        },
        "content": "        String trimmedContent \u003d content.trim();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!Content.isValidContent(trimmedContent)) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new ParseException(Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new Content(trimmedContent);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Parses a {@code String sortByCond} into a {@Code SortByCond}."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @throws ParseException if the given {@code sortByCond} is invalid."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static SortByCond parseSortByCond(String sortByCond) throws ParseException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(sortByCond);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jityong"
        },
        "content": "        String trimmedSortByCond \u003d sortByCond.trim();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!SortByCond.isValidSortByCond(trimmedSortByCond)) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new ParseException(SortByCond.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new SortByCond(trimmedSortByCond);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static PasswordDescription parsePasswordDescription(String description)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!PasswordDescription.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            PasswordDescription.MESSAGE_CONSTRAINTS + PasswordDescription.ADDITIONAL_INFORMATION);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new PasswordDescription(trimmedDescription);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Parses a {@code String username} into a {@code Username}."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @throws ParseException if the given {@code Username} is invalid."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static Username parseUsername(String username) throws ParseException {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String trimmedUsername \u003d username.trim();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!Username.isValidUsername(trimmedUsername)) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException(Username.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new Username(trimmedUsername);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Parses a {@code String passwordValue} into a {@code PasswordValue}."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @throws ParseException if the given {@code PasswordValue} is invalid."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static PasswordValue parsePasswordValue(String passwordValue) throws ParseException {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(passwordValue);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String trimmedPasswordValue \u003d passwordValue.trim();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!PasswordValue.isValidPasswordValue(trimmedPasswordValue)) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException(PasswordValue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new PasswordValue(trimmedPasswordValue);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Parses a {@code String website} into a {@code Website}."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @throws ParseException if the given {@code Website} is invalid."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static Website parseWebsite(String website) throws ParseException {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(website);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        String trimmedWebsite \u003d website.trim();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!Website.isValidWebsite(trimmedWebsite)) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException(Website.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new Website(trimmedWebsite);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Parses a string length into an integer length."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Checks that length requirements are met."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @throws ParseException if the given length is invalid."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static int parseLength(String length) throws ParseException {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            int lengthNum \u003d Integer.parseInt(length);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            if (lengthNum \u003c\u003d 3) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                throw new ParseException(GeneratorUtil.MESSAGE_CONSTRAINTS_LENGTH);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return lengthNum;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new ParseException(GeneratorUtil.MESSAGE_CONSTRAINTS_LENGTH);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Parses a string bool into an Boolean value."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Checks that string bool is valid argument."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @throws ParseException if the given length is invalid."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static boolean parseBool(String bool) throws ParseException {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (!(bool.equals(\"true\") || bool.equals(\"false\"))) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            throw new ParseException(GeneratorUtil.MESSAGE_CONSTRAINTS_BOOLEAN);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return Boolean.valueOf(bool);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 31,
      "yhtingg": 63,
      "jityong": 64,
      "eejian97": 32,
      "hooncp": 68,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PasswordBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.AddPasswordCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.logic.commands.AnalysePasswordCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.CopyPasswordCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.DeletePasswordCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.EditPasswordCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.FindPasswordCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.logic.commands.GeneratePasswordCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.ListPasswordCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.ReadPasswordCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class PasswordBookParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case AddPasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return new AddPasswordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case DeletePasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return new DeletePasswordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case ReadPasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return new ReadPasswordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case EditPasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return new EditPasswordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case ListPasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return new ListPasswordCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case FindPasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return new FindPasswordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case GoToCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return new GoToCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        case AnalysePasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return new AnalysePasswordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        case GeneratePasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return new GeneratePasswordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case CopyPasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case CopyPasswordCommand.COMMAND_WORD1:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return new CopyPasswordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 6,
      "hooncp": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PreviewFileCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.PreviewFileCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Parses input arguments and creates a new PreviewFileCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class PreviewFileCommandParser implements FileCommandParser\u003cPreviewFileCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PreviewFileCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * and returns a PreviewFileCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public PreviewFileCommand parse(String args, String password) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new PreviewFileCommand(index, password);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PreviewFileCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ReadCardCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_FIELDS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXCESS_CARD_FIELDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CVC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.logic.commands.ReadCardCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Cvc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class ReadCardCommandParser implements Parser\u003cReadCardCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReadCardCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * and returns an ReadCardCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public ReadCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CVC, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        assert(arePrefixesPresent(argMultimap, PREFIX_CVC));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        // runs if description and preamble are both absent or if they are both present"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if ((!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 argMultimap.getPreamble().isEmpty())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            || (arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 !argMultimap.getPreamble().isEmpty())) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_EXCESS_CARD_FIELDS, ReadCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_DESCRIPTION).size() \u003e 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                || argMultimap.getAllValues(PREFIX_CVC).size() \u003e 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_DUPLICATE_FIELDS, ReadCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        Cvc cvc \u003d ParserUtil.parseCvc(argMultimap.getValue(PREFIX_CVC).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            Description description \u003d ParserUtil.parseCardDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return new ReadCardCommand(cvc, description);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                return new ReadCardCommand(cvc, index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReadCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ReadNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.OpenNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class ReadNoteCommandParser implements Parser\u003cOpenNoteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public OpenNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new OpenNoteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenNoteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jityong": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ReadPasswordCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.commands.ReadPasswordCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Parses input arguments and creates a new ReadPasswordCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class ReadPasswordCommandParser implements Parser\u003cReadPasswordCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReadPasswordCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * and returns a ReadPasswordCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public ReadPasswordCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return new ReadPasswordCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReadPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemoveFileCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.RemoveFileCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Parses input arguments and creates a new DecryptFileCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class RemoveFileCommandParser implements Parser\u003cRemoveFileCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public RemoveFileCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new RemoveFileCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveFileCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RenameFileCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.RenameFileCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Parses input arguments and creates a new RenameFileCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class RenameFileCommandParser implements Parser\u003cRenameFileCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RenameFileCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * and returns a RenameFileCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public RenameFileCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(trimmedArgs.split(\" \")[0]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            if (trimmedArgs.indexOf(\u0027 \u0027) \u003d\u003d -1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                throw new ParseException(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            FileName newName \u003d new FileName(trimmedArgs.substring(trimmedArgs.indexOf(\u0027 \u0027) + 1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new RenameFileCommand(index, newName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RenameFileCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORTBY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.SortNoteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.SortByCond;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class SortNoteCommandParser implements Parser\u003cSortNoteCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditNoteCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public SortNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SORTBY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SORTBY)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "        SortByCond sortByCond \u003d ParserUtil.parseSortByCond(argMultimap.getValue(PREFIX_SORTBY).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new SortNoteCommand(sortByCond);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson (Person p) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jityong": 5,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CardBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.UniqueCardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Duplicates are not allowed (by .isSameCard comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class CardBook implements ReadOnlyCardBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final UniqueCardList cards;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        cards \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public CardBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Creates an CardBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public CardBook(ReadOnlyCardBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Replaces the contents of the card list with {@code cards}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * {@code cards} must not contain duplicate cards."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void setCards(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.cards.setCards(cards);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Resets the existing data of this {@code CardBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @param newData"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void resetData(ReadOnlyCardBook newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        setCards(newData.getCardList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    //// card-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns true if a card with the same identity as {@code card} exists in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return cards.contains(card);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns true if a card with the same identity as {@code card} exists in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean hasCardDescription(Card card) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return cards.containsDescription(card);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Adds a card to the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * The card must not already exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void addCard(Card c) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        cards.add(c);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void removeCard(Card key) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        cards.remove(key);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public ObservableList\u003cCard\u003e getCardList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return cards.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return cards.asUnmodifiableObservableList().size() + \" cards\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                || (other instanceof CardBook // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 cards.equals(((CardBook) other).cards));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return cards.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/FileBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileStatus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.UniqueFileList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Wraps all data at the file-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FileBook implements ReadOnlyFileBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final UniqueFileList files;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Creates an empty FileBook."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FileBook() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        files \u003d new UniqueFileList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Creates a FileBook using the Files in the {@code toBeCopied}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FileBook(ReadOnlyFileBook toBeCopied) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Replaces the contents of the file list with {@code files}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * {@code files} must not contain duplicate files."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFiles(List\u003cEncryptedFile\u003e files) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.files.setFiles(files);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Resets the existing data of this {@code FileBook} with {@code newData}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void resetData(ReadOnlyFileBook newData) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        setFiles(newData.getFileList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns true if a file with the same identity as {@code file} exists in the file book."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean hasFile(EncryptedFile file) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return files.contains(file);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Adds a file to the file book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * The file must not already exist in the file book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void addFile(EncryptedFile p) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        files.add(p);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Replaces the given file {@code target} in the list with {@code editedFile}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * The file identity of {@code editedFile} must not be the same as another existing file in the file book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFile(EncryptedFile target, EncryptedFile editedFile) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(editedFile);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        files.setFile(target, editedFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Sets the status of the given file to the new status specified."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFileStatus(EncryptedFile target, FileStatus newStatus) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(newStatus);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        files.setFileStatus(target, newStatus);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Removes {@code key} from this {@code FileBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * {@code key} must exist in the file book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void removeFile(EncryptedFile key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        files.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return files.asUnmodifiableObservableList().size() + \" files\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ObservableList\u003cEncryptedFile\u003e getFileList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return files.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof FileBook // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 files.equals(((FileBook) other).files));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return files.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileStatus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.SortByCond;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    Predicate\u003cEncryptedFile\u003e PREDICATE_SHOW_ALL_FILES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    Predicate\u003cCard\u003e PREDICATE_SHOW_ALL_CARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "    Predicate\u003cNote\u003e PREDICATE_SHOW_ALL_NOTES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    Predicate\u003cPassword\u003e PREDICATE_SHOW_ALL_PASSWORDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Replaces file book data with the data in {@code fileBook}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void setFileBook(ReadOnlyFileBook fileBook);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns the FileBook"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    ReadOnlyFileBook getFileBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns true if a file with the same identity as {@code file} exists in the file book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    boolean hasFile(EncryptedFile file);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Deletes the given file."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * The file must exist in the address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void deleteFile(EncryptedFile target);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Adds the given file."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * {@code person} must not already exist in the file book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void addFile(EncryptedFile file);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Replaces the given file {@code target} with {@code editedFile}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * {@code target} must exist in the file book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * The file identity of {@code editedPerson} must not be the same as another existing file in the file book."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void setFile(EncryptedFile target, EncryptedFile editedFile);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Sets the status of the given file to the new status specified."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void setFileStatus(EncryptedFile target, FileStatus newStatus);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns an unmodifiable view of the filtered file list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    ObservableList\u003cEncryptedFile\u003e getFilteredFileList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Updates the filter of the filtered file list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void updateFilteredFileList(Predicate\u003cEncryptedFile\u003e predicate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns the user prefs\u0027 file book file path."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    Path getFileBookFilePath();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns the user prefs\u0027 card book file path."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    Path getCardBookFilePath();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Sets the user prefs\u0027 card book file path."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    void setCardBookFilePath(Path cardBookFilePath);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Replaces card book data with the data in {@code cardBook}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    void setCardBook(ReadOnlyCardBook cardBook);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    ReadOnlyCardBook getCardBook();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns true if a card with the same identity as {@code card} exists in the card book."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    boolean hasCard(Card card);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns true if a card with the same description as {@code card} exists in the card book."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    boolean hasCardDescription(Card card);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Deletes the given card."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * The card must exist in the card book."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    void deleteCard(Card target);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Adds the given card."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * {@code card} must not already exist in the app."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    void addCard(Card card);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns an unmodifiable view of the filtered card list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    ObservableList\u003cCard\u003e getFilteredCardList();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Updates the filter of the filtered card list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    void updateFilteredCardList(Predicate\u003cCard\u003e predicate);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jityong"
        },
        "content": "    // NOTE"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns the NoteBook"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jityong"
        },
        "content": "    ReadOnlyNoteBook getNoteBook();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Replaces note book data with the data in {@code noteBook}."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jityong"
        },
        "content": "    void setNoteBook(ReadOnlyNoteBook noteBook);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns true if a note with the same identity as {@code note} exists in the note book."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jityong"
        },
        "content": "    boolean hasNote(Note note);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Deletes the given note."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * The note must exist in the Note book."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jityong"
        },
        "content": "    void deleteNote(Note target);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Updates the given note."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * The note must exist in the Note book."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jityong"
        },
        "content": "    void addNote(Note note);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Replaces the given note {@code target} with {@code editedNote}."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * The note identity of {@code editedNote} must not be the same as another existing note in the note book."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jityong"
        },
        "content": "    void setNote(Note target, Note editedNote);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns an unmodifiable view of the filtered note list"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jityong"
        },
        "content": "    ObservableList\u003cNote\u003e getFilteredNoteList();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Updates the filter of the filtered note list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jityong"
        },
        "content": "    void updateFilteredNoteList(Predicate\u003cNote\u003e predicate);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jityong"
        },
        "content": "    Predicate\u003cNote\u003e getFilteredNoteListPred();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jityong"
        },
        "content": "    Path getNoteBookFilePath();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jityong"
        },
        "content": "    void setNoteBookFilePath(Path noteBookFilePath);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jityong"
        },
        "content": "    void sortNoteBook();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jityong"
        },
        "content": "    void editNoteSortByCond(SortByCond sortByCond);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jityong"
        },
        "content": "    void undoNote();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jityong"
        },
        "content": "    void redoNote();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jityong"
        },
        "content": "    void commitNote();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jityong"
        },
        "content": "    Index getNoteIndex(Note note);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    ObservableList\u003cPassword\u003e getFilteredPasswordList();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    void updateFilteredPasswordList(Predicate\u003cPassword\u003e predicate);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    void addPassword(Password password);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    void deletePassword(Password password);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns the PasswordBook"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    PasswordBook getPasswordBook();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns true if a password with the same identity as {@code password} exists in the password book."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    boolean hasPassword(Password password);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Sets the user prefs\u0027 password book file path."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    void setPasswordBookFilePath(Path passwordBookFilePath);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns the user prefs\u0027 password book file path."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    Path getPasswordBookFilePath();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Replaces the given password {@code target} with {@code editedPassword}."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * {@code target} must exist in the password book."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * The password identity of {@code editedPassword} must not be the same as another existing password"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * in the password book."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    void setPassword(Password target, Password editedPassword);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 53,
      "yhtingg": 51,
      "jityong": 98,
      "hooncp": 46,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.SortByCond;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final FileBook fileBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final CardBook cardBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final VersionedNoteBook noteBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final PasswordBook passwordBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final FilteredList\u003cEncryptedFile\u003e filteredFiles;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final FilteredList\u003cCard\u003e filteredCards;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final FilteredList\u003cNote\u003e filteredNotes;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final FilteredList\u003cPassword\u003e filteredPasswords;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyFileBook fileBook,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                        ReadOnlyCardBook cardBook, ReadOnlyNoteBook noteBook, ReadOnlyPasswordBook passwordBook,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireAllNonNull(addressBook, fileBook, cardBook, passwordBook, userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                + \" and file book: \" + fileBook"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                + \" and card book: \" + cardBook"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "                + \" and note book: \" + noteBook"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                + \" and password book: \" + passwordBook"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                + \" and user prefs: \" + userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.fileBook \u003d new FileBook(fileBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.cardBook \u003d new CardBook(cardBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.noteBook \u003d new VersionedNoteBook(noteBook);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.passwordBook \u003d new PasswordBook(passwordBook);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        filteredFiles \u003d new FilteredList\u003c\u003e(this.fileBook.getFileList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        filteredCards \u003d new FilteredList\u003c\u003e(this.cardBook.getCardList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jityong"
        },
        "content": "        filteredNotes \u003d new FilteredList\u003c\u003e(this.noteBook.getNoteList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        filteredPasswords \u003d new FilteredList\u003c\u003e(this.passwordBook.getPasswordList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this(addressBook, new FileBook(), new CardBook(), new VersionedNoteBook(), new PasswordBook(), userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this(new AddressBook(), new FileBook(), new CardBook(), new VersionedNoteBook(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": "                new PasswordBook(), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Path getNoteBookFilePath() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return userPrefs.getNoteBookFilePath();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void setNoteBookFilePath(Path noteBookFilePath) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(noteBookFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jityong"
        },
        "content": "        userPrefs.setAddressBookFilePath(noteBookFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Path getCardBookFilePath() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return userPrefs.getCardBookFilePath();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void setCardBookFilePath(Path cardBookFilePath) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(cardBookFilePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        userPrefs.setCardBookFilePath(cardBookFilePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FileBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFileBook(ReadOnlyFileBook fileBook) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.fileBook.resetData(fileBook);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ReadOnlyFileBook getFileBook() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return fileBook;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean hasFile(EncryptedFile file) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return fileBook.hasFile(file);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void deleteFile(EncryptedFile target) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fileBook.removeFile(target);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void addFile(EncryptedFile file) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fileBook.addFile(file);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFile(EncryptedFile target, EncryptedFile editedFile) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireAllNonNull(target, editedFile);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fileBook.setFile(target, editedFile);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFileStatus(EncryptedFile target, FileStatus newStatus) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireAllNonNull(target, newStatus);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fileBook.setFileStatus(target, newStatus);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Path getFileBookFilePath() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return userPrefs.getFileBookFilePath();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Card \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void setCardBook(ReadOnlyCardBook cardBook) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.cardBook.resetData(cardBook);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public ReadOnlyCardBook getCardBook() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return cardBook;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return cardBook.hasCard(card);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean hasCardDescription(Card card) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireAllNonNull(card);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return cardBook.hasCardDescription(card);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        cardBook.removeCard(target);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void addCard(Card card) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        cardBook.addCard(card);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered File List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code EncryptedFile} backed by the internal list of"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * {@code versionedFileBook}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ObservableList\u003cEncryptedFile\u003e getFilteredFileList() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return filteredFiles;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void updateFilteredFileList(Predicate\u003cEncryptedFile\u003e predicate) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        filteredFiles.setPredicate(predicate);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Card List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Card} backed by the internal list of"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * {@code versionedCardBook}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return filteredCards;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        filteredCards.setPredicate(predicate);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public ObservableList\u003cPassword\u003e getFilteredPasswordList() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return filteredPasswords;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void updateFilteredPasswordList(Predicate\u003cPassword\u003e predicate) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        filteredPasswords.setPredicate(predicate);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PasswordBook List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void addPassword(Password password) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwordBook.addPassword(password);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void deletePassword(Password password) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwordBook.removePassword(password);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public PasswordBook getPasswordBook() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return passwordBook;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean hasPassword(Password password) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return passwordBook.hasPassword(password);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void setPasswordBookFilePath(Path passwordBookFilePath) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(passwordBookFilePath);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        userPrefs.setAddressBookFilePath(passwordBookFilePath);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Path getPasswordBookFilePath() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return userPrefs.getPasswordBookFilePath();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void setPassword(Password target, Password editedPassword) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireAllNonNull(target, editedPassword);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwordBook.setPassword(target, editedPassword);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 filteredFiles.equals(other.filteredFiles)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 filteredCards.equals(other.filteredCards);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public ReadOnlyNoteBook getNoteBook() {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return noteBook;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void setNoteBook(ReadOnlyNoteBook noteBook) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.noteBook.resetData(noteBook);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return noteBook.hasNote(note);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void deleteNote(Note note) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteBook.removeNote(note);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteBook.addNote(note);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jityong"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireAllNonNull(target, editedNote);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteBook.setNote(target, editedNote);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return filteredNotes;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void sortNoteBook() {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteBook.sortNotes();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void editNoteSortByCond(SortByCond sortByCond) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteBook.setSortByCond(sortByCond);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jityong"
        },
        "content": "        filteredNotes.setPredicate(predicate);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Predicate\u003cNote\u003e getFilteredNoteListPred() {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if ((Predicate\u003cNote\u003e) filteredNotes.getPredicate() \u003d\u003d null) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jityong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return (Predicate\u003cNote\u003e) filteredNotes.getPredicate();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void undoNote() {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteBook.undo();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void redoNote() {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteBook.redo();"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void commitNote() {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteBook.commit();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Index getNoteIndex(Note note) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return noteBook.getNoteIndex(note);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 72,
      "yhtingg": 78,
      "jityong": 106,
      "hooncp": 60,
      "-": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/model/NoteBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.SortByCond;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.UniqueNoteList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class NoteBook implements ReadOnlyNoteBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final UniqueNoteList notes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private SortByCond sortByCond;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NoteBook() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.sortByCond \u003d new SortByCond();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "        notes \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NoteBook(SortByCond sortByCond) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.sortByCond \u003d sortByCond;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "        notes \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NoteBook(UniqueNoteList notes, SortByCond sortByCond) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.sortByCond \u003d sortByCond;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Creates an AddressBook using the Notes in the {@code toBeCopied}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NoteBook(ReadOnlyNoteBook toBeCopied) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void resetData(ReadOnlyNoteBook newData) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "        setNotes(newData.getNoteList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "        setSortByCond(newData.getSortByCond());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Sorts the notes of the existing data according using (@code SortByCond)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void sortNotes() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": "        notes.sortNotes(sortByCond);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jityong"
        },
        "content": "                || (other instanceof VersionedNoteBook // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u0026\u0026 notes.equals(((VersionedNoteBook) other).getNotes()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return notes.hashCode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public SortByCond getSortByCond() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return sortByCond;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void setSortByCond(SortByCond sortByCond) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.sortByCond \u003d sortByCond;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void setNotes(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.notes.setNotes(notes);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public UniqueNoteList getNotes() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return notes;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns true if a note with the same Title as {@code note} exists in the note book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return notes.contains(note);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Adds a note to the note book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * The note must not already exist in the note book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void addNote (Note n) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jityong"
        },
        "content": "        notes.add(n);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Replaces the given note {@code target} in the list with {@code editedNote}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * {@code target} must exist in the note book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * The note identity of {@code editedNote} must not be the same as another existing note in the note book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(editedNote);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jityong"
        },
        "content": "        notes.setNote(target, editedNote);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void removeNote(Note key) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jityong"
        },
        "content": "        notes.remove(key);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Gets the Index of the note in the note list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Index getNoteIndex(Note note) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return notes.getNoteIndex(note);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return notes.asUnmodifiableObservableList() + \" notes\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jityong"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public ObservableList\u003cNote\u003e getNoteList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return notes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 158
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PasswordBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.UniquePasswordList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Wraps all data at the password-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class PasswordBook implements ReadOnlyPasswordBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final UniquePasswordList passwords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public PasswordBook() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwords \u003d new UniquePasswordList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Creates an PasswordBook using the Passwords in the {@code toBeCopied}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public PasswordBook(ReadOnlyPasswordBook toBeCopied) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Replaces the contents of the password list with {@code passwords}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * {@code passwords} must not contain duplicate passwords."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void setPasswords(List\u003cPassword\u003e passwords) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.passwords.setPassword(passwords);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Resets the existing data of this {@code PasswordBook} with {@code newData}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void resetData(ReadOnlyPasswordBook newData) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        setPasswords(newData.getPasswordList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns true if a password with the same identity as {@code password} exists in the password book."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean hasPassword(Password password) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return passwords.contains(password);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Adds a password to the password book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * The password must not already exist in the password book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void addPassword(Password p) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwords.add(p);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Replaces the given password {@code target} in the list with {@code editedPassword}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * {@code target} must exist in the password book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * The person identity of {@code editedPassword} must not be the same as another existing password"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * in the password book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void setPassword(Password target, Password editedPassword) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(editedPassword);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwords.setPassword(target, editedPassword);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Removes {@code p} from this {@code Password}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * {@code p} must exist in the password book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void removePassword(Password p) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwords.remove(p);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public ObservableList\u003cPassword\u003e getPasswordList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return passwords.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                || (other instanceof PasswordBook // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u0026\u0026 passwords.equals(((PasswordBook) other).passwords));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyCardBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Unmodifiable view of an card book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public interface ReadOnlyCardBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns an unmodifiable view of the cards list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * This list will not contain any duplicate cards."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    ObservableList\u003cCard\u003e getCardList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyFileBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Unmodifiable view of a file book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public interface ReadOnlyFileBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns an unmodifiable view of the files list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * This list will not contain any duplicate files."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    ObservableList\u003cEncryptedFile\u003e getFileList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyNoteBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.SortByCond;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "public interface ReadOnlyNoteBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns an unmodifiable view of the notes list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "    ObservableList\u003cNote\u003e getNoteList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "    SortByCond getSortByCond();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPasswordBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Unmodifiable view of an password book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public interface ReadOnlyPasswordBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    ObservableList\u003cPassword\u003e getPasswordList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    Path getCardBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "    Path getNoteBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    Path getPasswordBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 2,
      "jityong": 1,
      "hooncp": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private Path fileBookFilePath \u003d Paths.get(\"data\" , \"filebook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private Path cardBookFilePath \u003d Paths.get(\"data\", \"cardbook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Path noteBookFilePath \u003d Paths.get(\"data\" , \"notebook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Path passwordBookFilePath \u003d Paths.get(\"data\", \"passwordbook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        setCardBookFilePath(newUserPrefs.getCardBookFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "        setNoteBookFilePath(newUserPrefs.getNoteBookFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        setPasswordBookFilePath(newUserPrefs.getPasswordBookFilePath());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Path getNoteBookFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return noteBookFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Path getPasswordBookFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return passwordBookFilePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void setPasswordBookFilePath(Path passwordBookFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(passwordBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.passwordBookFilePath \u003d passwordBookFilePath;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void setNoteBookFilePath(Path noteBookFilePath) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(noteBookFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.noteBookFilePath \u003d noteBookFilePath;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Path getFileBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return fileBookFilePath;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFileBookFilePath(Path fileBookFilePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(fileBookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.fileBookFilePath \u003d fileBookFilePath;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Path getCardBookFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return cardBookFilePath;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void setCardBookFilePath(Path cardBookFilePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(cardBookFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.cardBookFilePath \u003d cardBookFilePath;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 cardBookFilePath.equals(o.cardBookFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, cardBookFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        sb.append(\"\\nLocal address file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        sb.append(\"\\nLocal card file location : \" + cardBookFilePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 10,
      "yhtingg": 16,
      "jityong": 11,
      "hooncp": 10,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedNoteBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.UniqueNoteList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.exceptions.InvalidRedoException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.exceptions.InvalidUndoException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class VersionedNoteBook extends NoteBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private List\u003cReadOnlyNoteBook\u003e noteBookStateList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private ListIterator\u003cReadOnlyNoteBook\u003e currentStatePointer \u003d noteBookStateList.listIterator();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public VersionedNoteBook(ReadOnlyNoteBook noteBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "        super(noteBook);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public VersionedNoteBook() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Commits the current state of the application into the list of state as the latest state."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!currentStatePointer.hasPrevious()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "            UniqueNoteList newUniqueNoteList \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "            newUniqueNoteList.setNotes(getNotes());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "            currentStatePointer.add(new NoteBook(newUniqueNoteList, getSortByCond()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "            ReadOnlyNoteBook previousNoteBookState \u003d currentStatePointer.previous();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "            if (!(previousNoteBookState.getNoteList().equals(getNoteList())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    \u0026\u0026 previousNoteBookState.getSortByCond().equals(getSortByCond()))) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "                UniqueNoteList newUniqueNoteList \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "                newUniqueNoteList.setNotes(getNotes());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "                currentStatePointer.next();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "                currentStatePointer.add(new NoteBook(newUniqueNoteList, getSortByCond()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "                currentStatePointer.next();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "        while (currentStatePointer.hasNext()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "            currentStatePointer.next();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "            currentStatePointer.remove();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Undo by changing the state of the NoteBook to the previous state."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (currentStatePointer.hasPrevious()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "            if (!currentStatePointer.hasNext()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": "                ReadOnlyNoteBook previousNoteBookState \u003d currentStatePointer.previous();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": "                if (!(previousNoteBookState.getNoteList().equals(getNoteList())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": "                        \u0026\u0026 previousNoteBookState.getSortByCond().equals(getSortByCond()))) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    UniqueNoteList newUniqueNoteList \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    newUniqueNoteList.setNotes(getNotes());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    currentStatePointer.next();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    currentStatePointer.add(new NoteBook(newUniqueNoteList, getSortByCond()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    currentStatePointer.previous();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jityong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jityong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": "            ReadOnlyNoteBook previousStateNoteBook \u003d currentStatePointer.previous();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jityong"
        },
        "content": "            setNotes(previousStateNoteBook.getNoteList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jityong"
        },
        "content": "            setSortByCond(previousStateNoteBook.getSortByCond());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jityong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new InvalidUndoException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Redo by changing the state of the NoteBook to the next state."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jityong"
        },
        "content": "        //TODO: refactor this to make it cleaner"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (currentStatePointer.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jityong"
        },
        "content": "            currentStatePointer.next();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jityong"
        },
        "content": "            if (currentStatePointer.hasNext()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jityong"
        },
        "content": "                ReadOnlyNoteBook nextStateNoteBook \u003d currentStatePointer.next();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jityong"
        },
        "content": "                setNotes(nextStateNoteBook.getNoteList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jityong"
        },
        "content": "                setSortByCond(nextStateNoteBook.getSortByCond());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jityong"
        },
        "content": "                currentStatePointer.previous();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jityong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jityong"
        },
        "content": "                currentStatePointer.previous();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jityong"
        },
        "content": "                throw new InvalidRedoException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jityong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jityong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new InvalidRedoException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/Card.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Represents a Card in the card book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class Card {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final CardNumber cardNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final Cvc cvc;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final ExpiryDate expiryDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Card(Description description, CardNumber cardNumber, Cvc cvc, ExpiryDate expiryDate, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireAllNonNull(description, cardNumber, cvc, expiryDate, tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.cardNumber \u003d cardNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.cvc \u003d cvc;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Card(Description description) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireAllNonNull(description);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.cardNumber \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.expiryDate \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.cvc \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public CardNumber getCardNumber() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return cardNumber;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Cvc getCvc() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return cvc;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public ExpiryDate getExpiryDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return expiryDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns the non-encrypted CardNumber"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @return non-encrypted CardNumber"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public String getNonEncryptedCardNumber() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return cardNumber.getNonEncryptedCardNumber();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns the non-encrypted CardNumber"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @return non-encrypted CardNumber"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public String getNonEncryptedCvc() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return cvc.getNonEncryptedCvc();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns the non-encrypted Card"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * returns non-encrypted Card"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public String toNonAsterixString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        builder.append(getDescription())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .append(\" Card Number: \")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .append(getNonEncryptedCardNumber())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .append(\" CVC: \")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .append(getNonEncryptedCvc())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .append(\" Expiry: \")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .append(getExpiryDate())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns true if both cards have the same identity and data fields."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * This defines a stronger notion of equality between two cards."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean isSameCard(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (!(other instanceof Card)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        Card otherCard \u003d (Card) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return otherCard.getNonEncryptedCardNumber().equals(getNonEncryptedCardNumber());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns true if both cards of the same description have at least one other identity field that is the same."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * This defines a weaker notion of equality between two cards."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return other !\u003d null"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 ((Card) other).getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return Objects.hash(description, cardNumber, cvc, expiryDate, tags);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        builder.append(getDescription())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .append(\" Card Number \")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .append(getCardNumber())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .append(\" CVC: \")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .append(getCvc())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .append(\" Expiry: \")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .append(getExpiryDate())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 154
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/CardNumber.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Represents a Cards\u0027s number in the card book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCardNumber(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class CardNumber {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \"Card number provided is not a valid VISA or MasterCard number.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(4\\\\d{3}|5[1-5]\\\\d{2})-?(\\\\d{4})-?(\\\\d{4})-?(\\\\d{4})\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Constructs a {@code CardNumber}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @param cardNumber A valid card number."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public CardNumber(String cardNumber) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(cardNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        checkArgument(isValidCardNumber(cardNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.value \u003d reformatCardNumber(cardNumber);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns true if a given string is a valid card number."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static boolean isValidCardNumber(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Formats the card number to include dashes."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @param cardNumber"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @return cardNumber with dashes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private static String reformatCardNumber(String cardNumber) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        Pattern p \u003d Pattern.compile(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        Matcher m \u003d p.matcher(cardNumber);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (m.find()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d 4; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                sb.append(m.group(i));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                if (i \u003c 4) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    sb.append(\"-\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public String getEncryptedCardNumber() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return StringUtil.cardNumberToAsterix(value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public String getNonEncryptedCardNumber() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return getEncryptedCardNumber();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                || (other instanceof CardNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 value.equals(((CardNumber) other).value)); // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/Cvc.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Represents a Cards\u0027s CVC in the card book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCvc(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class Cvc {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \"CVC entered is not valid!\\nIt should only contain 3 digit numeric characters, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3}\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Constructs a {@code Cvc}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @param cvc A valid cvc."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Cvc(String cvc) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(cvc);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        checkArgument(isValidCvc(cvc), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.value \u003d cvc;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns true if a given string is a valid CVC."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static boolean isValidCvc(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public String getEncryptedCvc() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return StringUtil.cvcToAsterix();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public String getNonEncryptedCvc() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return getEncryptedCvc();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                || (other instanceof Cvc // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 value.equals(((Cvc) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Represents a Cards\u0027s description in the card book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \"Description entered is invalid!\\nIt should only contain alphanumeric characters \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                + \"and spaces, and it should have at least one letter\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[a-zA-Z\\\\d ]*[a-zA-Z][a-zA-Z\\\\d ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.value \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/ExpiringCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Represents an Expiring Card."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class ExpiringCard extends Card {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private static DateTimeFormatter dateTimeFormat \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            .appendPattern(\"MM/yy\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            .toFormatter();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private int monthToExp;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private ExpiringCard(Description description, CardNumber cardNumber,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                         Cvc cvc, ExpiryDate expiryDate, Set\u003cTag\u003e tags, int monthToExp) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        super(description, cardNumber, cvc, expiryDate, tags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.monthToExp \u003d monthToExp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Get extended ExpiringCard object from a {@code Card}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static ExpiringCard of(Card card) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(card.getExpiryDate().toString(), dateTimeFormat);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        Period period \u003d LocalDate.now().until(date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        int monthsToExpiry \u003d period.getMonths() + period.getYears() * 12 + (period.getDays() \u003e 0 ? 1 : 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return new ExpiringCard(card.getDescription(), card.getCardNumber(), card.getCvc(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                card.getExpiryDate(), card.getTags(), monthsToExpiry);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Card getCard() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public int getMonthToExp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return monthToExp;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/ExpiryDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Represents a Card\u0027s expiry date in the card book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidExpiryDate(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class ExpiryDate {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \"Expiry entered is invalid!\\nIt should be in the format MM/YY, and it should not be blank\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String PAST_EXPIRY_ERROR \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \"You cannot add a card that has expired!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(((0)[0-9])|((1)[0-2]))(\\\\/)\\\\d{2}\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private static DateTimeFormatter dateTimeFormat \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            .appendPattern(\"MM/yy\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            .toFormatter();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Constructs an {@code ExpiryDate}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @param expiryDate A valid expiry date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public ExpiryDate(String expiryDate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(expiryDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        checkArgument(isValidDate(expiryDate), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.value \u003d expiryDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns true if a given string is a valid expiry date."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static boolean isValidExpiryDate(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(test, dateTimeFormat);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        Period period \u003d LocalDate.now().until(date);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        int monthsToExpiry \u003d period.getMonths() + period.getYears() * 12 + (period.getDays() \u003e 0 ? 1 : 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return monthsToExpiry \u003e\u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                || (other instanceof ExpiryDate // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 value.equals(((ExpiryDate) other).value)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/UniqueCardList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * A list of cards that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * A card is considered unique by comparing using {@code Card#isSameCard(Card)}. As such, adding of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * cards uses Card#isSameCard(Card) and Card#equals(Card) respectively for equality so as to ensure"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * that the card being added or updated is unique in terms of identity and description in the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * UniqueCardList. However, the removal of a card uses Card#equals(Object) so as to ensure"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * that the card with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class UniqueCardList implements Iterable\u003cCard\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final ObservableList\u003cCard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final ObservableList\u003cCard\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns true if the list contains an equivalent card as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean contains(Card toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCard);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns true if the list contains an equivalent card as the given argument."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean containsDescription(Card toCheck) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Adds a card to the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * The card must not already exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void add(Card toAdd) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Replaces the card {@code target} in the list with {@code editedCard}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * The card identity of {@code editedCard} must not be the same as another existing card in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void setCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireAllNonNull(target, editedCard);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (!target.isSameCard(editedCard) \u0026\u0026 contains(editedCard)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        internalList.set(index, editedCard);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void remove(Card toRemove) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void setCards(UniqueCardList replacement) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void setCards(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireAllNonNull(cards);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (!cardsAreUnique(cards)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        internalList.setAll(cards);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public ObservableList\u003cCard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Iterator\u003cCard\u003e iterator() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                || (other instanceof UniqueCardList // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueCardList) other).internalList));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private boolean cardsAreUnique(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.size() - 1; i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            for (int j \u003d i + 1; j \u003c cards.size(); j++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                if (cards.get(i).isSameCard(cards.get(j))) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/exceptions/CardNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.model.card.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Signals that the operation is unable to find the specified card."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class CardNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/exceptions/DuplicateCardException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.model.card.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Signals that the operation will result in duplicate Cards (Cards are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * fields)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class DuplicateCardException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public DuplicateCardException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        super(\"Operation would result in duplicate cards\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/file/EncryptedAt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Represents a File\u0027s encryption date and time in SecureIT."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class EncryptedAt {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Encrypted at should be in the format of dd/MM/yyyy HHmm\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public final Date value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Constructs an {@code EncryptedAt} field."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param encryptedAt A file\u0027s encryption date and time."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public EncryptedAt(Date encryptedAt) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        value \u003d encryptedAt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return DateUtil.formatDate(value);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof EncryptedAt // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 value.equals(((EncryptedAt) other).value)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/file/EncryptedFile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.util.FileNameUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Represents an Encrypted File in SecureIT."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class EncryptedFile {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String PREFIX \u003d \"[LOCKED]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final FileName fileName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final FilePath filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final FileStatus status;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private EncryptedAt encryptedAt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private ModifiedAt modifiedAt;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public EncryptedFile(FileName fileName,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                         FilePath filePath,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                         Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this(fileName, filePath, FileStatus.ACTIVE, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public EncryptedFile(FileName fileName,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                         FilePath filePath,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                         FileStatus status,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                         Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireAllNonNull(fileName, filePath, tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public EncryptedFile(FileName fileName,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                         FilePath filePath,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                         Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                         boolean withPrefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this(new FileName(FileNameUtil.getFileNameWithoutPrefix(fileName.value)), filePath, tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public EncryptedFile(FileName fileName,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                         FilePath filePath,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                         FileStatus status,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                         Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                         EncryptedAt encryptedAt,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                         ModifiedAt modifiedAt) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this(fileName, filePath, status, tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireAllNonNull(encryptedAt, modifiedAt);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.encryptedAt \u003d encryptedAt;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.modifiedAt \u003d modifiedAt;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FileName getFileName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return fileName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FilePath getFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FileStatus getFileStatus() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setEncryptedAt(EncryptedAt value) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        encryptedAt \u003d value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public EncryptedAt getEncryptedAt() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return encryptedAt;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setModifiedAt(ModifiedAt value) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        modifiedAt \u003d value;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ModifiedAt getModifiedAt() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return modifiedAt;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns the full path of the file in string."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String getFullPath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return Path.of(getFilePath().value).resolve(Path.of(getFileName().value)).toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns the full path of the encrypted file in string."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String getEncryptedPath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return Path.of(getFilePath().value)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                .resolve(FileNameUtil.getFileNameWithPrefix(getFileName().value)).toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns the file extension of the encrypted file."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String getFileExtension() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return fileName.getExtension();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!(other instanceof EncryptedFile)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile otherFile \u003d (EncryptedFile) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return otherFile.getFileName().equals(getFileName())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 otherFile.getFilePath().equals(getFilePath())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 otherFile.getEncryptedAt().equals(getEncryptedAt())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 otherFile.getModifiedAt().equals(getModifiedAt())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 otherFile.getFileStatus().equals(getFileStatus())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 otherFile.getTags().equals(getTags());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return Objects.hash(fileName, filePath, encryptedAt, modifiedAt, status, tags);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        builder.append(getFileName());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns true if both files have the same file name and path."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean isSameFile(EncryptedFile otherFile) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (otherFile \u003d\u003d this) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return otherFile !\u003d null"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 otherFile.getFileName().equals(getFileName())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 (otherFile.getFilePath().equals(getFilePath()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 167
    }
  },
  {
    "path": "src/main/java/seedu/address/model/file/FileName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Represents a File\u0027s FileName in SecureIT."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FileName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"File name should not be empty\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Constructs a {@code FileName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param fileName A file\u0027s name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FileName(String fileName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(fileName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        checkArgument(isValidFileName(fileName));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        value \u003d fileName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Constructs a {@code FileName} using file name and extension."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param fileName A file\u0027s name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param extension A file\u0027s extension."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static FileName constructWithExtension(String fileName, String extension) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireAllNonNull(fileName, extension);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (extension.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new FileName(fileName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new FileName(fileName + \".\" + extension);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns true if a given string is a valid file name."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static boolean isValidFileName(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return !(\"\".equals(test)); // trim not required since empty space can be valid file name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Gets the part of the file name without extension."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String getFileNameWithoutExtention() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (value.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return value.substring(0, value.lastIndexOf(\u0027.\u0027));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Gets the file extension of the file name."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String getExtension() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (value.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return value.substring(value.lastIndexOf(\u0027.\u0027) + 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof FileName // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 value.equals(((FileName) other).value)); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/file/FilePath.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Represents a File\u0027s FilePath in SecureIT."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FilePath {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Constructs a {@code FilePath}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param fileName A file\u0027s path."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FilePath(String fileName) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        value \u003d fileName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof FilePath // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 value.equals(((FilePath) other).value)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/file/FileStatus.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Represents the status of an encrypted file."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public enum FileStatus {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    ACTIVE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    MISSING,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    CORRUPTED"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/file/FullPathContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Tests that an {@code EncryptedFile}\u0027s {@code FullPath} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FullPathContainsKeywordsPredicate implements Predicate\u003cEncryptedFile\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FullPathContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean test(EncryptedFile file) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                .anyMatch(keyword -\u003e file.getFullPath().toLowerCase().contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof FullPathContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 keywords.equals(((FullPathContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/file/ModifiedAt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Represents a File\u0027s last modified date and time in SecureIT."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class ModifiedAt {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Modified at should be in the format of dd/MM/yyyy HHmm\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public final Date value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Constructs an {@code ModifiedAt} field."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param encryptedAt A file\u0027s encryption date and time."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ModifiedAt(Date encryptedAt) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        value \u003d encryptedAt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return DateUtil.formatDate(value);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof ModifiedAt // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 value.equals(((ModifiedAt) other).value)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/file/UniqueFileList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.exceptions.DuplicateFileException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.exceptions.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * A list of files that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class UniqueFileList implements Iterable\u003cEncryptedFile\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final ObservableList\u003cEncryptedFile\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final ObservableList\u003cEncryptedFile\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns true if the list contains an equivalent file as the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean contains(EncryptedFile toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFile);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Adds a file to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * The file must not already exist in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void add(EncryptedFile toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new DuplicateFileException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Replaces the file {@code target} in the list with {@code editedFile}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * The person identity of {@code editedFile} must not be the same as another existing file in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFile(EncryptedFile target, EncryptedFile editedFile) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireAllNonNull(target, editedFile);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!target.isSameFile(editedFile) \u0026\u0026 contains(editedFile)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new DuplicateFileException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        internalList.set(index, editedFile);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Sets the status of the given file to the new status specified."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFileStatus(EncryptedFile target, FileStatus newStatus) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireAllNonNull(target, newStatus);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        internalList.set(index, new EncryptedFile(target.getFileName(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                target.getFilePath(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                newStatus,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                target.getTags(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                target.getEncryptedAt(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                target.getModifiedAt()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Removes the equivalent file from the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * The file must exist in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void remove(EncryptedFile toRemove) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFiles(UniqueFileList replacement) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Replaces the contents of this list with {@code files}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFiles(List\u003cEncryptedFile\u003e files) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireAllNonNull(files);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!filesAreUnique(files)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new DuplicateFileException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        internalList.setAll(files);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ObservableList\u003cEncryptedFile\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Iterator\u003cEncryptedFile\u003e iterator() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof UniqueFileList // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueFileList) other).internalList));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns true if {@code persons} contains only unique files."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private boolean filesAreUnique(List\u003cEncryptedFile\u003e files) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        for (int i \u003d 0; i \u003c files.size() - 1; i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            for (int j \u003d i + 1; j \u003c files.size(); j++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                if (files.get(i).isSameFile(files.get(j))) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/model/file/ViewableFile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * A class to represent a file that is viewable with preview command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * @param \u003cT\u003e the type of the file content."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class ViewableFile\u003cT\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final EncryptedFile file;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final ViewableFileType type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final T content;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ViewableFile(EncryptedFile file, ViewableFileType type, T content) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ViewableFileType getFileType() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public T getFileContent() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return file.getFileName().value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/file/ViewableFileType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Represents different viewable file types."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public enum ViewableFileType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    TEXT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    IMAGE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    PDF,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    WORD,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    EXCEL"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/file/exceptions/DuplicateFileException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Signals that the operation will result in duplicate Files (Files are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * file name and path)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class DuplicateFileException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public DuplicateFileException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        super(\"Operation would result in duplicate files\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/file/exceptions/FileNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FileNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Content.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Represents a Person\u0027s content in the content book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidContent(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class Content {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Content can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * The first character of the content must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?s).*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public final String content;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Constructs an {@code Content}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param content A valid content."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Content(String content) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "        checkArgument(isValidContent(content), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns true if a given string is a valid content."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static boolean isValidContent(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "                || (other instanceof Content // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u0026\u0026 content.equals(((Content) other).content)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return content.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/DateAdded.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Represents a File\u0027s encryption date and time in SecureIT."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class DateAdded {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date should be in the format of dd/MM/yyyy HHmm\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public final Date value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Constructs an {@code EncryptedAt} field."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param dateAdded A note\u0027s last modified date and time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public DateAdded(Date dateAdded) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "        value \u003d dateAdded;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return DateUtil.formatDate(value);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "                || (other instanceof DateAdded // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u0026\u0026 value.equals(((DateAdded) other).value)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/DateModified.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Represents a File\u0027s encryption date and time in SecureIT."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class DateModified {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date should be in the format of dd/MM/yyyy HHmm\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public final Date value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Constructs an {@code EncryptedAt} field."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param dateModified A note\u0027s last modified date and time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public DateModified(Date dateModified) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "        value \u003d dateModified;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public DateModified update() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new DateModified(new Date());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return DateUtil.formatDate(value);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "                || (other instanceof DateModified // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u0026\u0026 value.equals(((DateModified) other).value)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u0026\u0026 description.equals(((Description) other).description)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cNote\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean test(Note note) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(note.getTitle().title, keyword)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "                        || StringUtil.containsStringIgnoreCase(note.getDescription().description, keyword)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "                        || StringUtil.containsStringIgnoreCase(note.getContent().content, keyword)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "                        );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Note.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final Content content;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final DateModified dateModified;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final DateAdded dateAdded;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final NumOfAccess numOfAccess;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Note(Title title, Description description, Set\u003cTag\u003e tags, Content content) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireAllNonNull(title, tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.dateModified \u003d new DateModified(new Date());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.dateAdded \u003d new DateAdded(new Date());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.numOfAccess \u003d new NumOfAccess(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Overloaded constructor with DateModified and NumOfAccess parameters."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Note(Title title, Description description, Set\u003cTag\u003e tags, Content content,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "                DateModified dateModified, DateAdded dateAdded, NumOfAccess numOfAccess) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireAllNonNull(title, tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.dateModified \u003d dateModified;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.dateAdded \u003d dateAdded;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.numOfAccess \u003d numOfAccess;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NumOfAccess updateNumOfAccess() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return numOfAccess.update();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NumOfAccess getNumOfAccess() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return numOfAccess;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public DateModified updateDateModified() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return dateModified.update();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public DateAdded getDateAdded() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return dateAdded;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public DateModified getDateModified() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return dateModified;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Content getContent() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean isSameNote(Note otherNote) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (otherNote \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return otherNote !\u003d null"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u0026\u0026 otherNote.getTitle().equals(getTitle());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!(other instanceof Note)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Note otherNote \u003d (Note) other;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return otherNote.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u0026\u0026 otherNote.getTags().equals(getTags())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u0026\u0026 otherNote.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u0026\u0026 otherNote.getContent().equals(getContent());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jityong"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return Objects.hash(title, description, tags, content);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jityong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jityong"
        },
        "content": "        builder.append(getTitle() + \" \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jityong"
        },
        "content": "                .append(getDescription() + \" \")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jityong"
        },
        "content": "                .append(getContent() + \" \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jityong"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jityong"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/NumOfAccess.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Represents a Note\u0027s number of access by the user in the note book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNumOfAccess(int)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class NumOfAccess {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"NumOfAccess can take only positive integers,\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + \" and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public final int numOfAccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param num A valid integer to represent the number of access to the note."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NumOfAccess(int num) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(num);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "        checkArgument(isValidNumOfAccess(num), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.numOfAccess \u003d num;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static boolean isValidNumOfAccess(int test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return test \u003e\u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NumOfAccess update() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new NumOfAccess(numOfAccess + 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return numOfAccess + \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "                || (other instanceof NumOfAccess // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u0026\u0026 numOfAccess \u003d\u003d (((NumOfAccess) other).numOfAccess)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return Integer.hashCode(numOfAccess);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/SortByCond.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Represents a Note\u0027s Sorting condition."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class SortByCond {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String DATEMODIFIED \u003d \"datemodified\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String DATEADDED \u003d \"dateadded\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String NUMOFACCESS \u003d \"numofaccess\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Sort condition should be either \" + DATEADDED + \", or \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "            + DATEMODIFIED + \" or \" + NUMOFACCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public final String sortByCond;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public final Comparator\u003cNote\u003e sortComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Constructs an {@code SortByCond} field with date modified as the default condition."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public SortByCond() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.sortByCond \u003d DATEMODIFIED;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.sortComparator \u003d new SortByDateModified();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Constructs an {@code SortByCond} field"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param sortByCond condition for the sorting of notes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public SortByCond(String sortByCond) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "        switch (sortByCond.toLowerCase()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "        case DATEADDED:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "            this.sortByCond \u003d DATEADDED;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "            this.sortComparator \u003d new SortByDateAdded();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "        case NUMOFACCESS:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "            this.sortByCond \u003d NUMOFACCESS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "            this.sortComparator \u003d new SortByNumOfAccess();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "            this.sortByCond \u003d DATEMODIFIED;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "            this.sortComparator \u003d new SortByDateModified();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Gets the Comparator object based on the sorting condition."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @return Comparator object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Comparator\u003cNote\u003e getSortComparator() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return sortComparator;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns true if given string is a valid sorting condition."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static boolean isValidSortByCond(String sortByCond) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": "        String editedSortByCond \u003d sortByCond.toLowerCase();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return sortByCond.toLowerCase().equals(DATEMODIFIED) || sortByCond.toLowerCase().equals(DATEADDED)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": "                || sortByCond.toLowerCase().equals(NUMOFACCESS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return sortByCond;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jityong"
        },
        "content": "                || (other instanceof SortByCond // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u0026\u0026 sortByCond.equals(((SortByCond) other).sortByCond)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return sortByCond.hashCode();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Comparator class that compares notes based on its NumOfAccess attribute."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jityong"
        },
        "content": "    class SortByNumOfAccess implements Comparator\u003cNote\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jityong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public int compare(Note a, Note b) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jityong"
        },
        "content": "            Integer numOfAccessA \u003d Integer.valueOf(a.getNumOfAccess().numOfAccess);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jityong"
        },
        "content": "            Integer numOfAccessB \u003d Integer.valueOf(b.getNumOfAccess().numOfAccess);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return (numOfAccessB.compareTo(numOfAccessA));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Comparator class that compares notes based on its DateModified attribute."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jityong"
        },
        "content": "    class SortByDateModified implements Comparator\u003cNote\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jityong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public int compare(Note a, Note b) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jityong"
        },
        "content": "            if (a.getDateModified().value.before(b.getDateModified().value)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jityong"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jityong"
        },
        "content": "            } else if (a.getDateModified().value.after(b.getDateModified().value)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jityong"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jityong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jityong"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jityong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Comparator class that compares notes based on its DateAdded attribute."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jityong"
        },
        "content": "    class SortByDateAdded implements Comparator\u003cNote\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jityong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public int compare(Note a, Note b) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jityong"
        },
        "content": "            if (a.getDateAdded().value.before(b.getDateAdded().value)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jityong"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jityong"
        },
        "content": "            } else if (a.getDateAdded().value.after(b.getDateAdded().value)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jityong"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jityong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jityong"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jityong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Title.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Represents a Person\u0027s title in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \"Titles should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u0026\u0026 title.equals(((Title) other).title)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return title.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/UniqueNoteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.exceptions.DuplicateNoteException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.exceptions.NoteNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": " * A list of Notes that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": " * A note is considered unique by comparing using {@code Note#isSameNote(Note)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": " * notes uses Note#isSameNote(Note) for equality so as to ensure that the note being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": " * unique in terms of identity in the UniqueNoteList. However, the removal of a note uses Note#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": " * as to ensure that the note with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": " * @see Note#isSameNote(Note)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class UniqueNoteList implements Iterable\u003cNote\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final ObservableList\u003cNote\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final ObservableList\u003cNote\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns true if the list contains an equivalent note as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean contains(Note toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameNote);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Adds a note to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void add(Note toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new DuplicateNoteException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Replaces the note {@code target} in the list with {@code editedNote}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * The note identity of {@code editedNote} must not be the same as another existing note in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireAllNonNull(target, editedNote);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new NoteNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!target.isSameNote(editedNote) \u0026\u0026 contains(editedNote)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new DuplicateNoteException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jityong"
        },
        "content": "        internalList.set(index, editedNote);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void remove(Note toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new NoteNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void setNotes(UniqueNoteList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jityong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void setNotes(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireAllNonNull(notes);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!notesAreUnique(notes)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new DuplicateNoteException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jityong"
        },
        "content": "        internalList.setAll(notes);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void sortNotes(SortByCond sortByCond) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jityong"
        },
        "content": "        internalList.sort(sortByCond.getSortComparator());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Index getNoteIndex(Note note) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return Index.fromZeroBased(internalList.indexOf(note));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public ObservableList\u003cNote\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Iterator\u003cNote\u003e iterator() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jityong"
        },
        "content": "                || (other instanceof UniqueNoteList // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jityong"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueNoteList) other).internalList));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns true if {@code notes} contains only unique notes."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private boolean notesAreUnique(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jityong"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size() - 1; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jityong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c notes.size(); j++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jityong"
        },
        "content": "                if (notes.get(i).isSameNote(notes.get(j))) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jityong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jityong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/exceptions/DuplicateNoteException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.model.note.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class DuplicateNoteException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public DuplicateNoteException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "        super(\"Operation would result in duplicate note\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/exceptions/InvalidRedoException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.model.note.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class InvalidRedoException extends NullPointerException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public InvalidRedoException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "        super(\"Cannot Redo anymore!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/exceptions/InvalidUndoException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.model.note.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class InvalidUndoException extends NullPointerException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public InvalidUndoException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "        super(\"Cannot undo anymore!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/exceptions/NoteNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.model.note.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class NoteNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "jityong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.model.password;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Tests that a {@code Password}\u0027s {@code Description} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cPassword\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean test(Password password) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                StringUtil.containsStringIgnoreCase(password.getPasswordDescription().value, keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/ExpiryMode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.model.password;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * The mode of the password."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public enum ExpiryMode {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    HEALTHY,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    EXPIRING,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    EXPIRED"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/Password.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.model.password;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a Password in the password book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class Password {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final PasswordDescription passwordDescription;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final Username username;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final PasswordValue passwordValue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final PasswordModifiedAt passwordModifiedAt;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final Website website;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final PasswordExpireAt passwordExpireAt;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private ExpiryMode expiryMode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Password(PasswordDescription passwordDescription, Username username, PasswordValue passwordValue,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    PasswordModifiedAt passwordModifiedAt, Website website, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireAllNonNull(passwordDescription, username, passwordValue, passwordModifiedAt);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.passwordDescription \u003d passwordDescription;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.passwordValue \u003d passwordValue;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.passwordModifiedAt \u003d passwordModifiedAt;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.website \u003d website;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwordExpireAt \u003d new PasswordExpireAt(DateUtil.findPasswordExpireAt(this.passwordModifiedAt.value));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public PasswordDescription getPasswordDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return passwordDescription;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Username getUsername() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public PasswordValue getPasswordValue() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return passwordValue;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public PasswordModifiedAt getPasswordModifiedAt() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return passwordModifiedAt;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Website getWebsite() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return website;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public ExpiryMode getExpiryMode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return expiryMode;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public PasswordExpireAt getPasswordExpireAt() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return passwordExpireAt;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns the non-encrypted PasswordValue"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return non-encrypted PasswordValue"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String getNonEncryptedPasswordValue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return passwordValue.getNonEncryptedPasswordValue();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Updates the expiry mode of the password"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void updateExpiry() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        long time \u003d DateUtil.findDaysPasswordExpireAt(new Date(), passwordExpireAt.value);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (time \u003c 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            expiryMode \u003d ExpiryMode.EXPIRED;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } else if (time \u003c 90) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            expiryMode \u003d ExpiryMode.EXPIRING;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            expiryMode \u003d ExpiryMode.HEALTHY;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns the non-encrypted Password"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return non-encrypted Password"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toNonAsterixString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        builder.append(\"Description: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .append(getPasswordDescription())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .append(\" Username: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .append(getUsername())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .append(\" Password: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .append(getNonEncryptedPasswordValue())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .append(\" Modified at: \")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .append(getPasswordModifiedAt());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        builder.append(\"Description: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .append(getPasswordDescription())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .append(\" Username: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .append(getUsername())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .append(\" Password: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .append(getNonEncryptedPasswordValue())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns true if both passwords have the same description."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean isSamePassword(Password otherPassword) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (otherPassword \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return otherPassword !\u003d null"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u0026\u0026 otherPassword.getUsername().equals(getUsername())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u0026\u0026 otherPassword.getPasswordDescription().equals(getPasswordDescription());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!(other instanceof Password)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password otherPerson \u003d (Password) other;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return otherPerson.getPasswordDescription().equals(getPasswordDescription())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u0026\u0026 otherPerson.getUsername().equals(getUsername())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u0026\u0026 otherPerson.getPasswordValue().equals(getPasswordValue())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return Objects.hash(passwordDescription, username, passwordValue, passwordModifiedAt, website, tags);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 1,
      "hooncp": 175
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/PasswordDescription.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.model.password;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a Password\u0027s description in the password book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class PasswordDescription {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \"Descriptions should only contain alphabets, numbers and spaces\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \" and adhere to the following constrains: \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"1) Be between 2 characters to 25 characters long\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String ADDITIONAL_INFORMATION \u003d \"Description will automatically be changed to UPPER-CASE\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"^(?![ ])(?!.*[ ]{2})(([a-zA-Z0-9 ]){2,25})(?\u003c![ ])$\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public PasswordDescription(String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        checkArgument(isValidDescription(description), ("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                MESSAGE_CONSTRAINTS + ADDITIONAL_INFORMATION));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        value \u003d description.toUpperCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                || (other instanceof PasswordDescription // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u0026\u0026 value.toUpperCase().equals(((PasswordDescription) other).value.toUpperCase())); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/PasswordExpireAt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.model.password;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a Password\u0027s expiry date and time in SecureIT."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class PasswordExpireAt {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public final Date value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Constructs an {@code PasswordExpireAt} field."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param expireAt the date and time the password will expire at."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public PasswordExpireAt(Date expireAt) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(expireAt);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        value \u003d expireAt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return DateUtil.formatDateForDisplay(value);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public long getDays() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Date d1 \u003d new Date();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return DateUtil.findDaysPasswordExpireAt(d1, value);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                || (other instanceof PasswordExpireAt // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u0026\u0026 value.equals(((PasswordExpireAt) other).value)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/PasswordModifiedAt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.model.password;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a Password\u0027s password value last modified date and time in SecureIT."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class PasswordModifiedAt {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"LastModified at should be in the format of dd/MM/yyyy HHmm\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public final Date value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Constructs an {@code PasswordModifiedAt} field."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param modifiedAt the date and time the password was modified at."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public PasswordModifiedAt(Date modifiedAt) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(modifiedAt);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        value \u003d modifiedAt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return DateUtil.formatDateForDisplay(value);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                || (other instanceof PasswordModifiedAt // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u0026\u0026 value.equals(((PasswordModifiedAt) other).value)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/PasswordValue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.model.password;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a Password\u0027s password value in the password book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class PasswordValue {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \"Password can contain alphabets, numbers and special characters and \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"adhere to the following constrains: \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"1) Should not have spaces. Any leading or trailing spaces will be ignored\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"2) Be between 2 characters to 25 characters long\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"3) Special characters are listed as ~`!@#$%^\u0026*()-_+\u003d[{]}|\\\\\\\u0027\\\";:?/.\u003e\u003c,\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"Password is case-sensitive\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \"^(?![ ])([A-Za-z0-9~`!@#$%^\u0026*()-_+\u003d\\\\[{\\\\]}|\\\\\\\\\u0027\\\";:?\\\\/.\u003e\u003c,]{2,25})(?\u003c![ ])$\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public PasswordValue(String passwordValue) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(passwordValue);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        checkArgument(isValidPasswordValue(passwordValue), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        value \u003d passwordValue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns true if a given string is a valid username."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static boolean isValidPasswordValue(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String getEncryptedPasswordValue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return StringUtil.passwordToAsterix(value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String getNonEncryptedPasswordValue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return getEncryptedPasswordValue();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                || (other instanceof PasswordValue // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u0026\u0026 value.equals(((PasswordValue) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 1,
      "hooncp": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/UniquePasswordList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.model.password;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.exceptions.DuplicatePasswordException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.exceptions.PasswordNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * A list of password that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * A password is considered unique by comparing using {@code Password#isSamePassword(Password)}. As such, adding"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * and updating of passwords uses Password#isSamePassword(Password) for equality so as to ensure that the password"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * being added or updated is unique in terms of identity in the UniquePasswordList. However, the removal of a password"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * uses Password#equals(Object) so as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * @see Password#isSamePassword(Password)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class UniquePasswordList implements Iterable\u003cPassword\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final ObservableList\u003cPassword\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final ObservableList\u003cPassword\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns true if the list contains an equivalent password as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean contains(Password toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePassword);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Adds a password to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * The password must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void add(Password toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new DuplicatePasswordException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Removes the equivalent password from the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * The password must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void remove(Password toRemove) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new PasswordNotFoundException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void setPasswords(UniquePasswordList replacement) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Replaces the contents of this list with {@code passwords}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * {@code passwords} must not contain duplicate passwords."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void setPassword(List\u003cPassword\u003e passwords) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireAllNonNull(passwords);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!passwordsAreUnique(passwords)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new DuplicatePasswordException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        internalList.setAll(passwords);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Replaces the password {@code target} in the list with {@code editedPassword}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * The password identity of {@code edited password} must not be the same as another existing password in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void setPassword(Password target, Password editedPassword) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireAllNonNull(target, editedPassword);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new PasswordNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!target.isSamePassword(editedPassword) \u0026\u0026 contains(editedPassword)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new DuplicatePasswordException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        internalList.set(index, editedPassword);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public ObservableList\u003cPassword\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Iterator\u003cPassword\u003e iterator() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                || (other instanceof UniquePasswordList // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePasswordList) other).internalList));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns true if {@code passwords} contains only unique passwords."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private boolean passwordsAreUnique(List\u003cPassword\u003e passwords) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        for (int i \u003d 0; i \u003c passwords.size() - 1; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            for (int j \u003d i + 1; j \u003c passwords.size(); j++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                if (passwords.get(i).isSamePassword(passwords.get(j))) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/Username.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.model.password;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a Password\u0027s username in the password book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class Username {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \"Username should only contain alphabets, numbers, underscores, hyphens, spaces and address signs\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \" and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"1) Should not have two underscores/hypens/spaces/address signs in a row\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"2) Should not have a underscore, hypen, space or address sign at the start or end\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            + \"3) Be between 2 characters to 25 characters long\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"^(?![@_ .-])(?!.*[ @_.-]{2})([a-zA-Z0-9. _@-]{2,25})(?\u003c![_@ .-])$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Username(String username) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        checkArgument(isValidUsername(username), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        value \u003d username;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns true if a given string is a valid username."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static boolean isValidUsername(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                || (other instanceof Username // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u0026\u0026 value.toLowerCase().equals(((Username) other).value.toLowerCase())); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/Website.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.model.password;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a Password\u0027s website in the password book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class Website {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \"Website is optional and could be blank. NIL will be used instead.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \".*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Website(String website) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(website);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        checkArgument(isValidWebsite(website), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        value \u003d website;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns true if a given string is a valid website."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static boolean isValidWebsite(String test) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!value.equals(\"NIL\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                || (other instanceof Website // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u0026\u0026 value.equals(((Website) other).value)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/analyser/Analyser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.result.Result;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents {@code Analyser} object that analyses individual passwords in password book to produce an {@code Result}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Interface for different analyser classes to implement analyse method."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public interface Analyser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    final String DESC_FAIL \u003d \"failed\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    final String DESC_PASS \u003d \"passed\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Reviews specific aspect of every password in the password book to produce a list of {@code Result} objects"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * containing information of the analysis."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param passwordList the list of the {@code Password} objects in the password book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    List\u003cResult\u003e analyse(List\u003cPassword\u003e passwordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Provides the header message for each type of analyser."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    String getHeader();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/analyser/DictionaryAnalyser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.core.Dictionary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.util.LeetUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.match.DictionaryMatch;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.result.DictionaryResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.result.Result;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents analyser object that analyses passwords in password book for common dictionary string."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class DictionaryAnalyser implements Analyser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static final String MESSAGE_HEADER \u003d \"Analysing passwords for commonly used passwords:\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private Dictionary dictionary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public DictionaryAnalyser(Dictionary dictionary) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.dictionary \u003d dictionary;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public List\u003cResult\u003e analyse(List\u003cPassword\u003e passwordList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cResult\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (Password acc : passwordList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            List\u003cDictionaryMatch\u003e matches \u003d getAllMatches(acc.getPasswordValue().value);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            if (matches.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                results.add(new DictionaryResult(acc, DESC_PASS, matches));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                results.add(new DictionaryResult(acc, DESC_FAIL, matches));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    List\u003cDictionaryMatch\u003e getAllMatches(String password) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        List\u003cDictionaryMatch\u003e matches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        // Create all possible sub-sequences of the password"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (int start \u003d 0; start \u003c password.length(); start++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            for (int end \u003d start + 1; end \u003c\u003d password.length(); end++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                String splitPassword \u003d password.substring(start, end);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                // Match on lower"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                String lowerPart \u003d splitPassword.toLowerCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                Integer lowerRank \u003d dictionary.getDictionary().get(lowerPart);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                if (lowerRank !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    matches.add(new DictionaryMatch(start, end - 1, lowerPart, lowerRank));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                //Match on leet"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                List\u003cString\u003e unleetList \u003d LeetUtil.translateLeet(lowerPart);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                for (final String unleetPart : unleetList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    Integer unleetRank \u003d dictionary.getDictionary().get(unleetPart);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    if (unleetRank !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                        matches.add(new DictionaryMatch(start, end - 1, unleetPart, unleetRank));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        Collections.sort(matches);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return matches;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String getHeader() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return MESSAGE_HEADER;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/analyser/SequenceAnalyser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.match.SequenceMatch;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.result.Result;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.result.SequenceResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents analyser object that analyses passwords in password book for common sequence string."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class SequenceAnalyser implements Analyser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static final String MESSAGE_HEADER \u003d \"Analysing passwords for common sequences :\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private ArrayList\u003cSequenceResult\u003e results;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public ArrayList\u003cSequenceResult\u003e getResults() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public List\u003cResult\u003e analyse(List\u003cPassword\u003e passwordList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cResult\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (Password acc : passwordList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String password \u003d acc.getPasswordValue().value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            List\u003cSequenceMatch\u003e matches \u003d getAllMatches(password);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            if (matches.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                results.add(new SequenceResult(acc, DESC_PASS, matches));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                results.add(new SequenceResult(acc, DESC_FAIL, matches));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String getHeader() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return MESSAGE_HEADER;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    List\u003cSequenceMatch\u003e getAllMatches(String password) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cSequenceMatch\u003e matches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        getAllForwardSubseq(password, matches);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        getAllBackwardSubseq(password, matches);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return matches;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static void getAllForwardSubseq(String password, ArrayList\u003cSequenceMatch\u003e matches) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        char[] characters \u003d password.toCharArray();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (password.length() \u003c\u003d 2) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return; //dont bother"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        int start \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        while (start \u003c characters.length - 1) { //while start not at the end"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            StringBuilder seq \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            Character curr \u003d characters[start];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            seq.append(curr);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            int end \u003d start + 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            Character next \u003d characters[end];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            while (next \u003d\u003d curr + 1 \u0026\u0026 end \u003c\u003d characters.length - 1 \u0026\u0026 inSameRange(curr, next)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                seq.append(next);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                end++;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                if (end \u003d\u003d characters.length) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                curr \u003d next;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                next \u003d characters[end];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            if (seq.length() \u003e\u003d 3) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                matches.add(new SequenceMatch(start, end - 1, seq.toString()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            start \u003d end;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static void getAllBackwardSubseq(String password, ArrayList\u003cSequenceMatch\u003e matches) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        char[] characters \u003d password.toCharArray();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (password.length() \u003c\u003d 2) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return; //dont bother"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        int start \u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        while (start \u003c characters.length - 1) { //while start not at the end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            StringBuilder seq \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            Character curr \u003d characters[start];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            seq.append(curr);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            int end \u003d start + 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            Character next \u003d characters[end];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            while (next \u003d\u003d curr - 1 \u0026\u0026 end \u003c\u003d characters.length - 1 \u0026\u0026 inSameRange(curr, next)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                seq.append(next);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                end++;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                if (end \u003d\u003d characters.length) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                curr \u003d next;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                next \u003d characters[end];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            if (seq.length() \u003e\u003d 3) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                matches.add(new SequenceMatch(start, end - 1, seq.toString()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            start \u003d end;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Checks that both current and next character are within the same ASCII range type."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param curr the current character"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param next the next character"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return true if both current and next character are within the same ASCII range type, else false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static boolean inSameRange(Character curr, Character next) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (curr \u003e\u003d 65 \u0026\u0026 curr \u003c\u003d 90) { //ALPHA_UPPER"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return (next \u003e\u003d 65 \u0026\u0026 next \u003c\u003d 90);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } else if (curr \u003e\u003d 97 \u0026\u0026 curr \u003c\u003d 122) { //ALPHA_LOWER:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return (next \u003e\u003d 97 \u0026\u0026 next \u003c\u003d 122);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } else if (curr \u003e\u003d 48 \u0026\u0026 curr \u003c\u003d 57) { //NUMERICAL:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return (next \u003e\u003d 48 \u0026\u0026 next \u003c\u003d 57);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/analyser/SimilarityAnalyser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.match.SimilarityMatch;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.result.Result;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.result.SimilarityResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents analyser object that analyses passwords in password book for similar passwords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class SimilarityAnalyser implements Analyser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static final String MESSAGE_HEADER \u003d \"Analyzing password for similarity: \\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public List\u003cResult\u003e analyse(List\u003cPassword\u003e passwordList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cResult\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (Password acc : passwordList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            List\u003cSimilarityMatch\u003e matches \u003d getAllMatches(acc, passwordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            if (!matches.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                results.add(new SimilarityResult(acc, DESC_FAIL, matches));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                results.add(new SimilarityResult(acc, DESC_PASS, matches));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Finds all passwords in the list that are similar to the given password."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param toCheck the password that we want to check for"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param passwordList the list of passwords"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    List\u003cSimilarityMatch\u003e getAllMatches(Password toCheck, List\u003cPassword\u003e passwordList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        String s1 \u003d toCheck.getPasswordValue().value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cSimilarityMatch\u003e matches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (Password acc : passwordList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            if (toCheck \u003d\u003d acc) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String s2 \u003d acc.getPasswordValue().value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            double score \u003d score(s1, s2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            if (score \u003e\u003d 0.70) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                matches.add(new SimilarityMatch(0, toCheck.getPasswordValue().value.length() - 1,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                        acc.getPasswordValue().value, acc, score));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return matches;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Calculates the similarity score of objects, where 0.0 implies absolutely no similarity"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * and 1.0 implies absolute similarity."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param first The first string to compare."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param second The second string to compare."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return A number between 0.0 and 1.0."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @throws NullPointerException if one or both of the strings are null"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public double score(String first, String second) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        int maxLength \u003d Math.max(first.length(), second.length());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        //Can\u0027t divide by 0"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (maxLength \u003d\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return 1.0d;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return ((double) (maxLength - computeEditDistance(first, second))) / (double) maxLength;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Computes the edit distance between two strings"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param first the base string provided"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param second the second string"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    protected int computeEditDistance(String first, String second) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        first \u003d first.toLowerCase();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        second \u003d second.toLowerCase();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        int[] costs \u003d new int[second.length() + 1];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d first.length(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            int previousValue \u003d i;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            for (int j \u003d 0; j \u003c\u003d second.length(); j++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    costs[j] \u003d j;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                } else if (j \u003e 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    int useValue \u003d costs[j - 1];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    if (first.charAt(i - 1) !\u003d second.charAt(j - 1)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                        useValue \u003d Math.min(Math.min(useValue, previousValue), costs[j]) + 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    costs[j - 1] \u003d previousValue;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    previousValue \u003d useValue;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            if (i \u003e 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                costs[second.length()] \u003d previousValue;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return costs[second.length()];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String getHeader() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return MESSAGE_HEADER;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/analyser/StrengthAnalyser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.result.Result;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.result.StrengthResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents analyser object that analyses passwords in password book for password strength."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class StrengthAnalyser implements Analyser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static final String DESC_WEAK \u003d \"weak\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static final String DESC_MODERATE \u003d \"moderate\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static final String DESC_STRONG \u003d \"strong\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static final String MESSAGE_HEADER \u003d \"Analysing passwords for strength: \\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public List\u003cResult\u003e analyse(List\u003cPassword\u003e accountList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cResult\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (Password p : accountList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            StrengthResult o \u003d calculateStrength(p);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            results.add(o);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Calculates the strength of a given password"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param passwordObject is the password"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the result of the strength analysis"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static StrengthResult calculateStrength(Password passwordObject) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        String password \u003d passwordObject.getPasswordValue().value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        int passwordScore \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        boolean hasMinimumLength \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        boolean hasLower \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        boolean hasUpper \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        boolean hasNum \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        boolean hasSpecial \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (password.length() \u003e\u003d 8) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            passwordScore +\u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            hasMinimumLength \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        //if it contains one digit"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (password.matches(\"(?\u003d.*[0-9]).*\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            passwordScore +\u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            hasNum \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        //if it contains one lower case letter"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (password.matches(\"(?\u003d.*[a-z]).*\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            passwordScore +\u003d 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            hasLower \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        //if it contains one upper case letter"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (password.matches(\"(?\u003d.*[A-Z]).*\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            passwordScore +\u003d 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            hasUpper \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        //if it contains one special character"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (password.matches(\"(?\u003d.*[~!@#$%^\u0026*()_-]).*\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            passwordScore +\u003d 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            hasSpecial \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return generateAnalysisObject(passwordObject, passwordScore, hasMinimumLength, hasLower,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                hasUpper, hasNum, hasSpecial);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Creates the strength result object based on the arguments provided."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param passwordObject the password"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param passwordScore the calculated strength score for password"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param hasMinimumLength the minimum length required for strong password"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param hasLower the presence of lower case character"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param hasUpper the presence of upper case character"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param hasNum the presence of numerals"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param hasSpecial the presence of special character"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static StrengthResult generateAnalysisObject(Password passwordObject, int passwordScore,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                                                         boolean hasMinimumLength, boolean hasLower,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                                                         boolean hasUpper, boolean hasNum, boolean hasSpecial) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (passwordScore \u003c\u003d 2) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return new StrengthResult(passwordObject, DESC_WEAK, hasMinimumLength, hasLower,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    hasUpper, hasNum, hasSpecial);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } else if (passwordScore \u003c\u003d 4) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return new StrengthResult(passwordObject, DESC_MODERATE, hasMinimumLength, hasLower,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    hasUpper, hasNum, hasSpecial);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return new StrengthResult(passwordObject, DESC_STRONG, hasMinimumLength, hasLower,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    hasUpper, hasNum, hasSpecial);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String getHeader() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return MESSAGE_HEADER;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/analyser/UniqueAnalyser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.match.UniqueMatch;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.result.Result;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.result.UniqueResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents analyser object that analyses passwords in password book for unique passwords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class UniqueAnalyser implements Analyser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static final String DESC_NOT_UNIQUE \u003d \"not unique\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static final String DESC_UNIQUE \u003d \"unique\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static final String MESSAGE_HEADER \u003d \"Analysing passwords to check unique: \\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public List\u003cResult\u003e analyse(List\u003cPassword\u003e accountList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cResult\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cPassword\u003e\u003e passwordToAccounts \u003d initHash(accountList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (Password acc : accountList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            List\u003cUniqueMatch\u003e matches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String password \u003d acc.getPasswordValue().value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            ArrayList\u003cPassword\u003e arrList \u003d passwordToAccounts.get(password);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            if (arrList.size() \u003e 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                matches \u003d getAllMatches(acc, arrList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                results.add(new UniqueResult(acc, DESC_NOT_UNIQUE, matches));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                results.add(new UniqueResult(acc, DESC_UNIQUE, matches));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Creates a hashmap of password String to the Password objects."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param accountList is the list of passwords in the password book."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the hashmap of unique passwords to password objects."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    HashMap\u003cString, ArrayList\u003cPassword\u003e\u003e initHash(List\u003cPassword\u003e accountList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cPassword\u003e\u003e passwordToAccounts \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (Password acc : accountList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            String password \u003d acc.getPasswordValue().value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            if (passwordToAccounts.containsKey(password)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                ArrayList\u003cPassword\u003e arrList \u003d passwordToAccounts.get(password);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                arrList.add(acc);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                passwordToAccounts.put(password, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                passwordToAccounts.get(password).add(acc);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return passwordToAccounts;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    List\u003cUniqueMatch\u003e getAllMatches(Password acc, ArrayList\u003cPassword\u003e arrList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cUniqueMatch\u003e matches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (Password p : arrList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            if (p \u003d\u003d acc) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            matches.add(new UniqueMatch(0, acc.getPasswordValue().value.length(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    acc.getPasswordValue().value, acc));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return matches;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String getHeader() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return MESSAGE_HEADER;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/analyser/match/BaseMatch.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents a match found by an analyser which contains the start and end index as well as the match token."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public abstract class BaseMatch implements Match {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"start index cannot be greater than end index.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private String token;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private int startIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private int endIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs a basic {@code Match}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param startIndex the start index in the {@code PasswordValue} which the match was found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param endIndex the end index in the {@code PasswordValue} which the match was found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param token the string in the {@code PasswordValue} which the match was found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public BaseMatch(int startIndex, int endIndex, String token) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        requireNonNull(token);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        checkArgument(isValidMatch(startIndex, endIndex, token), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.token \u003d token;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.startIndex \u003d startIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.endIndex \u003d endIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    protected Boolean isValidMatch(int startIndex, int endIndex, String token) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return startIndex \u003c endIndex \u0026\u0026 token !\u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String getToken() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return token;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public int getStartIndex() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return startIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public int getEndIndex() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return endIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return MESSAGE_INIT"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                + \"Token: \" + this.token + \"\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                + \"Start Index: \" + this.startIndex + \"\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                + \"End Index: \" + this.endIndex + \"\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        BaseMatch baseMatch \u003d (BaseMatch) o;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return startIndex \u003d\u003d baseMatch.startIndex"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                \u0026\u0026 endIndex \u003d\u003d baseMatch.endIndex"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                \u0026\u0026 Objects.equals(token, baseMatch.token);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return Objects.hash(token, startIndex, endIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/analyser/match/DictionaryMatch.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents a {@code match} which was found in (@code Dictionary} used by {@code DictionaryAnalyser}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class DictionaryMatch extends BaseMatch implements Comparable\u003cDictionaryMatch\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private int rank;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs a {@code DictionaryMatch}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param startIndex the start index in the {@code PasswordValue} which the match was found."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param endIndex the end index in the {@code PasswordValue} which the match was found."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param token the string in the {@code PasswordValue} which the match was found."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param rank the rank of the {code Match} in the dictionary."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public DictionaryMatch(int startIndex, int endIndex, String token, int rank) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        super(startIndex, endIndex, token);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.rank \u003d rank;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public int compareTo(DictionaryMatch o) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return this.rank - o.rank;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return super.toString() + \"Type : Dictionary Match\\n\" + \"Rank : \" + this.rank + \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        DictionaryMatch that \u003d (DictionaryMatch) o;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return rank \u003d\u003d that.rank;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return Objects.hash(rank);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/analyser/match/Match.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents a match found by an {@code Analyser} which contains the portion of the password"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * where in the password the match was found (token), how many characters it is (length)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Additionally it should be able to return a string with details about the match to display to a user with relevant"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * information pertaining to the type of {@code Match}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public interface Match {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    String MESSAGE_INIT \u003d \"------------\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Returns the portion of the password in which a {@code Match} was found."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the {@code String} value of the {@code Match}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    String getToken();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Returns the start index of portion in the {@code PasswordValue}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the the start index"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    int getStartIndex();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Returns the end index of portion in the {@code PasswordValue}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the end index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    int getEndIndex();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Stringifies the details of the {@code Match} to be output in a report"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return all specific details about this {@code Match} in printable String format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    String toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/analyser/match/SequenceMatch.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents a {@code match} which was found  by {@code SequenceAnalyser}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class SequenceMatch extends BaseMatch {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs a {@code SequenceMatch}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param startIndex the start index in the {@code PasswordValue} which the sequence was found."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param endIndex the end index in the {@code PasswordValue} which the sequence was found."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param token the string in the {@code PasswordValue} which the sequence was found."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public SequenceMatch(int startIndex, int endIndex, String token) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        super(startIndex, endIndex, token);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return super.equals(obj);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return super.toString() + \"Type : Sequence Match\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/analyser/match/SimilarityMatch.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents a {@code match} which was found by {@code SimilarityAnalyser}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class SimilarityMatch extends BaseMatch implements Comparable\u003cSimilarityMatch\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private double similarity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private Password password;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs a {@code SimilarityMatch}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param startIndex the start index in the {@code PasswordValue} which the match was found."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param endIndex the end index in the {@code PasswordValue} which the match was found."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param token the string in the {@code PasswordValue} which the match was found."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param password the password found that was similar."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param similarity the similarity score for both passwords."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public SimilarityMatch(int startIndex, int endIndex, String token, Password password, double similarity) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        super(startIndex, endIndex, token);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.similarity \u003d similarity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public int compareTo(SimilarityMatch o) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return Double.compare(o.similarity, this.similarity);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return super.toString() + \"Type : Similarity Match\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                + \"Account : \" + this.password"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                + \"Similarity : \" + this.similarity + \"\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        SimilarityMatch that \u003d (SimilarityMatch) o;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return Double.compare(that.similarity, similarity) \u003d\u003d 0"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                \u0026\u0026 Objects.equals(password, that.password);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return Objects.hash(similarity, password);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/analyser/match/UniqueMatch.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents a {@code match} which was found  by {@code UniqueAnalyser}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class UniqueMatch extends BaseMatch {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private Password password;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs a {@code UniqueMatch}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param startIndex the start index in the {@code PasswordValue} which the match was found."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param endIndex the end index in the {@code PasswordValue} which the match was found."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param token the string in the {@code PasswordValue} which the match was found."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param password the password found that was the same."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public UniqueMatch(int startIndex, int endIndex, String token, Password password) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        super(startIndex, endIndex, token);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return super.toString() + \"Type : Unique Match\\n\" + \"Account : \" + this.password;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        UniqueMatch that \u003d (UniqueMatch) o;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return password.equals(that.password);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/analyser/report/AnalysisReport.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.result.Result;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents the Analysis Report formed from the {@code Result} objects from the various {@code Anlayser} Objects"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class AnalysisReport {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static final String MESSAGE_DIVIDER \u003d \"----------------------------------------\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static final String MESSAGE_INIT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            \"  ____                           ___ _____  \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + \" / ___|  ___  ___ _   _ _ __ ___|_ _|_   _| \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + \" \\\\___ \\\\ / _ \\\\/ __| | | | \u0027__/ _ \\\\| |  | |   \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + \"  ___) |  __/ (__| |_| | | |  __/| |  | |   \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + \" |____/ \\\\___|\\\\___|\\\\__,_|_|  \\\\___|___| |_|   \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + \"                                            \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + \"---- Password analysis ----\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                    + \"\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static final String MESSAGE_UNDERSCORE \u003d \"--------------------\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static final String COLUMN1 \u003d String.format(\"%-20s %-5s %-20s %-5s %-20s %-5s %-20s\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            MESSAGE_UNDERSCORE, \":\", MESSAGE_UNDERSCORE, \":\", MESSAGE_UNDERSCORE, \":\", MESSAGE_UNDERSCORE) + \"\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static final String COLUMN2 \u003d String.format(\"%-20s %-5s %-20s %-5s %-20s %-5s %-20s\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            \"Description\", \":\", \"Username\", \":\", \"Password\", \":\", \"Result\") + \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static final String MESSAGE_COLUMNS \u003d COLUMN1 + COLUMN2 + COLUMN1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private StringBuilder reportBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs an Analysis Report."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public AnalysisReport() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.reportBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        reportBuilder.append(MESSAGE_INIT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Writes summary information about analysis for all passwords."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void write(List\u003cResult\u003e results) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        reportBuilder.append(MESSAGE_COLUMNS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (Result o : results) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            reportBuilder.append(o);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        reportBuilder.append(\"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        //TODO good way to write title"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Writes further in-depth information about a specific result."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void write(Result result) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        reportBuilder.append(result.getGreaterDetail());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        reportBuilder.append(MESSAGE_DIVIDER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Writes header message for the various analysers."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param header"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void writeHeading(String header) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        reportBuilder.append(header);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Writes password in String format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param password"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void writePassword(Password password) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        reportBuilder.append(password);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        reportBuilder.append(MESSAGE_DIVIDER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return reportBuilder.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/analyser/result/DictionaryResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.match.DictionaryMatch;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.match.Match;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents a result produced from dictionary analyser."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class DictionaryResult extends Result {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private List\u003cDictionaryMatch\u003e matches;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public DictionaryResult(Password password, String description, List\u003cDictionaryMatch\u003e matches) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        super(password, description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.matches \u003d matches;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String getGreaterDetail() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StringBuilder report \u003d new StringBuilder(\"Result : \" + description + \"\\n\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (matches.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            report.append(\"No passwords were found to have contained common passwords\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return report.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (Match m : matches) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            report.append(m);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return report.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/analyser/result/Result.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents a result produced by an {@code Analyser} for a particular password."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Contains information about the description of the result, as well as the specific password."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Additionally it should be able to return greater details about the analysis performed by the {@code Analyser}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public abstract class Result {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    protected Password password;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Constructs a basic {@code Result}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param password the specific password to which the result holds information about."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param description the evaluation description of the {@code Analyser}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public Result(Password password, String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Sets the evaluation description of the Result."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @param description the evaluation description of the {@code Analyser}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Returns the evaluation description of the Result."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the description attribute."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Provides further in-depth information about the result produced by the {@code Analyser}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return the specific details of the result of analysis in string format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public abstract String getGreaterDetail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        Result that \u003d (Result) o;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return password.equals(that.password);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * Provides summary information about the results produced by the {@code Analyser}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     * @return brief detail of the result of analysis in string format."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return String.format(\"%-20s %-5s %-20s %-5s %-20s %-5s %-20s\", this.password.getPasswordDescription(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                \":\", this.password.getUsername(), \":\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                this.password.getPasswordValue() , \":\" , getDescription()) + \"\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 72,
      "hooncp": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/analyser/result/SequenceResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.match.Match;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.match.SequenceMatch;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents a result produced from sequence analyser."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class SequenceResult extends Result {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private List\u003cSequenceMatch\u003e matches;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public SequenceResult(Password password, String description, List\u003cSequenceMatch\u003e matches) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        super(password, description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.matches \u003d matches;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String getGreaterDetail() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StringBuilder report \u003d new StringBuilder(\"Result : \" + description + \"\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (matches.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            report.append(\"No passwords were found to have contained common sequences\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return report.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (Match m : matches) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            report.append(m);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return report.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/analyser/result/SimilarityResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.match.SimilarityMatch;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents a result produced from similarity analyser."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class SimilarityResult extends Result {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private List\u003cSimilarityMatch\u003e matches;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public SimilarityResult(Password password, String description, List\u003cSimilarityMatch\u003e matches) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        super(password, description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.matches \u003d matches;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String getGreaterDetail() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StringBuilder report \u003d new StringBuilder(\"Result : \" + description + \"\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (matches.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return report.append(\"No accounts with similar passwords were found\\n\").toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (SimilarityMatch m : matches) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            report.append(m); //TODO implement AccountMatches"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return report.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/analyser/result/StrengthResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents a result produced from strength analyser."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class StrengthResult extends Result {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private boolean hasMinimumLength \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private boolean hasLower \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private boolean hasUpper \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private boolean hasNum \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private boolean hasSpecial \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public StrengthResult(Password password, String description, boolean hasMinimumLength,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                          boolean hasLower, boolean hasUpper, boolean hasNum, boolean hasSpecial) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        super(password, description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.hasMinimumLength \u003d hasMinimumLength;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.hasLower \u003d hasLower;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.hasUpper \u003d hasUpper;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.hasNum \u003d hasNum;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.hasSpecial \u003d hasSpecial;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String getGreaterDetail() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StringBuilder report \u003d new StringBuilder(\"Result : \" + description + \"\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (!hasMinimumLength) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            report.append(\"[-] Try to have at least 8 character for password.\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (!hasLower || !hasUpper) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            report.append(\"[-] Try to include a mix a both upper and lower case letters.\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (!hasNum) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            report.append(\"[-] Try to include a numerals.\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (!hasSpecial) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            report.append(\"[-] Try to include a special characters.\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (hasMinimumLength \u0026\u0026 hasLower \u0026\u0026 hasUpper \u0026\u0026 hasNum \u0026\u0026 hasSpecial) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            report.append(\"Password is strong.\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return report.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (!super.equals(o)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StrengthResult that \u003d (StrengthResult) o;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return hasMinimumLength \u003d\u003d that.hasMinimumLength"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                \u0026\u0026 hasLower \u003d\u003d that.hasLower"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                \u0026\u0026 hasUpper \u003d\u003d that.hasUpper"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                \u0026\u0026 hasNum \u003d\u003d that.hasNum"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                \u0026\u0026 hasSpecial \u003d\u003d that.hasSpecial;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return Objects.hash(hasMinimumLength, hasLower, hasUpper, hasNum, hasSpecial);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/analyser/result/UniqueResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.match.UniqueMatch;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": " * Represents a result produced from unique analyser."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class UniqueResult extends Result {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private List\u003cUniqueMatch\u003e matches;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public UniqueResult(Password password, String description, List\u003cUniqueMatch\u003e matches) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        super(password, description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        this.matches \u003d matches;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public String getGreaterDetail() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StringBuilder report \u003d new StringBuilder(\"Result : \" + description + \"\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        if (matches.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return report.append(\"No accounts with same passwords were found\\n\").toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        report.append(\"The following accounts share the same password: \\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (UniqueMatch m : matches) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            report.append(m);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        return report.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/exceptions/DuplicatePasswordException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.model.password.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Signals that the operation will result in duplicate Password (Passwords are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class DuplicatePasswordException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public DuplicatePasswordException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(\"Operation would result in duplicate passwords\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/password/exceptions/PasswordNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.model.password.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Signals that the operation is unable to find the specified password."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class PasswordNotFoundException extends RuntimeException{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \"Name should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tag name entered is invalid!\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                        + \"It should be alphanumeric without spaces\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 2,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/DateUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Contains utility methods for parsing and formatting date and time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Constructs a Date object using the string supplied."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param rawDate the string to be parsed as a Date object in the format of dd/MM/yyyy HHmm."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the Date object parsed from the given string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if rawDate supplied is not in the format of dd/MM/yyyy HHmm."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static Date parseDate(String rawDate) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Date newDate \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(rawDate);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return newDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Converts a Date object into the storage format of dd/MM/yyyy HHmm."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param date the Date object to be converted."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the formatted date string, in the format of dd/MM/yyyy HHmm."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static String formatDate(Date date) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new SimpleDateFormat(\"dd/MM/yyyy HHmm\").format(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Converts a Date object into the display format of dd MMM yyyy at HH:mm."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param date the Date object to be converted."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the formatted date string, in the format of dd MMM yyyy at HH:mm."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static String formatDateForDisplay(Date date) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new SimpleDateFormat(\"dd MMM yyyy\").format(date) + \" at \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                + new SimpleDateFormat(\"HH:mm\").format(date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns true if the string supplied is in the format of dd/MM/yyyy HHmm."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static boolean isValidDateFormat(String rawDate) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(rawDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns the number of days that the password has before it expires."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param d1 Starting Date"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param d2 Ending Date"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return the number of days before the password expires."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static long findDaysPasswordExpireAt(Date d1, Date d2) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        long diff \u003d d2.getTime() - d1.getTime();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns the date one year after the last modification of the password."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param d1 starting date"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @return date one year after starting date"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static Date findPasswordExpireAt(Date d1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Calendar calender \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        calender.setTime(d1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        calender.add(Calendar.YEAR, 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Date newDate \u003d calender.getTime();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return newDate;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 55,
      "hooncp": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/FileNameUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Contains utility methods for formatting file names."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FileNameUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns a file name with the encrypted file prefix."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static String getFileNameWithPrefix(String input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (isFileNameWithPrefix(input)) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return EncryptedFile.PREFIX + \" \" + input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns a file name without the encrypted file prefix."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static String getFileNameWithoutPrefix(String input) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (isFileNameWithPrefix(input)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return input.substring(EncryptedFile.PREFIX.length() + 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Checks if a file name contains the encrypted file prefix."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static boolean isFileNameWithPrefix(String input) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return input.length() \u003e EncryptedFile.PREFIX.length() + 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 input.substring(0, EncryptedFile.PREFIX.length() + 1).equals(EncryptedFile.PREFIX + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataCardUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.CardBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.CardNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Cvc;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.ExpiryDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class SampleDataCardUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static Card[] getSampleCards() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return new Card[] {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            new Card(new Description(\"POSB Debit\"), new CardNumber(\"5248293058291847\"), new Cvc(\"023\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    new ExpiryDate(\"10/25\"), getTagSet(\"groceries\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            new Card(new Description(\"POSB Credit\"), new CardNumber(\"4238710593829573\"), new Cvc(\"521\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    new ExpiryDate(\"08/25\"), getTagSet(\"petrol\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            new Card(new Description(\"OCBC Debit\"), new CardNumber(\"5140284759384729\"), new Cvc(\"633\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    new ExpiryDate(\"03/23\"), getTagSet(\"waterbills\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            new Card(new Description(\"Maybank Credit\"), new CardNumber(\"5348375928375918\"), new Cvc(\"192\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    new ExpiryDate(\"11/18\"), getTagSet(\"electricitybills\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            new Card(new Description(\"HSBC Debit\"), new CardNumber(\"5358285730295837\"), new Cvc(\"923\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    new ExpiryDate(\"11/20\"), getTagSet(\"rent\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            new Card(new Description(\"HSBC Credit\"), new CardNumber(\"4137281958374028\"), new Cvc(\"294\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    new ExpiryDate(\"04/22\"), getTagSet(\"rent\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static CardBook getSampleCardBook() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        CardBook sampleCb \u003d new CardBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        for (Card sampleCard : getSampleCards()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            sampleCb.addCard(sampleCard);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return sampleCb;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataNotesUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.ReadOnlyNoteBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.VersionedNoteBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Contains utility methods for populating {@code PasswordBook} with sample data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class SampleDataNotesUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static Note[] getSampleNotes() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new Note[] {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "            new Note(new Title(\"Secret Diary\"), new Description(\"Keeps track of everyday things\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    getTagSet(\"Personal\"), new Content(\"Content of my everyday life\")),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "            new Note(new Title(\"Office tracker\"), new Description(\"Keeps track of my what i do in the office\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    getTagSet(\"Work\"), new Content(\"Content of my everyday office life\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "            new Note(new Title(\"Project information\"), new Description(\"Critical information for XYZ project\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    getTagSet(\"Work\"), new Content(\"Content of XYZ Project\"))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static ReadOnlyNoteBook getSampleNoteBook() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "        VersionedNoteBook sampleNb \u003d new VersionedNoteBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "        for (Note sampleNote : getSampleNotes()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "            sampleNb.addNote(sampleNote);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return sampleNb;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataPasswordUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.PasswordBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.ReadOnlyPasswordBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordDescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordModifiedAt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Username;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Website;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Contains utility methods for populating {@code PasswordBook} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class SampleDataPasswordUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static Password[] getSamplePasswords() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new Password[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        new PasswordValue(\"password\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        new Website(\"www.gmail.com\"), getTagSet(\"SocialMedia\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            new Password(new PasswordDescription(\"gmail\"), new Username(\"Randomguy1\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        new PasswordValue(\"password1\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        new Website(\"www.gmail.com\"), getTagSet(\"Work\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy2\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        new PasswordValue(\"password2\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        new Website(\"www.gmail.com\"), getTagSet(\"SocialMedia\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy3\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        new PasswordValue(\"password3\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        new Website(\"www.gmail.com\"), getTagSet(\"Game\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy4\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        new PasswordValue(\"password4\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        new Website(\"www.gmail.com\"), getTagSet(\"Help\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static ReadOnlyPasswordBook getSamplePasswordBook() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        PasswordBook samplePb \u003d new PasswordBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        for (Password samplePassword : getSamplePasswords()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            samplePb.addPassword(samplePassword);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return samplePb;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"family\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 1,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CardBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.CardBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.ReadOnlyCardBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Represents a storage for {@link seedu.address.model.CardBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public interface CardBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    Path getCardBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns CardBook data as a {@link CardBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    Optional\u003cReadOnlyCardBook\u003e readCardBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @see #getCardBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    Optional\u003cReadOnlyCardBook\u003e readCardBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Saves the given {@link CardBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @param cardBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    void saveCardBook(ReadOnlyCardBook cardBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @see #saveCardBook(ReadOnlyCardBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    void saveCardBook(ReadOnlyCardBook cardBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/FileBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Represents a storage for {@link seedu.address.model.FileBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public interface FileBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns the password used to store the file book and encrypt files."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    String getStoragePassword();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    Path getFileBookFilePath();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns FileBook data as a {@link ReadOnlyFileBook}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    Optional\u003cReadOnlyFileBook\u003e readFileBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @see #getFileBookFilePath()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    Optional\u003cReadOnlyFileBook\u003e readFileBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Saves the given {@link ReadOnlyFileBook} to the storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param fileBook cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void saveFileBook(ReadOnlyFileBook fileBook) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @see #saveFileBook(ReadOnlyFileBook)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void saveFileBook(ReadOnlyFileBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "niqiukun": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.CardNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Cvc;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.ExpiryDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Jackson-friendly version of {@link Card}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "class JsonAdaptedCard {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Card\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final String cardNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final String cvc;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final String expiryDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Constructs a {@code JsonAdaptedCard} with the given card details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public JsonAdaptedCard(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                           @JsonProperty(\"cardNumber\") String cardNumber,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                           @JsonProperty(\"cvc\") String cvc,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                           @JsonProperty(\"expiryDate\") String expiryDate,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.cardNumber \u003d cardNumber;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.cvc \u003d cvc;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Converts a given {@code Card} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public JsonAdaptedCard(Card source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        cardNumber \u003d source.getCardNumber().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        cvc \u003d source.getCvc().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        expiryDate \u003d source.getExpiryDate().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Converts this Jackson-friendly adapted card object into the model\u0027s {@code Card} object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted card."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Card toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        final List\u003cTag\u003e cardTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            cardTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (cardNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    CardNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (!CardNumber.isValidCardNumber(cardNumber)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new IllegalValueException(CardNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        final CardNumber modelCardNumber \u003d new CardNumber(cardNumber);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (cvc \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Cvc.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (!Cvc.isValidCvc(cvc)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new IllegalValueException(Cvc.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        final Cvc modelCvc \u003d new Cvc(cvc);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (expiryDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    ExpiryDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (!ExpiryDate.isValidExpiryDate(expiryDate)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new IllegalValueException(ExpiryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        final ExpiryDate modelExpiryDate \u003d new ExpiryDate(expiryDate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(cardTags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return new Card(modelDescription, modelCardNumber, modelCvc, modelExpiryDate, modelTags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedFile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedAt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FilePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.ModifiedAt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Jackson-friendly version of {@link seedu.address.model.file.EncryptedFile}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "class JsonAdaptedFile {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"File\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final String fileName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final String encryptedAt;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final String modifiedAt;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Constructs a {@code JsonAdaptedFile} with the given file details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public JsonAdaptedFile(@JsonProperty(\"filename\") String fileName,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                             @JsonProperty(\"path\") String filePath,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                             @JsonProperty(\"status\") String status,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                             @JsonProperty(\"encrypted_at\") String encryptedAt,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                             @JsonProperty(\"modified_at\") String modifiedAt,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.encryptedAt \u003d encryptedAt;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.modifiedAt \u003d modifiedAt;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Converts a given {@code EncryptedFile} into this class for Jackson use."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public JsonAdaptedFile(EncryptedFile source) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fileName \u003d source.getFileName().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        filePath \u003d source.getFilePath().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        status \u003d source.getFileStatus().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        encryptedAt \u003d DateUtil.formatDate(source.getEncryptedAt().value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        modifiedAt \u003d DateUtil.formatDate(source.getModifiedAt().value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public EncryptedFile toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final List\u003cTag\u003e fileTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            fileTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (fileName \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    FileName.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final FileName modelName \u003d new FileName(fileName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (filePath \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    FilePath.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final FilePath modelPath \u003d new FilePath(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (encryptedAt \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    EncryptedAt.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final EncryptedAt modelEncryptedAt;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            modelEncryptedAt \u003d new EncryptedAt(DateUtil.parseDate(encryptedAt));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new IllegalValueException(EncryptedAt.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (modifiedAt \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    ModifiedAt.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final ModifiedAt modelModifiedAt;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            modelModifiedAt \u003d new ModifiedAt(DateUtil.parseDate(modifiedAt));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new IllegalValueException(ModifiedAt.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    FileStatus.class.getSimpleName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final FileStatus modelFileStatus;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            modelFileStatus \u003d FileStatus.valueOf(status);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new IllegalValueException(\"File status is in wrong format\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(fileTags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new EncryptedFile(modelName, modelPath, modelFileStatus,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                modelTags, modelEncryptedAt, modelModifiedAt);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedNote.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.DateAdded;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.DateModified;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.NumOfAccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "class JsonAdaptedNote {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Note\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final String content;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final Date dateModified;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final Date dateAdded;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final int numOfAccess;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public JsonAdaptedNote(@JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "                           @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "                           @JsonProperty(\"content\") String content,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "                           @JsonProperty(\"dateModified\") Date dateModified,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "                           @JsonProperty(\"dateAdded\") Date dateAdded,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "                           @JsonProperty(\"numOfAccess\") int numOfAccess) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.dateModified \u003d dateModified;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.dateAdded \u003d dateAdded;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.numOfAccess \u003d numOfAccess;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public JsonAdaptedNote(Note source) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jityong"
        },
        "content": "        title \u003d source.getTitle().title;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jityong"
        },
        "content": "        description \u003d source.getDescription().description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": "        content \u003d source.getContent().content;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jityong"
        },
        "content": "        dateModified \u003d source.getDateModified().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jityong"
        },
        "content": "        dateAdded \u003d source.getDateAdded().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jityong"
        },
        "content": "        numOfAccess \u003d source.getNumOfAccess().numOfAccess;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jityong"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jityong"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Note toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jityong"
        },
        "content": "        final List\u003cTag\u003e noteTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jityong"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jityong"
        },
        "content": "            noteTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (content \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Content.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!Content.isValidContent(content)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new IllegalValueException(Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jityong"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jityong"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jityong"
        },
        "content": "        final Content modelContent \u003d new Content(content);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jityong"
        },
        "content": "        //TODO: insert assert dateModified and numOfAccess not null"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jityong"
        },
        "content": "        final DateModified modelDateModified \u003d new DateModified(dateModified);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jityong"
        },
        "content": "        final DateAdded modelDateAdded \u003d new DateAdded(dateAdded);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jityong"
        },
        "content": "        final NumOfAccess modelNumOfAccess \u003d new NumOfAccess(numOfAccess);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jityong"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(noteTags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new Note(modelTitle, modelDescription, modelTags, modelContent, modelDateModified,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jityong"
        },
        "content": "                modelDateAdded, modelNumOfAccess);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPassword.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordModifiedAt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Username;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Website;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Jackson-friendly version of {@link Password}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "class JsonAdaptedPassword {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Password\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final String username;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final String passwordValue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final String modifiedAt;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final String website;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Constructs a {@code JsonAdaptedPassword} with the given person details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public JsonAdaptedPassword(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                               @JsonProperty(\"username\") String username,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                               @JsonProperty(\"passwordValue\") String passwordValue,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                               @JsonProperty(\"modifiedAt\") String modifiedAt,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                               @JsonProperty(\"website\") String website,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                               @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.passwordValue \u003d passwordValue;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.modifiedAt \u003d modifiedAt;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.website \u003d website;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public JsonAdaptedPassword(Password password) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        description \u003d password.getPasswordDescription().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        username \u003d password.getUsername().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwordValue \u003d password.getPasswordValue().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        modifiedAt \u003d DateUtil.formatDate(password.getPasswordModifiedAt().value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        website \u003d password.getWebsite().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        tagged.addAll(password.getTags().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "               .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Password} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Password toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        final List\u003cTag\u003e passwordTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            passwordTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    PasswordDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        final PasswordDescription modelPasswordDescription \u003d new PasswordDescription(description);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (username \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    Username.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        final Username modelUserName \u003d new Username(username);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (passwordValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    PasswordValue.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        final PasswordValue modelPasswordValue \u003d new PasswordValue(passwordValue);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (modifiedAt \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    PasswordModifiedAt.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (website \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    Website.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        final Website modelWebsite \u003d new Website(website);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        final PasswordModifiedAt modelPasswordModifiedAt;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            modelPasswordModifiedAt \u003d new PasswordModifiedAt(DateUtil.parseDate(modifiedAt));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new IllegalValueException(PasswordModifiedAt.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(passwordTags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return new Password(modelPasswordDescription, modelUserName, modelPasswordValue, modelPasswordModifiedAt,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                modelWebsite, modelTags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**tagged"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 1,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public JsonAddressBookStorage(Path filePath, String password) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            jsonAddressBook \u003d JsonUtil.readJsonFile(filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            jsonAddressBook \u003d JsonUtil.readEncryptedJsonFile(filePath, JsonSerializableAddressBook.class, password);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            JsonUtil.saveEncryptedJsonFile(new JsonSerializableAddressBook(addressBook), filePath, password);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 16,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonCardBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.ReadOnlyCardBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * A class to access CardBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class JsonCardBookStorage implements CardBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCardBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public JsonCardBookStorage(Path filePath, String password) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Path getCardBookFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Optional\u003cReadOnlyCardBook\u003e readCardBook() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return readCardBook(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Similar to {@link #readCardBook()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Optional\u003cReadOnlyCardBook\u003e readCardBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        Optional\u003cJsonSerializableCardBook\u003e jsonCardBook;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            jsonCardBook \u003d JsonUtil.readJsonFile(filePath, JsonSerializableCardBook.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            jsonCardBook \u003d JsonUtil.readEncryptedJsonFile(filePath, JsonSerializableCardBook.class, password);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (!jsonCardBook.isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return Optional.of(jsonCardBook.get().toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void saveCardBook(ReadOnlyCardBook cardBook) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        saveCardBook(cardBook, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Similar to {@link #saveCardBook(ReadOnlyCardBook)}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void saveCardBook(ReadOnlyCardBook cardBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(cardBook);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableCardBook(cardBook), filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            JsonUtil.saveEncryptedJsonFile(new JsonSerializableCardBook(cardBook), filePath, password);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonFileBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * A class to access FileBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class JsonFileBookStorage implements FileBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFileBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public JsonFileBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public JsonFileBookStorage(Path filePath, String password) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String getStoragePassword() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Path getFileBookFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Optional\u003cReadOnlyFileBook\u003e readFileBook() throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return readFileBook(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Similar to {@link #readFileBook()}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Optional\u003cReadOnlyFileBook\u003e readFileBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Optional\u003cJsonSerializableFileBook\u003e jsonFileBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            jsonFileBook \u003d JsonUtil.readJsonFile(filePath, JsonSerializableFileBook.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            jsonFileBook \u003d JsonUtil.readEncryptedJsonFile(filePath, JsonSerializableFileBook.class, password);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!jsonFileBook.isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return Optional.of(jsonFileBook.get().toModelType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void saveFileBook(ReadOnlyFileBook fileBook) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        saveFileBook(fileBook, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Similar to {@link #saveFileBook(ReadOnlyFileBook)}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void saveFileBook(ReadOnlyFileBook fileBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(fileBook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableFileBook(fileBook), filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            JsonUtil.saveEncryptedJsonFile(new JsonSerializableFileBook(fileBook), filePath, password);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "niqiukun": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonNoteBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.ReadOnlyNoteBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class JsonNoteBookStorage implements NoteBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonNoteBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public JsonNoteBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public JsonNoteBookStorage(Path filePath, String password) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Path getNoteBookFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Optional\u003cReadOnlyNoteBook\u003e readNoteBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return readNoteBook(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Similar to {@link #readNoteBook()}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Optional\u003cReadOnlyNoteBook\u003e readNoteBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "        Optional\u003cJsonSerializableNoteBook\u003e jsonNoteBook;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "            jsonNoteBook \u003d JsonUtil.readJsonFile(filePath, JsonSerializableNoteBook.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "            jsonNoteBook \u003d JsonUtil.readEncryptedJsonFile(filePath, JsonSerializableNoteBook.class, password);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!jsonNoteBook.isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jityong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return Optional.of(jsonNoteBook.get().toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jityong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jityong"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void saveNoteBook(ReadOnlyNoteBook noteBook) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jityong"
        },
        "content": "        saveNoteBook(noteBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Similar to {@link #saveNoteBook(ReadOnlyNoteBook)}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void saveNoteBook(ReadOnlyNoteBook noteBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(noteBook);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jityong"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jityong"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jityong"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableNoteBook(noteBook), filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jityong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jityong"
        },
        "content": "            JsonUtil.saveEncryptedJsonFile(new JsonSerializableNoteBook(noteBook), filePath, password);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPasswordBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.ReadOnlyPasswordBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * A class to access PasswordBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class JsonPasswordBookStorage implements PasswordBookStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPasswordBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public JsonPasswordBookStorage(Path filePath, String password) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Path getPasswordBookFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Optional\u003cReadOnlyPasswordBook\u003e readPasswordBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return readPasswordBook(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Optional\u003cReadOnlyPasswordBook\u003e readPasswordBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(filePath, password);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Optional\u003cJsonSerializablePasswordBook\u003e jsonPasswordBook;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        jsonPasswordBook \u003d JsonUtil.readEncryptedJsonFile(filePath, JsonSerializablePasswordBook.class, password);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!jsonPasswordBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return Optional.of(jsonPasswordBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void savePasswordBook(ReadOnlyPasswordBook passwordBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        savePasswordBook(passwordBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void savePasswordBook(ReadOnlyPasswordBook passwordBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireAllNonNull(filePath, passwordBook, password);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        JsonUtil.saveEncryptedJsonFile(new JsonSerializablePasswordBook(passwordBook), filePath, password);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableCardBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.CardBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.ReadOnlyCardBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * An Immutable CardBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "@JsonRootName(value \u003d \"cardbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "class JsonSerializableCardBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD \u003d \"Cards list contains duplicate card(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final List\u003cJsonAdaptedCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Constructs a {@code JsonSerializableCardBook} with the given cards."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public JsonSerializableCardBook(@JsonProperty(\"cards\") List\u003cJsonAdaptedCard\u003e cards) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.cards.addAll(cards);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Converts a given {@code CardBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCardBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public JsonSerializableCardBook(ReadOnlyCardBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        cards.addAll(source.getCardList().stream().map(JsonAdaptedCard::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Converts this card book into the model\u0027s {@code CardBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public CardBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        CardBook cardBook \u003d new CardBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        for (JsonAdaptedCard jsonAdaptedCard : cards) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            Card card \u003d jsonAdaptedCard.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            if (cardBook.hasCard(card)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            cardBook.addCard(card);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return cardBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableFileBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.FileBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * An Immutable FileBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "@JsonRootName(value \u003d \"filebook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "class JsonSerializableFileBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Files list contains duplicate file(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final List\u003cJsonAdaptedFile\u003e files \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Constructs a {@code JsonSerializableFileBook} with the given files."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public JsonSerializableFileBook(@JsonProperty(\"files\") List\u003cJsonAdaptedFile\u003e files) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.files.addAll(files);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Converts a given {@code ReadOnlyFileBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFileBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public JsonSerializableFileBook(ReadOnlyFileBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        files.addAll(source.getFileList().stream().map(JsonAdaptedFile::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Converts this file book into the model\u0027s {@code FileBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FileBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FileBook fileBook \u003d new FileBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        for (JsonAdaptedFile jsonAdaptedFile : files) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            EncryptedFile file \u003d jsonAdaptedFile.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            if (fileBook.hasFile(file)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            fileBook.addFile(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return fileBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableNoteBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.NoteBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.ReadOnlyNoteBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "@JsonRootName(value \u003d \"notebook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "class JsonSerializableNoteBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"Notes list contains duplicate note(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final List\u003cJsonAdaptedNote\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public JsonSerializableNoteBook(@JsonProperty(\"notes\") List\u003cJsonAdaptedNote\u003e notes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.notes.addAll(notes);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public JsonSerializableNoteBook(ReadOnlyNoteBook source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "        notes.addAll(source.getNoteList().stream().map(JsonAdaptedNote::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NoteBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "        NoteBook noteBook \u003d new NoteBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "        for (JsonAdaptedNote jsonAdaptedNote : notes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "            Note note \u003d jsonAdaptedNote.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "            if (noteBook.hasNote(note)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "            noteBook.addNote(note);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return noteBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializablePasswordBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.PasswordBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.ReadOnlyPasswordBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "@JsonRootName(value \u003d \"passwordbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "class JsonSerializablePasswordBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Password list contains duplicate password(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private final List\u003cJsonAdaptedPassword\u003e passwords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public JsonSerializablePasswordBook(@JsonProperty(\"passwords\") List\u003cJsonAdaptedPassword\u003e passwords) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.passwords.addAll(passwords);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Converts a given {@code PasswordBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePasswordBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public JsonSerializablePasswordBook(ReadOnlyPasswordBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwords.addAll(source.getPasswordList().stream().map(JsonAdaptedPassword::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Converts this address book into the model\u0027s {@code PasswordBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public PasswordBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        PasswordBook passwordBook \u003d new PasswordBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        for (JsonAdaptedPassword jsonAdaptedPassword : passwords) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            Password password \u003d jsonAdaptedPassword.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            if (passwordBook.hasPassword(password)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            passwordBook.addPassword(password);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return passwordBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath, String password) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return JsonUtil.readEncryptedJsonFile(prefsFilePath, UserPrefs.class, password);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            JsonUtil.saveEncryptedJsonFile(userPrefs, filePath, password);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 14,
      "jityong": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/NoteBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.ReadOnlyNoteBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Represents a storage for {@link seedu.address.model.VersionedNoteBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "public interface NoteBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "    Path getNoteBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns NoteBook data as a {@link ReadOnlyNoteBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "    Optional\u003cReadOnlyNoteBook\u003e readNoteBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @see #getNoteBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "    Optional\u003cReadOnlyNoteBook\u003e readNoteBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Saves the given {@link ReadOnlyNoteBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @param noteBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "    void saveNoteBook(ReadOnlyNoteBook noteBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @see #saveNoteBook(ReadOnlyNoteBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "    void saveNoteBook(ReadOnlyNoteBook noteBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PasswordBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.PasswordBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.ReadOnlyPasswordBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Represents a storage for {@link seedu.address.model.PasswordBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public interface PasswordBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    Path getPasswordBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Returns PasswordBook data as a {@link PasswordBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    Optional\u003cReadOnlyPasswordBook\u003e readPasswordBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @see #getPasswordBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    Optional\u003cReadOnlyPasswordBook\u003e readPasswordBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Saves the given {@link PasswordBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param passwordBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    void savePasswordBook(ReadOnlyPasswordBook passwordBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @see #savePasswordBook(ReadOnlyPasswordBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    void savePasswordBook(ReadOnlyPasswordBook passwordBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.ReadOnlyCardBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.ReadOnlyNoteBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.ReadOnlyPasswordBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "public interface Storage extends AddressBookStorage, FileBookStorage, CardBookStorage,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        NoteBookStorage, PasswordBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    String getStoragePassword();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    Path getFileBookFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    Optional\u003cReadOnlyFileBook\u003e readFileBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void saveFileBook(ReadOnlyFileBook fileBook) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    Path getCardBookFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    Optional\u003cReadOnlyCardBook\u003e readCardBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    void saveCardBook(ReadOnlyCardBook cardBook) throws IOException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": "    Path getNoteBookFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jityong"
        },
        "content": "    Optional\u003cReadOnlyNoteBook\u003e readNoteBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jityong"
        },
        "content": "    void saveNoteBook(ReadOnlyNoteBook noteBook) throws IOException;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    Path getPasswordBookFilePath();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    Optional\u003cReadOnlyPasswordBook\u003e readPasswordBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    void savePasswordBook(ReadOnlyPasswordBook passwordBook) throws IOException;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 13,
      "yhtingg": 9,
      "jityong": 10,
      "hooncp": 12,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.ReadOnlyCardBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.ReadOnlyNoteBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.ReadOnlyPasswordBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private FileBookStorage fileBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private CardBookStorage cardBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private NoteBookStorage noteBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private PasswordBookStorage passwordBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                          FileBookStorage fileBookStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                          CardBookStorage cardBookStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "                          NoteBookStorage noteBookStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                          PasswordBookStorage passwordBookStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "                          UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "                          String password) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.fileBookStorage \u003d fileBookStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.cardBookStorage \u003d cardBookStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.noteBookStorage \u003d noteBookStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.passwordBookStorage \u003d passwordBookStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String getStoragePassword() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FileBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Path getFileBookFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return fileBookStorage.getFileBookFilePath();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Optional\u003cReadOnlyFileBook\u003e readFileBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return readFileBook(fileBookStorage.getFileBookFilePath());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Optional\u003cReadOnlyFileBook\u003e readFileBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return fileBookStorage.readFileBook(filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void saveFileBook(ReadOnlyFileBook fileBook) throws IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        saveFileBook(fileBook, fileBookStorage.getFileBookFilePath());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void saveFileBook(ReadOnlyFileBook fileBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fileBookStorage.saveFileBook(fileBook, filePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CardBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Path getCardBookFilePath() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return cardBookStorage.getCardBookFilePath();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Optional\u003cReadOnlyCardBook\u003e readCardBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return readCardBook(cardBookStorage.getCardBookFilePath());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Optional\u003cReadOnlyCardBook\u003e readCardBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return cardBookStorage.readCardBook(filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void saveCardBook(ReadOnlyCardBook cardBook) throws IOException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        saveCardBook(cardBook, cardBookStorage.getCardBookFilePath());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void saveCardBook(ReadOnlyCardBook cardBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        cardBookStorage.saveCardBook(cardBook, filePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jityong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d NoteBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Path getNoteBookFilePath() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return noteBookStorage.getNoteBookFilePath();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Optional\u003cReadOnlyNoteBook\u003e readNoteBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return readNoteBook(noteBookStorage.getNoteBookFilePath());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Optional\u003cReadOnlyNoteBook\u003e readNoteBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jityong"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return noteBookStorage.readNoteBook(filePath);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void saveNoteBook(ReadOnlyNoteBook noteBook) throws IOException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jityong"
        },
        "content": "        saveNoteBook(noteBook, noteBookStorage.getNoteBookFilePath());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void saveNoteBook(ReadOnlyNoteBook noteBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jityong"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteBookStorage.saveNoteBook(noteBook, filePath);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PasswordBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Path getPasswordBookFilePath() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Optional\u003cReadOnlyPasswordBook\u003e readPasswordBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return readPasswordBook(passwordBookStorage.getPasswordBookFilePath());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public Optional\u003cReadOnlyPasswordBook\u003e readPasswordBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return passwordBookStorage.readPasswordBook(filePath);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void savePasswordBook(ReadOnlyPasswordBook passwordBook) throws IOException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        savePasswordBook(passwordBook, passwordBookStorage.getPasswordBookFilePath());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void savePasswordBook(ReadOnlyPasswordBook passwordBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwordBookStorage.savePasswordBook(passwordBook, filePath);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 40,
      "yhtingg": 33,
      "jityong": 35,
      "hooncp": 32,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TestStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.util.EncryptionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Handles initialisation and validation of master password."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class TestStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String MAGIC_WORD \u003d \"hello world\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String TEST_FILENAME \u003d \"magic_word\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Initialises a master password and store the encrypted magic word in the storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the master password."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IOException if the master password cannot be stored."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static void initPassword(String password) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            byte[] encryptedByteArray \u003d EncryptionUtil.encryptBytesFromString(MAGIC_WORD, password);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Files.write(Paths.get(TEST_FILENAME), encryptedByteArray);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new IOException(\"Init password failed.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns whether the given password matches the master password set previously."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the given password."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return whether the given password matches the master password."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IOException if the encrypted magic word file cannot be retrieved."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static boolean testPassword(String password) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        byte[] byteArrayFromFile \u003d Files.readAllBytes(Paths.get(TEST_FILENAME));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            String decryptedMagicWord \u003d EncryptionUtil.decryptBytesToString(byteArrayFromFile, password);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return MAGIC_WORD.equals(decryptedMagicWord);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns whether the user has already set the master password."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return whether the master password is already set."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static boolean isUserExist() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return Files.exists(Paths.get(TEST_FILENAME));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CardCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * An UI component that displays information of a {@code Card}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class CardCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private static final String FXML \u003d \"CardListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public final Card c;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private Label cardNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public CardCard(Card card, int displayedIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.c \u003d card;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        description.setText(card.getDescription().value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        cardNumber.setText(card.getCardNumber().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        c.getTags().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Region getRoot() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return super.getRoot();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (!(other instanceof CardCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        CardCard card \u003d (CardCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u0026\u0026 c.equals(card.c);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CardListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.lang.reflect.Constructor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Panel containing the list of cards."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class CardListPanel \u003cT extends Card\u003e extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private static final String FXML \u003d \"CardListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CardListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private ListView\u003cT\u003e cardListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public CardListPanel(ObservableList\u003cT\u003e cardList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this(cardList, CardCard.class, Card.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    CardListPanel(ObservableList\u003cT\u003e cardList, Class\u003cCardCard\u003e cardCardClass, Class\u003cCard\u003e cardClass) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        cardListView.setItems(cardList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        cardListView.setCellFactory(listView -\u003e new CardListViewCell(cardCardClass, cardClass));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public Region getRoot() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return super.getRoot();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Card} using a {@code CardCard}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    class CardListViewCell\u003cR extends CardCard\u003e extends ListCell\u003cT\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        private Constructor\u003cR\u003e constructor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        CardListViewCell(Class\u003cR\u003e cardCardClass, Class\u003cT\u003e cardClass) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                this.constructor \u003d cardCardClass.getConstructor(cardClass, int.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            } catch (NoSuchMethodException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        protected void updateItem(T card, boolean empty) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            super.updateItem(card, empty);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            if (empty || card \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    setGraphic(constructor.newInstance(card, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.input.DragEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.input.Dragboard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.input.TransferMode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.exceptions.DictionaryException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (CommandException | ParseException | DictionaryException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Handles drag over event."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private void handleDragOver(DragEvent event) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (event.getGestureSource() !\u003d this"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 event.getDragboard().hasFiles()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            event.acceptTransferModes(TransferMode.COPY_OR_MOVE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        event.consume();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Handles drag dropped event."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private void handleDragDropped(DragEvent event) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Dragboard dragboard \u003d event.getDragboard();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        boolean success \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (dragboard.hasFiles()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            commandTextField.setText(commandTextField.getText() + dragboard.getFiles().get(0).toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            success \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        event.setDropCompleted(success);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        event.consume();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, DictionaryException;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 31,
      "eejian97": 3,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DialogManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.control.ButtonType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.control.Dialog;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.control.PasswordField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * The manager of dialogs to display information and get user input outside MainWindow."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class DialogManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Shows a dialog which allows the user to set a new master password."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the user\u0027s response."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static Optional\u003cString\u003e showCreatePasswordDialog(boolean isPasswordInvalid) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Dialog\u003cString\u003e dialog \u003d new Dialog\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        dialog.setTitle(\"SecureIT\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        dialog.setHeaderText(\"Create your master password\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        VBox content \u003d new VBox();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Label warningLabel \u003d new Label();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        warningLabel.setText("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \"The master password and all data stored by SecureIT\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                + \"are NOT recoverable if you lose the master password.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                + \"Please remember it carefully.\\n \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Label label1 \u003d new Label();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        label1.setText(\"Password: \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        PasswordField passwordField \u003d new PasswordField();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Label label2 \u003d new Label();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        label2.setText(\"Confirm Password: \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        PasswordField confirmPasswordField \u003d new PasswordField();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Label wrongLabel \u003d new Label();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        wrongLabel.setText("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \"The password is empty or the two passwords do not\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                + \"match. Please try again.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        wrongLabel.setTextFill(Color.RED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (isPasswordInvalid) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            content.getChildren()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    .addAll(warningLabel, label1, passwordField, label2, confirmPasswordField, wrongLabel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            content.getChildren()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    .addAll(warningLabel, label1, passwordField, label2, confirmPasswordField);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        dialog.getDialogPane().setContent(content);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        dialog.getDialogPane().getButtonTypes().addAll(ButtonType.OK, ButtonType.CANCEL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        dialog.setResultConverter(dialogButton -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            if (dialogButton \u003d\u003d ButtonType.OK) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                if (passwordField.getText().equals(confirmPasswordField.getText())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    return confirmPasswordField.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    return \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return dialog.showAndWait();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Shows a dialog which requires the user to input the master password for validation."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the user\u0027s response."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static Optional\u003cString\u003e showValidatePasswordDialog(boolean isPasswordIncorrect) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Dialog\u003cString\u003e dialog \u003d new Dialog\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        dialog.setTitle(\"SecureIT\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        dialog.setHeaderText(\"Enter your master password\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        VBox content \u003d new VBox();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Label label \u003d new Label();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        label.setText(\"Password: \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Label wrongLabel \u003d new Label();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        wrongLabel.setText(\"Wrong password. Please try again.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        wrongLabel.setTextFill(Color.RED);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        PasswordField passwordField \u003d new PasswordField();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (isPasswordIncorrect) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            content.getChildren().addAll(label, passwordField, wrongLabel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            content.getChildren().addAll(label, passwordField);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        dialog.getDialogPane().setContent(content);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        dialog.getDialogPane().getButtonTypes().addAll(ButtonType.OK, ButtonType.CANCEL);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        dialog.setResultConverter(dialogButton -\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            if (dialogButton \u003d\u003d ButtonType.OK) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                return passwordField.getText();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return dialog.showAndWait();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpiringCardCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.ExpiringCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * An UI component that displays information of a {@code ExpiringCard}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class ExpiringCardCard extends CardCard {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private VBox detailsContainer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public ExpiringCardCard(ExpiringCard card, int displayedIndex) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        super(card, displayedIndex);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.detailsContainer.getChildren().add("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                new Label(\"Expires in \" + Integer.toString(card.getMonthToExp())"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                        + (card.getMonthToExp() \u003d\u003d 1 ? \" month\" : \" months\")));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpiringCardListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.ExpiringCard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Panel containing the list of expiring cards."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class ExpiringCardListPanel extends CardListPanel {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public ExpiringCardListPanel(ObservableList\u003cExpiringCard\u003e cardList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        super(cardList, ExpiringCardCard.class, ExpiringCard.class);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpiryDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.ExpiringCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * Controller for a ExpiryDisplay page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class ExpiryDisplay extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private static final String EXPIRY_MESSAGE \u003d \"The following card(s) are expiring soon:\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ExpiryDisplay.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private static final String FXML \u003d \"ExpiryDisplay.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private ObservableList\u003cExpiringCard\u003e expiringCards;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private Label expiryMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private StackPane expiringCardListPlaceholder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Creates a new ExpiryDisplay."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @param root Stage to use as the root of the ExpiryDisplay."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public ExpiryDisplay(Stage root, ObservableList\u003cExpiringCard\u003e expiringCards) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.expiringCards \u003d expiringCards;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        expiryMessage.setText(EXPIRY_MESSAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        ExpiringCardListPanel expiringCardListPanel \u003d new ExpiringCardListPanel(expiringCards);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        expiringCardListPlaceholder.getChildren().addAll(expiringCardListPanel.getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Creates a new ExpiryDisplay."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public ExpiryDisplay(ObservableList\u003cExpiringCard\u003e expiringCards) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this(new Stage(), expiringCards);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean hasCards() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return !expiringCards.isEmpty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Shows the expiry display window."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        logger.fine(\"Displaying card expiry.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Returns true if the expiry display window is currently being shown."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Hides the expiry display window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Focuses on the expiry display window."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yhtingg": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FileCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileStatus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * An UI component that displays information of an {@code EncryptedFile}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FileCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String FXML \u003d \"FileListCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public final EncryptedFile file;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private Label path;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private Label encryptedAt;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private Label modifiedAt;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FileCard(EncryptedFile file, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        String statusText;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (file.getFileStatus() \u003d\u003d FileStatus.ACTIVE) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            statusText \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            statusText \u003d \" [\" + file.getFileStatus() + \"]\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        name.setText(file.getFileName().value + statusText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        path.setText(\"Location:\\t\\t\" + file.getFilePath().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Date fileEncryptedAt \u003d file.getEncryptedAt().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (fileEncryptedAt.equals(new Date(0))) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            encryptedAt.setText(\"Encrypted:\\tUnknown\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            encryptedAt.setText(\"Encrypted: \\t\" + DateUtil.formatDateForDisplay(fileEncryptedAt));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Date fileModifiedAt \u003d file.getModifiedAt().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (fileModifiedAt.equals(new Date(0))) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            modifiedAt.setText(\"Last edited:\\tUnknown\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            modifiedAt.setText(\"Last edited:\\t\" + DateUtil.formatDateForDisplay(fileModifiedAt));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        file.getTags().stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!(other instanceof FileCard)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FileCard card \u003d (FileCard) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 file.equals(card.file);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FileListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FileListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String FXML \u003d \"FileListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FileListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private ListView\u003cEncryptedFile\u003e fileListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FileListPanel(ObservableList\u003cEncryptedFile\u003e fileList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fileListView.setItems(fileList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fileListView.setCellFactory(listView -\u003e new FileListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code EncryptedFile} using a {@code FileCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    class FileListViewCell extends ListCell\u003cEncryptedFile\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        protected void updateItem(EncryptedFile file, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            super.updateItem(file, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            if (empty || file \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                setGraphic(new FileCard(file, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FilePreviewPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import org.apache.pdfbox.rendering.PDFRenderer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import org.apache.poi.xwpf.extractor.XWPFWordExtractor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import org.apache.poi.xwpf.usermodel.XWPFDocument;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.embed.swing.SwingFXUtils;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.ViewableFile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * A Ui for previewing encrypted files when the preview command is called."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FilePreviewPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String FXML \u003d \"FilePreviewPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private VBox placeHolder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private Label filenameLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private Label metadataLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private TextArea previewTextArea;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private ImageView previewImage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FilePreviewPanel() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFeedbackToUser(ViewableFile file) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        filenameLabel.setText(file.getFileName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        switch (file.getFileType()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case TEXT:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            placeHolder.getChildren().removeAll(previewImage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            previewTextArea.setText((String) file.getFileContent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            metadataLabel.setText(\"Plain Text\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case IMAGE:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            previewImage.setPreserveRatio(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            placeHolder.getChildren().removeAll(previewTextArea);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            BufferedImage image \u003d (BufferedImage) file.getFileContent();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            previewImage.setImage(SwingFXUtils.toFXImage(image, null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            metadataLabel.setText(\"Image | \" + image.getWidth() + \" x \" + image.getHeight());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case PDF:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            previewImage.setPreserveRatio(true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            placeHolder.getChildren().removeAll(previewTextArea);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            PDDocument pdf \u003d (PDDocument) file.getFileContent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            PDFRenderer renderer \u003d new PDFRenderer(pdf);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                previewImage.setImage(SwingFXUtils.toFXImage(renderer.renderImage(0), null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                filenameLabel.setText(\"Fails to render PDF\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            metadataLabel.setText(\"PDF | \" + pdf.getNumberOfPages() + \" Page(s)\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            placeHolder.getChildren().removeAll(previewImage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            XWPFWordExtractor extractor \u003d new XWPFWordExtractor((XWPFDocument) file.getFileContent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            previewTextArea.setText(extractor.getText());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            metadataLabel.setText(\"MS Word Document\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://deploy-preview-62--nus-cs2103-ay1920s1.netlify.com/userguide\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.exceptions.DictionaryException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.ViewableFile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.report.AnalysisReport;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private FileListPanel fileListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private CardListPanel cardListPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private NoteListPanel noteListPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private PasswordListPanel passwordListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private ReadDisplayPassword readDisplayPassword;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private OpenDisplayNote openDisplayNote;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private ReadDisplayCard readDisplayCard;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private ExpiryDisplay expiryDisplay;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private ReadDisplayPasswordReport readDisplayPasswordReport;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private FilePreviewPanel filePreviewPanel;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private StackPane objectListPanelPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private StackPane cardListPanelPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private StackPane noteListPanelPlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private StackPane passwordListPanelPlaceholder;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private StackPane readListPanelPlaceholder;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private StackPane modeListPanelPlaceholder;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private VBox modeList;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private VBox objectList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private VBox readList;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Button b1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Button b2;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Button b3;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Button b4;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        readList.setVisible(false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        expiryDisplay \u003d new ExpiryDisplay(logic.getExpiringCardList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fillInnerPartsWithMode();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Toggles button according to logic."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    void toggleButton() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        b1.setDisable(false);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        b2.setDisable(false);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        b3.setDisable(false);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        b4.setDisable(false);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        switch (logic.getMode()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case PASSWORD:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            b1.setDisable(true);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case FILE:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            b2.setDisable(true);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case CARD:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            b3.setDisable(true);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case NOTE:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            b4.setDisable(true);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            b1.setDisable(false);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            b2.setDisable(false);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            b3.setDisable(false);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            b4.setDisable(false);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Fills up all the read display of this window."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param object Object to be read"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param index Index of the object in the filtered list"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jityong"
        },
        "content": "    void fillReadParts(Object object, Index index) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (object instanceof Password) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jityong"
        },
        "content": "            readDisplayPassword \u003d new ReadDisplayPassword();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jityong"
        },
        "content": "            readDisplayPassword.setLogic(logic);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jityong"
        },
        "content": "            readListPanelPlaceholder.getChildren().add(readDisplayPassword.getRoot());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            readDisplayPassword.setFeedbackToUser((Password) object, index);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jityong"
        },
        "content": "        } else if (object instanceof Note) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jityong"
        },
        "content": "            openDisplayNote \u003d new OpenDisplayNote();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jityong"
        },
        "content": "            openDisplayNote.setLogic(logic);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jityong"
        },
        "content": "            //TODO bad coupling? how else to implement though?"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jityong"
        },
        "content": "            openDisplayNote.setMainWindow(this);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jityong"
        },
        "content": "            readListPanelPlaceholder.getChildren().add(openDisplayNote.getRoot());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jityong"
        },
        "content": "            openDisplayNote.setFeedbackToUser((Note) object, index);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } else if (object instanceof AnalysisReport) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            readList.setMinWidth(600);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            readDisplayPasswordReport \u003d new ReadDisplayPasswordReport();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            readListPanelPlaceholder.getChildren().add(readDisplayPasswordReport.getRoot());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            //readListPanelPlaceholder.prefWidthProperty().bind(primaryStage.widthProperty().multiply(0.80));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            readDisplayPasswordReport.setFeedbackToUser(object.toString());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        } else if (object instanceof Card) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            readDisplayCard \u003d new ReadDisplayCard();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            readDisplayCard.setLogic(logic);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            readListPanelPlaceholder.getChildren().add(readDisplayCard.getRoot());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            readDisplayCard.setFeedbackToUser((Card) object);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else if (object instanceof ViewableFile) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            filePreviewPanel \u003d new FilePreviewPanel();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            readListPanelPlaceholder.getChildren().add(filePreviewPanel.getRoot());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            filePreviewPanel.setFeedbackToUser((ViewableFile) object);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Fills up all the placeholders of this window using the current mode."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void fillInnerPartsWithMode() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        toggleButton();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        switch (logic.getMode()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case FILE:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            fileListPanel \u003d new FileListPanel(logic.getFilteredFileList());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jityong"
        },
        "content": "            objectListPanelPlaceholder.getChildren().add(fileListPanel.getRoot());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            statusbarPlaceholder.getChildren().add("
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    new StatusBarFooter(logic.getFileBookFilePath()).getRoot());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case CARD:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            cardListPanel \u003d new CardListPanel(logic.getFilteredCardList());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jityong"
        },
        "content": "            objectListPanelPlaceholder.getChildren().add(cardListPanel.getRoot());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            statusbarPlaceholder.getChildren().add("
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    new StatusBarFooter(logic.getCardBookFilePath()).getRoot());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case NOTE:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jityong"
        },
        "content": "            noteListPanel \u003d new NoteListPanel(logic.getFilteredNoteList());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jityong"
        },
        "content": "            objectListPanelPlaceholder.getChildren().add(noteListPanel.getRoot());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            statusbarPlaceholder.getChildren().add("
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    new StatusBarFooter(logic.getNoteBookFilePath()).getRoot());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jityong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case PASSWORD:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            passwordListPanel \u003d new PasswordListPanel(logic.getFilteredPasswordList());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            objectListPanelPlaceholder.getChildren().add(passwordListPanel.getRoot());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            statusbarPlaceholder.getChildren().add("
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    new StatusBarFooter(logic.getPasswordBookFilePath()).getRoot());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jityong"
        },
        "content": "            objectListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            statusbarPlaceholder.getChildren().add("
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    new StatusBarFooter(logic.getAddressBookFilePath()).getRoot());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Handle UI changes on mode change."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void handleModeChange() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jityong"
        },
        "content": "        objectListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fillInnerPartsWithMode();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * Opens the expiry display window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void handleExpiry() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        if (expiryDisplay.hasCards()) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            if (!expiryDisplay.isShowing()) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                expiryDisplay.show();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                expiryDisplay.focus();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NoteListPanel getNoteListPanel() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return noteListPanel;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jityong"
        },
        "content": "    CommandResult executeCommand(String commandText) throws CommandException,"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            ParseException, DictionaryException {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        readList.setVisible(false);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        readList.setMinWidth(0);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            if (commandResult.isGoTo()) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                logic.setMode(commandResult.getModeToGoTo());"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                handleModeChange();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            if (commandResult.isRead()) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                readList.setVisible(true);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                readListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jityong"
        },
        "content": "                readList.setMinWidth(420);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jityong"
        },
        "content": "                fillReadParts(commandResult.getObject(), commandResult.getIndex());"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (CommandException | ParseException | DictionaryException e) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "niqiukun": 43,
      "yhtingg": 33,
      "jityong": 39,
      "eejian97": 11,
      "hooncp": 79,
      "-": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NoteCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class NoteCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private static final String FXML \u003d \"NoteListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public final Note note;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Label content;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Label numOfAccess;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Label dateModified;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Label dateAdded;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NoteCard(Note note, int displayedIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "        title.setText(note.getTitle().title);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "        description.setText(note.getDescription().description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "        content.setText(note.getContent().content);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "        dateModified.setText(\"Date last modified: \" + note.getDateModified().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "        dateAdded.setText(\"Date added: \" + note.getDateAdded().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": "        numOfAccess.setText(\"Number of access: \" + note.getNumOfAccess().toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": "        note.getTags().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jityong"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jityong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jityong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jityong"
        },
        "content": "        if (!(other instanceof NoteCard)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jityong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jityong"
        },
        "content": "        NoteCard card \u003d (NoteCard) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u0026\u0026 note.equals(card.note);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NoteListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class NoteListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private static final String FXML \u003d \"NoteListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(NoteListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private ListView\u003cNote\u003e noteListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NoteListPanel(ObservableList\u003cNote\u003e noteList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteListView.setItems(noteList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteListView.setCellFactory(listView -\u003e new NoteListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "    class NoteListViewCell extends ListCell\u003cNote\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "        protected void updateItem(Note note, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "            super.updateItem(note, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "            if (empty || note \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "                setGraphic(new NoteCard(note, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OpenDisplayNote.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.exceptions.DictionaryException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class OpenDisplayNote extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(OpenDisplayNote.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private static final String FXML \u003d \"OpenDisplayNote.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Button saveButton;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Label labelTitle \u003d new Label(\"Title:\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Label labelDescription \u003d new Label(\"Description\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private TextField noteTitle;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private TextArea noteContent;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private TextField noteDescription;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Creates a new readDisplayNote."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public OpenDisplayNote() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void setFeedbackToUser(Note note, Index index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.content \u003d note.getContent().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.title \u003d note.getTitle().toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": "        System.out.println(\"title:\" + title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.description \u003d note.getDescription().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jityong"
        },
        "content": "        setNoteContent();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jityong"
        },
        "content": "        setNoteTitle();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jityong"
        },
        "content": "        setNoteDescription();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void setLogic(Logic logic) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void setMainWindow(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private void setNoteContent() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteContent.setText(content + \"\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteContent.setEditable(true);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteContent.setWrapText(true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private void setNoteTitle() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteTitle.setText(title + \"\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteTitle.setEditable(true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private void setNoteDescription() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteDescription.setText(description + \"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteDescription.setEditable(true);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jityong"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Saves note by running Edit Command and updating all relevant fields of the note."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private void saveNote() throws CommandException, ParseException,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jityong"
        },
        "content": "            DictionaryException { //TODO:Dictionary Exception unneeded?"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jityong"
        },
        "content": "        System.out.println(\"noteTitle:\" + noteTitle.getText());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jityong"
        },
        "content": "        mainWindow.executeCommand(\"edit \" + index.getOneBased() + \" c/\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jityong"
        },
        "content": "                + noteContent.getText()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jityong"
        },
        "content": "                + \" d/\" + noteDescription.getText() + \" ti/\" + noteTitle.getText()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jityong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PasswordCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * An UI component that displays information of a {@code Password}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class PasswordCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private static final String FXML \u003d \"PasswordListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public final Password password;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Label passwordDescription;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Label username;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public PasswordCard(Password password, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwordDescription.setText(password.getPasswordDescription().value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        username.setText(password.getUsername().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        password.getTags().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!(other instanceof PasswordCard)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        PasswordCard card \u003d (PasswordCard) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u0026\u0026 password.equals(card.password);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PasswordListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * Panel containing the list of passwords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class PasswordListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private static final String FXML \u003d \"PasswordListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private ListView\u003cPassword\u003e passwordListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public PasswordListPanel(ObservableList\u003cPassword\u003e passwordList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwordListView.setItems(passwordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwordListView.setCellFactory(listView -\u003e new PasswordListViewCell());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Password} using a {@code PasswordCard}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    class PasswordListViewCell extends ListCell\u003cPassword\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        protected void updateItem(Password password, boolean empty) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            super.updateItem(password, empty);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            if (empty || password \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                setGraphic(new PasswordCard(password, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReadDisplayCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " * A Ui for the displaying password that is displayed when read command is called."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "public class ReadDisplayCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private static final String FXML \u003d \"ReadDisplayCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private TextArea cardNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private TextArea cvc;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private TextArea expiryDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    private TextArea cardType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public ReadDisplayCard() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void setLogic(Logic logic) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     * @param card"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    public void setFeedbackToUser(Card card) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        description.setText(card.getDescription().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        cardNumber.setText(card.getNonEncryptedCardNumber());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        cvc.setText(card.getNonEncryptedCvc());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        expiryDate.setText(card.getExpiryDate().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        cardType.setText(card.getCardNumber().value.charAt(0) \u003d\u003d \u00274\u0027 ? \"Visa\" : \"MasterCard\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        card.getTags().stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReadDisplayPassword.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.ExpiryMode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": " * A Ui for the displaying password that is displayed when read command is called."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class ReadDisplayPassword extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private static final String FXML \u003d \"ReadDisplayPassword.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Password password;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private boolean isViewable;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private TextArea username;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private TextArea passwordValue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private TextArea website;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Label lastModified;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Label statusLabel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private ImageView imageViewer;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private Button button1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public ReadDisplayPassword() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        isViewable \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void setLogic(Logic logic) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void setPassword(Password password) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * @param password"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void setFeedbackToUser(Password password, Index index) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        setPassword(password);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        description.setText(index.getOneBased() + \". \" + password.getPasswordDescription().value);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        username.setText(password.getUsername().value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        passwordValue.setText(password.getPasswordValue().toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        lastModified.setText(password.getPasswordModifiedAt().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        website.setText(password.getWebsite().value);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        password.getTags().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Image image \u003d new Image(getClass().getResourceAsStream(\"/images/TogglePasswordIcon.png\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        imageViewer.setImage(image);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        ExpiryMode exp \u003d password.getExpiryMode();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        switch (exp) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case EXPIRED:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            status.setText(\"WARNING! Password expired. Change your password\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case EXPIRING:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            status.setText(\"Password expiring soon.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        case HEALTHY:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            status.setVisible(false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            statusLabel.setVisible(false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            status.setText(\"Error\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     * Toggles password value from encrypted to decrypted."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hooncp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    private void togglePassword() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        if (!isViewable) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            passwordValue.setText(password.getNonEncryptedPasswordValue());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            passwordValue.setText(password.getPasswordValue().toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        isViewable \u003d !isViewable;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 7,
      "hooncp": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReadDisplayPasswordReport.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* A Ui for the displaying password analysis report that is displayed when read command is called."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "*/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "public class ReadDisplayPasswordReport extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private static final String FXML \u003d \"ReadDisplayPasswordReport.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public ReadDisplayPasswordReport() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        Font f \u003d Font.loadFont(getClass().getResource(\"/fonts/COURIER.TTF\").toExternalForm(), 10);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        resultDisplay.setFont(f);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        setStatusBarPath(saveLocation);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Sets the path to be displayed on the status bar."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param saveLocation the path to be displayed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setStatusBarPath(Path saveLocation) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 8,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            mainWindow.handleExpiry();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/CardListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        \u003cVBox fx:id\u003d\"detailsContainer\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \u003cLabel fx:id\u003d\"cardNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$cardNumber\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 34
    }
  },
  {
    "path": "src/main/resources/view/CardListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    \u003cListView fx:id\u003d\"cardListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 8
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onDragDropped\u003d\"#handleDragDropped\" onDragOver\u003d\"#handleDragOver\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "niqiukun": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    -fx-font-family: \"COURIER\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hooncp"
        },
        "content": ".buttonSide {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /*-fx-border-color: #e2e2e2;*/"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    -fx-background-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    -float: left;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /*-fx-background-insets: 0 0 0 0, 0, 1, 2;*/"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hooncp"
        },
        "content": ".buttonSide:hover {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hooncp"
        },
        "content": ".buttonSide:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hooncp"
        },
        "content": "  /*-fx-background-color: white;*/"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hooncp"
        },
        "content": "  /*-fx-text-fill: #1d1d1d;*/"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hooncp"
        },
        "content": ".buttonSide:focused {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /*-fx-border-color: white, white;*/"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /*-fx-border-width: 1, 1;*/"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /*-fx-border-style: solid, segments(1, 1);*/"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /*-fx-border-radius: 0, 0;*/"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /*-fx-border-insets: 1 1 1 1, 0;*/"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hooncp"
        },
        "content": ".buttonSide:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    /*-fx-opacity: 0.4;*/"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jityong"
        },
        "content": "#dateModified {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jityong"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jityong"
        },
        "content": "    -fx-background-color: #008080;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jityong"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jityong"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jityong"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jityong"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jityong"
        },
        "content": "#dateAdded {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jityong"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jityong"
        },
        "content": "    -fx-background-color: #FFF8DC;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jityong"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jityong"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jityong"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jityong"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jityong"
        },
        "content": "#numOfAccess {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jityong"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jityong"
        },
        "content": "    -fx-background-color: #F0F8FF;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jityong"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jityong"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jityong"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jityong"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jityong": 26,
      "eejian97": 2,
      "hooncp": 25,
      "-": 330
    }
  },
  {
    "path": "src/main/resources/view/ExpiryDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Expiry Notification\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    \u003cLabel fx:id\u003d\"expiryMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                            \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"expiringCardListPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 35
    }
  },
  {
    "path": "src/main/resources/view/FileListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      \u003cLabel fx:id\u003d\"path\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$path\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      \u003cLabel fx:id\u003d\"encryptedAt\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$encryptedAt\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      \u003cLabel fx:id\u003d\"modifiedAt\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$modifiedAt\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 36
    }
  },
  {
    "path": "src/main/resources/view/FileListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "  \u003cListView fx:id\u003d\"fileListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 8
    }
  },
  {
    "path": "src/main/resources/view/FilePreviewPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003cVBox fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    \u003cLabel fx:id\u003d\"filenameLabel\" prefHeight\u003d\"18\" style\u003d\"-fx-text-fill: #FFFFFF;\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    \u003cLabel fx:id\u003d\"metadataLabel\" prefHeight\u003d\"18\" style\u003d\"-fx-text-fill: #FFFFFF;\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    \u003cImageView fx:id\u003d\"previewImage\" fitWidth\u003d\"400\" fitHeight\u003d\"407\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    \u003cTextArea fx:id\u003d\"previewTextArea\" prefHeight\u003d\"407\" editable\u003d\"false\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 14
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "hooncp": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003cfx:root minHeight\u003d\"700\" minWidth\u003d\"1000\" onCloseRequest\u003d\"#handleExit\" title\u003d\"SecureIT\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "          \u003cVBox fx:id\u003d\"modeList\" minWidth\u003d\"150\" prefWidth\u003d\"150\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"NEVER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "              \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "              \u003cLabel style\u003d\"-fx-text-fill: #75878E;\" text\u003d\"Mode: \" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "              \u003cButton fx:id\u003d\"b1\" minWidth\u003d\"130\" styleClass\u003d\"buttonSide\" text\u003d\"Password\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "              \u003cButton fx:id\u003d\"b2\" minWidth\u003d\"130\" styleClass\u003d\"buttonSide\" text\u003d\"File\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "              \u003cButton fx:id\u003d\"b3\" minWidth\u003d\"130\" styleClass\u003d\"buttonSide\" text\u003d\"Card\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "              \u003cButton fx:id\u003d\"b4\" minWidth\u003d\"130\" styleClass\u003d\"buttonSide\" text\u003d\"Note\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "          \u003cVBox fx:id\u003d\"objectList\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003cStackPane fx:id\u003d\"objectListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "          \u003cVBox fx:id\u003d\"readList\" maxWidth\u003d\"0\" minWidth\u003d\"0\" prefWidth\u003d\"0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003cStackPane fx:id\u003d\"readListPanelPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jityong": 4,
      "hooncp": 31,
      "-": 50
    }
  },
  {
    "path": "src/main/resources/view/NoteListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" style\u003d\"-fx-border-color: white;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "    \u003cGridPane prefWidth\u003d\"150.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"-Infinity\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003cLabel fx:id\u003d\"\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003cLabel fx:id\u003d\"numOfAccess\" text\u003d\"\\$numOfAccess\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003cLabel fx:id\u003d\"dateAdded\" text\u003d\"\\$dateAdded\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003cLabel fx:id\u003d\"dateModified\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"\\$dateModified\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" prefHeight\u003d\"6.0\" prefWidth\u003d\"130.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "        \u003cVBox style\u003d\"-fx-background-color: #696969#696969;\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u003cLabel fx:id\u003d\"content\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$content\" textFill\u003d\"black\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u003cInsets /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "                \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jityong": 61
    }
  },
  {
    "path": "src/main/resources/view/NoteListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "  \u003cListView fx:id\u003d\"noteListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jityong": 8
    }
  },
  {
    "path": "src/main/resources/view/OpenDisplayNote.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.control.TitledPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003cFlowPane fx:id\u003d\"placeHolder\" prefHeight\u003d\"0.0\" prefWidth\u003d\"0.0\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "   \u003cGridPane prefHeight\u003d\"60.0\" prefWidth\u003d\"380.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "     \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "       \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"159.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"76.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "       \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"311.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"304.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "     \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "     \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "       \u003cRowConstraints maxHeight\u003d\"32.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"32.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "       \u003cRowConstraints maxHeight\u003d\"33.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"28.0\" valignment\u003d\"CENTER\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "     \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "         \u003cLabel minHeight\u003d\"28.0\" minWidth\u003d\"74.0\" prefHeight\u003d\"28.0\" prefWidth\u003d\"74.0\" style\u003d\"-fx-border-color: #CD853F#CD853F; -fx-background-color: #CD853F#CD853F;\" text\u003d\"Title\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003cTextField fx:id\u003d\"noteTitle\" minHeight\u003d\"27.0\" minWidth\u003d\"279.0\" prefHeight\u003d\"27.0\" prefWidth\u003d\"279.0\" styleClass\u003d\"cell_big_label\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "            \u003cTextField fx:id\u003d\"noteDescription\" minHeight\u003d\"27.0\" minWidth\u003d\"279.0\" prefHeight\u003d\"27.0\" prefWidth\u003d\"279.0\" styleClass\u003d\"cell_big_label\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "         \u003cLabel minHeight\u003d\"28.0\" minWidth\u003d\"74.0\" prefHeight\u003d\"28.0\" prefWidth\u003d\"74.0\" style\u003d\"-fx-border-color: #CD853F#CD853F; -fx-background-color: #CD853F#CD853F;\" text\u003d\"Description\" textFill\u003d\"WHITE\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "   \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "   \u003cTitledPane animated\u003d\"false\" collapsible\u003d\"false\" prefHeight\u003d\"137.0\" prefWidth\u003d\"382.0\" text\u003d\"Content\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "          \u003cTextArea fx:id\u003d\"noteContent\" prefHeight\u003d\"0.0\" prefWidth\u003d\"0.0\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "   \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "    \u003cButton fx:id\u003d\"saveButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#saveNote\" style\u003d\"-fx-background-color: #CD853F#CD853F;\" text\u003d\"Save Note\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "    \u003c/Button\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003c/FlowPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jityong": 37
    }
  },
  {
    "path": "src/main/resources/view/PasswordListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                \u003cLabel fx:id\u003d\"passwordDescription\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$passwordDescription\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cLabel fx:id\u003d\"username\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$username\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "hooncp": 38
    }
  },
  {
    "path": "src/main/resources/view/PasswordListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "  \u003cListView fx:id\u003d\"passwordListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "hooncp": 8
    }
  },
  {
    "path": "src/main/resources/view/ReadDisplayCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"282.0\" style\u003d\"-fx-background-color: #FFFFFF;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        \u003cPane layoutY\u003d\"1.0\" prefHeight\u003d\"400.0\" prefWidth\u003d\"282.0\" style\u003d\"-fx-background-color: #FFFFFF;\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003cLabel layoutX\u003d\"21.0\" layoutY\u003d\"290.0\" style\u003d\"-fx-text-fill: #75878E;\" text\u003d\"Card Type:\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                        \u003cFont name\u003d\"Roboto Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003cTextArea fx:id\u003d\"cardType\" editable\u003d\"false\" layoutX\u003d\"14.0\" layoutY\u003d\"308.0\" prefHeight\u003d\"13.0\" prefWidth\u003d\"254.0\" style\u003d\"-fx-background-color: none;\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        \u003c/Pane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        \u003cPane prefHeight\u003d\"87.0\" prefWidth\u003d\"282.0\" style\u003d\"-fx-background-color: #33A1FD;\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" layoutX\u003d\"20.0\" layoutY\u003d\"14.0\" style\u003d\"-fx-text-fill: #000000;\" text\u003d\"POSB Debit\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                        \u003cFont size\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003cFlowPane fx:id\u003d\"tags\" layoutX\u003d\"14.0\" layoutY\u003d\"42.0\" prefHeight\u003d\"24.0\" prefWidth\u003d\"413.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        \u003c/Pane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        \u003cAnchorPane layoutX\u003d\"14.0\" layoutY\u003d\"71.0\" prefHeight\u003d\"178.0\" prefWidth\u003d\"254.0\" style\u003d\"-fx-background-color: #FFFFFF;\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003cLabel layoutX\u003d\"9.0\" layoutY\u003d\"15.0\" style\u003d\"-fx-text-fill: #75878E;\" text\u003d\"Card Number: \"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                        \u003cFont name\u003d\"Roboto Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003cLabel layoutX\u003d\"8.0\" layoutY\u003d\"75.0\" style\u003d\"-fx-text-fill: #75878E;\" text\u003d\"CVC: \"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                        \u003cFont name\u003d\"Roboto Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003cLabel layoutX\u003d\"8.0\" layoutY\u003d\"135.0\" style\u003d\"-fx-text-fill: #75878E;\" text\u003d\"Expiry: \"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                        \u003cFont name\u003d\"Roboto Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003cTextArea fx:id\u003d\"cardNumber\" editable\u003d\"false\" layoutY\u003d\"33.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"254.0\" style\u003d\"-fx-background-color: none;\" text\u003d\"2039-2039-5039-6049\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "               \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "               \u003c/opaqueInsets\u003e\u003c/TextArea\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003cTextArea fx:id\u003d\"cvc\" editable\u003d\"false\" layoutY\u003d\"95.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"254.0\" style\u003d\"-fx-background-color: none;\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003cTextArea fx:id\u003d\"expiryDate\" editable\u003d\"false\" layoutY\u003d\"155.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"254.0\" style\u003d\"-fx-background-color: none;\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 63
    }
  },
  {
    "path": "src/main/resources/view/ReadDisplayPassword.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"450.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #FFFFFF;\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "      \u003cPane layoutY\u003d\"1.0\" prefHeight\u003d\"430.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #FFFFFF;\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cLabel layoutX\u003d\"21.0\" layoutY\u003d\"224.0\" style\u003d\"-fx-text-fill: #75878E;\" text\u003d\"Website:\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                  \u003cFont name\u003d\"Roboto Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cLabel layoutX\u003d\"20.0\" layoutY\u003d\"280.0\" style\u003d\"-fx-text-fill: #75878E;\" text\u003d\"Password Last Modified:\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                  \u003cFont name\u003d\"Roboto Bold\" size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cLabel fx:id\u003d\"lastModified\" layoutX\u003d\"19.0\" layoutY\u003d\"293.0\" style\u003d\"-fx-text-fill: #000000;\" text\u003d\"ERROR\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                  \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "               \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cTextArea fx:id\u003d\"website\" editable\u003d\"false\" layoutX\u003d\"14.0\" layoutY\u003d\"242.0\" prefHeight\u003d\"37.0\" prefWidth\u003d\"373.0\" style\u003d\"-fx-background-color: none;\" text\u003d\"Some website\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cLabel fx:id\u003d\"statusLabel\" layoutX\u003d\"20.0\" layoutY\u003d\"322.0\" style\u003d\"-fx-text-fill: #75878E;\" text\u003d\"Status\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                  \u003cFont name\u003d\"Roboto Bold\" size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cLabel fx:id\u003d\"status\" layoutX\u003d\"19.0\" layoutY\u003d\"335.0\" style\u003d\"-fx-text-fill: #FF0000;\" text\u003d\"Error?\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                  \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hooncp"
        },
        "content": "      \u003c/Pane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hooncp"
        },
        "content": "      \u003cPane prefHeight\u003d\"119.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #33A1FD;\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" alignment\u003d\"CENTER\" layoutX\u003d\"14.0\" layoutY\u003d\"14.0\" maxWidth\u003d\"350\" style\u003d\"-fx-text-fill: #000000; -fx-font-size: 14;\" text\u003d\"Microsoft Account \"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                  \u003cFont name\u003d\"Roboto Bold\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" layoutX\u003d\"14.0\" layoutY\u003d\"38.0\" prefHeight\u003d\"24.0\" prefWidth\u003d\"332.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "      \u003c/Pane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "      \u003cAnchorPane layoutX\u003d\"14.0\" layoutY\u003d\"85.0\" prefHeight\u003d\"128.0\" prefWidth\u003d\"373.0\" style\u003d\"-fx-background-color: #FFFFFF;\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cLabel layoutX\u003d\"9.0\" layoutY\u003d\"70.0\" style\u003d\"-fx-text-fill: #75878E;\" text\u003d\"Password: \"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                  \u003cFont name\u003d\"Roboto Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cLabel layoutX\u003d\"8.0\" layoutY\u003d\"15.0\" style\u003d\"-fx-text-fill: #75878E;\" text\u003d\"Username: \"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                  \u003cFont name\u003d\"Roboto Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cTextArea fx:id\u003d\"username\" editable\u003d\"false\" layoutY\u003d\"33.0\" prefHeight\u003d\"38.0\" prefWidth\u003d\"373.0\" style\u003d\"-fx-background-color: none;\" text\u003d\"Some user\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cTextArea fx:id\u003d\"passwordValue\" editable\u003d\"false\" layoutY\u003d\"90.0\" prefHeight\u003d\"38.0\" prefWidth\u003d\"373.0\" style\u003d\"-fx-background-color: none;\" text\u003d\"Some password\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cButton fx:id\u003d\"button\" ellipsisString\u003d\"\" layoutX\u003d\"80.0\" layoutY\u003d\"66.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"10.0\" prefWidth\u003d\"10.0\" style\u003d\"-fx-background-color: transparent;\" text\u003d\"Button\" onAction\u003d\"#togglePassword\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "               \u003cgraphic\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                  \u003cImageView fx:id\u003d\"imageViewer\" fitHeight\u003d\"20.0\" fitWidth\u003d\"22.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "               \u003c/graphic\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "         \u003c/effect\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "hooncp": 79
    }
  },
  {
    "path": "src/main/resources/view/ReadDisplayPasswordReport.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" prefHeight\u003d\"460.0\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "eejian97": 8,
      "hooncp": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/DictionaryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.exceptions.DictionaryException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "class DictionaryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void build_invalidDictionaryName_throwsDictionaryException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertThrows(DictionaryException.class, () -\u003e Dictionary.build(\"dummy.txt\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void testBuild() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        HashMap\u003cString, Integer\u003e test \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        test.put(\"password\", 2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        test.put(\"29tgl03\", null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        test.put(\"123123\", 11);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            for (Map.Entry\u003cString, Integer\u003e entry : test.entrySet()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                String value \u003d entry.getKey();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                Integer expected \u003d entry.getValue();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                Integer computed \u003d Dictionary.build(\"passwords.txt\").getDictionary().get(value);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                assertEquals(expected, computed);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (DictionaryException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            System.out.println(\"Should not happen\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String PASSWORD \u003d \"password1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath, PASSWORD);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Config readBack \u003d ConfigUtil.readEncryptedConfig(configFilePath, PASSWORD).get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath, PASSWORD);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        readBack \u003d ConfigUtil.readEncryptedConfig(configFilePath, PASSWORD).get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath, PASSWORD);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 6,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/EncryptionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class EncryptionUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void encryptDecryptBytes_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        String testString \u003d \"hello world\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        String password \u003d \"password\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            assertEquals(testString,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    EncryptionUtil.decryptBytesToString(EncryptionUtil.encryptBytesFromString(testString, password),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                            password));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void encryptDecryptFromFile_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "            String testString \u003d \"hello world\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "            String password \u003d \"password\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "            byte[] encryptedByteArray \u003d EncryptionUtil.encryptBytesFromString(testString, password);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Files.write(TestUtil.getFilePathInSandboxFolder(\"test.txt\"), encryptedByteArray);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            byte[] encryptedByteArrayFromFile \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    Files.readAllBytes(TestUtil.getFilePathInSandboxFolder(\"test.txt\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "            assertEquals(encryptedByteArray.length, encryptedByteArrayFromFile.length);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "            assertEquals(testString, EncryptionUtil.decryptBytesToString(encryptedByteArrayFromFile, password));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 29,
      "jityong": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/GeneratorUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "class GeneratorUtilTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void generateRandomPassword_withLengthSpecifications() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        int expectedLength \u003d 10;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        String password \u003d GeneratorUtil.generateRandomPassword(expectedLength, true, true, true, true);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertTrue(expectedLength \u003d\u003d password.length());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void generateRandomPassword_withLowerSpecifications() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        boolean hasLower \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        String password \u003d GeneratorUtil.generateRandomPassword(8, hasLower, true, true, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertTrue(!password.matches(\"(?\u003d.*[a-z]).*\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void generateRandomPassword_withUpperSpecifications() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        boolean hasUpper \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        String password \u003d GeneratorUtil.generateRandomPassword(8, true, hasUpper, true, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertTrue(!password.matches(\"(?\u003d.*[A-Z]).*\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void generateRandomPassword_numSpecifications() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        boolean hasNum \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        String password \u003d GeneratorUtil.generateRandomPassword(8, true, true, hasNum, true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertTrue(!password.matches(\"(?\u003d.*[0-9]).*\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void generateRandomPassword_specialSpecifications() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        boolean hasSpecial \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        String password \u003d GeneratorUtil.generateRandomPassword(8, true, true, true, hasSpecial);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertTrue(!password.matches(\"(?\u003d.*[~!@#$%^\u0026*()_-]).*\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String PASSWORD \u003d \"password1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        JsonUtil.serializeObjectToEncryptedJsonFile(SERIALIZATION_FILE, serializableTestClass, PASSWORD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(FileUtil.readFromEncryptedFile(SERIALIZATION_FILE, PASSWORD),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FileUtil.writeToEncryptedFile(SERIALIZATION_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                SerializableTestClass.JSON_STRING_REPRESENTATION, \"password1\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                .deserializeObjectFromEncryptedJsonFile(SERIALIZATION_FILE, SerializableTestClass.class, PASSWORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 7,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/LeetUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "class LeetUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void translateLeet_passwordWithFinitePossibilities() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        List\u003cString\u003e possible \u003d LeetUtil.translateLeet(\"a!!p055!b!3\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        String[] expectedArray \u003d new String[] {\"aiipossibie\", \"aiipossible\", \"aiiposslbie\", \"aiiposslble\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            \"ailpossibie\", \"ailpossible\", \"ailposslbie\", \"ailposslble\", \"alipossibie\", \"alipossible\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            \"aliposslbie\", \"aliposslble\", \"allpossibie\", \"allpossible\", \"allposslbie\", \"allposslble\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertTrue(possible.size() \u003d\u003d 16);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertArrayEquals(possible.toArray(), expectedArray);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void traslateLeet_passwordWithAllDifferentLeet_notInUseScope() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        List\u003cString\u003e possible \u003d LeetUtil.translateLeet(\"!!!!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertTrue(possible.isEmpty());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void translateLeet_passwordWithTooManyPossibilities_stopAtHundred() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        List\u003cString\u003e possible \u003d LeetUtil.translateLeet(\"a!!poss!b!!!t!es\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertTrue(possible.size() \u003d\u003d 100);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    // Tests for changing String to asterisks"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void passwordToAsterix_validInputs_correctResult() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        assertTrue(StringUtil.passwordToAsterix(\"password12345\").equals(new String(\"*************\")));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        assertFalse(StringUtil.passwordToAsterix(\"password12345\").equals(new String(\"************\")));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 7,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.commons.exceptions.DictionaryException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.model.ReadOnlyCardBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.model.ReadOnlyNoteBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.model.ReadOnlyPasswordBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.storage.JsonCardBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.storage.JsonFileBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.storage.JsonNoteBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.storage.JsonPasswordBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//public class LogicManagerTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    private static final String PASSWORD \u003d \"password1\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    public Path temporaryFolder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    private Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        //TODO: add in new tests with password book storage"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        JsonPasswordBookStorage passwordBookStorage \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//                new JsonPasswordBookStorage(temporaryFolder.resolve(\"passwordBook.json\"), PASSWORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"), PASSWORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        JsonFileBookStorage fileBookStorage \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//                new JsonFileBookStorage(temporaryFolder.resolve(\"fileBook.json\"), PASSWORD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        JsonCardBookStorage cardBookStorage \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//                new JsonCardBookStorage(temporaryFolder.resolve(\"cardBook.json\"), PASSWORD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        JsonNoteBookStorage noteBookStorage \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//                new JsonNoteBookStorage(temporaryFolder.resolve(\"noteBook.json\"), PASSWORD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//                new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"), PASSWORD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, fileBookStorage,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//                cardBookStorage, noteBookStorage, passwordBookStorage, userPrefsStorage, PASSWORD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        JsonFileBookStorage fileBookStorage \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//                new JsonFileBookStorage(temporaryFolder.resolve(\"ioExceptionFileBook.json\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        JsonCardBookStorage cardBookStorage \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//                new JsonCardBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionCardBook.json\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"), PASSWORD);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        JsonNoteBookStorage noteBookStorage \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//                new JsonNoteBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionNoteBook.json\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        JsonPasswordBookStorage passwordBookStorage \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//                new JsonPasswordBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionPasswordBook.json\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, fileBookStorage,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//                cardBookStorage, noteBookStorage, passwordBookStorage, userPrefsStorage, PASSWORD);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        // Execute add command"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//            Model expectedModel) throws CommandException, ParseException, DictionaryException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//            String expectedMessage) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getFileBook(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//                model.getCardBook(), model.getNoteBook(), model.getPasswordBook(), new UserPrefs());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//            super(filePath, PASSWORD);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    private static class JsonCardBookIoExceptionThrowingStub extends JsonCardBookStorage {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        private JsonCardBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//            super(filePath, PASSWORD);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        public void saveCardBook(ReadOnlyCardBook cardBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    private static class JsonPasswordBookIoExceptionThrowingStub extends JsonPasswordBookStorage {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        private JsonPasswordBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//            super(filePath, PASSWORD);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        public void savePasswordBook(ReadOnlyPasswordBook passwordBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    private static class JsonNoteBookIoExceptionThrowingStub extends JsonNoteBookStorage {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        private JsonNoteBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//            super(filePath, PASSWORD);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        public void saveNoteBook(ReadOnlyNoteBook noteBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 228
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.getTypicalNoteBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.CardBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.FileBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.PasswordBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new FileBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new CardBook(), getTypicalNoteBook(), new PasswordBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new FileBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new CardBook(), getTypicalNoteBook(), new PasswordBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 4,
      "jityong": 1,
      "hooncp": 3,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.CardBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.PasswordBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.ReadOnlyCardBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.ReadOnlyNoteBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileStatus;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.SortByCond;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        public void addFile(EncryptedFile file) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        public void setFileBook(ReadOnlyFileBook newData) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        public ReadOnlyFileBook getFileBook() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        public boolean hasFile(EncryptedFile file) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        public void deleteFile(EncryptedFile target) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        public void setFile(EncryptedFile target, EncryptedFile editedFile) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        public void setFileStatus(EncryptedFile target, FileStatus status) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        public ObservableList\u003cEncryptedFile\u003e getFilteredFileList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        public Path getCardBookFilePath() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        public void updateFilteredFileList(Predicate\u003cEncryptedFile\u003e predicate) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        public Path getFileBookFilePath() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        public void setCardBookFilePath(Path cardBookFilePath) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        public void setCardBook(ReadOnlyCardBook newData) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        public CardBook getCardBook() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        public boolean hasCardDescription(Card card) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public ReadOnlyNoteBook getNoteBook() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public void setNoteBook(ReadOnlyNoteBook noteBook) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public void deleteNote(Note target) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public void addNote(Note note) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jityong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public void sortNoteBook() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jityong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public void editNoteSortByCond(SortByCond sortByCond) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jityong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public Predicate\u003cNote\u003e getFilteredNoteListPred() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public Path getNoteBookFilePath() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public void setNoteBookFilePath(Path noteBookFilePath) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jityong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public void commitNote() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jityong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public void undoNote() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jityong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public void redoNote() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jityong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public Index getNoteIndex(Note note) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jityong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public ObservableList\u003cPassword\u003e getFilteredPasswordList() {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public void updateFilteredPasswordList(Predicate\u003cPassword\u003e predicate) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jityong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public void addPassword(Password password) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jityong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public void deletePassword(Password password) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jityong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jityong"
        },
        "content": "        public PasswordBook getPasswordBook() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public boolean hasPassword(Password password) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public void setPasswordBookFilePath(Path passwordBookFilePath) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public Path getPasswordBookFilePath() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        public void setPassword(Password target, Password editedPassword) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 53,
      "yhtingg": 52,
      "jityong": 54,
      "hooncp": 81,
      "-": 194
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        assertTrue(commandResult.equals(CommandResult.builder(\"feedback\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                            .build()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        assertFalse(commandResult.equals(CommandResult.builder(\"feedback\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                            .showHelp()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                            .build()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        assertFalse(commandResult.equals(CommandResult.builder(\"feedback\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                            .exit()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                            .build()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // different goTo value -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        assertFalse(commandResult.equals(CommandResult.builder(\"feedback\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                            .isGoTo()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                            .build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), CommandResult.builder(\"feedback\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                                    .showHelp()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                                    .build()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                                    .hashCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), CommandResult.builder(\"feedback\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                                    .exit()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                                    .build()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                                    .hashCode());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // different goTo value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), CommandResult.builder(\"feedback\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                                    .isGoTo()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                                    .build()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                                    .hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 4,
      "yhtingg": 23,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.exceptions.DictionaryException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (CommandException | DictionaryException ce) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 2,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 1,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EncryptFileCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.getTypicalNoteBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.CardBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.FileBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.PasswordBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.testutil.EncryptedFileBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class EncryptFileCommandIntegrationTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String FILENAME \u003d \"Test File.txt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String ENCRYPTED_FILENAME \u003d \"[LOCKED] Test File.txt\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String PASSWORD \u003d \"password1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new FileBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                new CardBook(), getTypicalNoteBook(), new PasswordBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Files.write(TestUtil.getFilePathInSandboxFolder(FILENAME),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    \"This is test file content.\".getBytes());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"Error during testing.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void execute_newFile_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile validFile \u003d new EncryptedFileBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), model.getFileBook(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                new CardBook(), getTypicalNoteBook(), new PasswordBook(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        expectedModel.addFile(validFile);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertCommandSuccess(new EncryptFileCommand(validFile, PASSWORD), model,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                String.format(EncryptFileCommand.MESSAGE_SUCCESS, validFile), expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void execute_duplicateFile_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile validFile \u003d new EncryptedFileBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            new EncryptFileCommand(validFile, PASSWORD).execute(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"Error during testing.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile fileInList \u003d model.getFileBook().getFileList().get(0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertCommandFailure(new EncryptFileCommand(fileInList, PASSWORD), model,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                EncryptFileCommand.MESSAGE_DUPLICATE_FILE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Files.deleteIfExists(TestUtil.getFilePathInSandboxFolder(FILENAME));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Files.deleteIfExists(TestUtil.getFilePathInSandboxFolder(ENCRYPTED_FILENAME));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"Error during testing.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EncryptFileCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.exceptions.TargetFileExistException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.util.EncryptionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.testutil.EncryptedFileBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class EncryptFileCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String FILENAME \u003d \"Test File.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String NON_EXIST_FILENAME \u003d \"Text File.txt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String ENCRYPTED_FILENAME \u003d \"[LOCKED] Test File.txt\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String FOLDER_NAME \u003d \"Test Folder\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String PASSWORD \u003d \"password1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String PASSWORD2 \u003d \"password2\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Files.write(TestUtil.getFilePathInSandboxFolder(FILENAME),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    \"This is test file content.\".getBytes());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"Error during testing.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void constructor_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EncryptFileCommand(null, PASSWORD));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void constructor_nullPassword_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile validFile \u003d new EncryptedFileBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EncryptFileCommand(validFile, null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void execute_fileAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        ModelStubAcceptingFileAdded modelStub \u003d new ModelStubAcceptingFileAdded();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile validFile \u003d new EncryptedFileBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        CommandResult commandResult \u003d new EncryptFileCommand(validFile, PASSWORD).execute(modelStub);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(String.format(EncryptFileCommand.MESSAGE_SUCCESS, validFile), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(Arrays.asList(validFile), modelStub.filesAdded);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void execute_duplicateFile_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile validFile \u003d new EncryptedFileBuilder().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptFileCommand addCommand \u003d new EncryptFileCommand(validFile, PASSWORD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEncryptedFile(validFile);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                EncryptFileCommand.MESSAGE_DUPLICATE_FILE, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void execute_fileNotExist_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        ModelStubAcceptingFileAdded modelStub \u003d new ModelStubAcceptingFileAdded();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile invalidFile \u003d new EncryptedFileBuilder().withFileName(NON_EXIST_FILENAME).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptFileCommand addCommand \u003d new EncryptFileCommand(invalidFile, PASSWORD);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                EncryptFileCommand.MESSAGE_FILE_NOT_FOUND, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void execute_fileAlreadyEncrypted_throwsCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            EncryptionUtil.encryptFile("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    TestUtil.getFilePathInSandboxFolder(FILENAME).toString(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    TestUtil.getFilePathInSandboxFolder(ENCRYPTED_FILENAME).toString(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    PASSWORD"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            ModelStubAcceptingFileAdded modelStub \u003d new ModelStubAcceptingFileAdded();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            EncryptedFile invalidFile \u003d new EncryptedFileBuilder().withFileName(ENCRYPTED_FILENAME).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            EncryptFileCommand addCommand \u003d new EncryptFileCommand(invalidFile, PASSWORD);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    EncryptFileCommand.MESSAGE_ENCRYPTED_FILE, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            EncryptionUtil.decryptFile("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    TestUtil.getFilePathInSandboxFolder(ENCRYPTED_FILENAME).toString(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    TestUtil.getFilePathInSandboxFolder(FILENAME).toString(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    PASSWORD"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            );"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IOException | TargetFileExistException | GeneralSecurityException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"Error during testing.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void execute_fileIsDirectory_throwsCommandException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Files.createDirectories(TestUtil.getFilePathInSandboxFolder(FOLDER_NAME));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            ModelStubAcceptingFileAdded modelStub \u003d new ModelStubAcceptingFileAdded();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            EncryptedFile invalidFile \u003d new EncryptedFileBuilder().withFileName(FOLDER_NAME).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            EncryptFileCommand addCommand \u003d new EncryptFileCommand(invalidFile, PASSWORD);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    EncryptFileCommand.MESSAGE_IS_DIRECTORY, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Files.deleteIfExists(TestUtil.getFilePathInSandboxFolder(FOLDER_NAME));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"Error during testing.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void execute_targetFileExists_throwsCommandException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Files.write(TestUtil.getFilePathInSandboxFolder(ENCRYPTED_FILENAME), \"Test\".getBytes());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            ModelStubAcceptingFileAdded modelStub \u003d new ModelStubAcceptingFileAdded();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            EncryptedFile validFile \u003d new EncryptedFileBuilder().withFileName(FILENAME).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            EncryptFileCommand addCommand \u003d new EncryptFileCommand(validFile, PASSWORD);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    String.format(EncryptFileCommand.MESSAGE_TARGET_FILE_EXISTS,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                            TestUtil.getFilePathInSandboxFolder(ENCRYPTED_FILENAME)), () -\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                            addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Files.deleteIfExists(TestUtil.getFilePathInSandboxFolder(ENCRYPTED_FILENAME));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"Error during testing.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile testFile \u003d new EncryptedFileBuilder().withFileName(FILENAME).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile textFile \u003d new EncryptedFileBuilder().withFileName(NON_EXIST_FILENAME).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptFileCommand encryptTestCommand \u003d new EncryptFileCommand(testFile, PASSWORD);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptFileCommand encryptTextCommand \u003d new EncryptFileCommand(textFile, PASSWORD);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertTrue(encryptTestCommand.equals(encryptTestCommand));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptFileCommand encryptTestCommandCopy \u003d new EncryptFileCommand(testFile, PASSWORD);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertTrue(encryptTestCommandCopy.equals(encryptTestCommandCopy));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertFalse(encryptTestCommand.equals(1));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertFalse(encryptTestCommand.equals(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // different file -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertFalse(encryptTestCommand.equals(encryptTextCommand));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // different password -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertFalse(encryptTestCommand.equals(new EncryptFileCommand(testFile, PASSWORD2)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Files.deleteIfExists(TestUtil.getFilePathInSandboxFolder(FILENAME));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Files.deleteIfExists(TestUtil.getFilePathInSandboxFolder(ENCRYPTED_FILENAME));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"Error during testing.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 184
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        CommandResult expectedCommandResult \u003d CommandResult.builder(MESSAGE_EXIT_ACKNOWLEDGEMENT)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                                .exit()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                                .build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 3,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        CommandResult expectedCommandResult \u003d CommandResult.builder(SHOWING_HELP_MESSAGE)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                                .showHelp()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "                                                .build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 3,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.CardBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.PasswordBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyCardBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyNoteBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.note.SortByCond;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void addFile(EncryptedFile file) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFileBook(ReadOnlyFileBook newData) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ReadOnlyFileBook getFileBook() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean hasFile(EncryptedFile file) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void deleteFile(EncryptedFile target) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFile(EncryptedFile target, EncryptedFile editedFile) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFileStatus(EncryptedFile target, FileStatus status) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ObservableList\u003cEncryptedFile\u003e getFilteredFileList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Path getCardBookFilePath() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void updateFilteredFileList(Predicate\u003cEncryptedFile\u003e predicate) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Path getFileBookFilePath() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setCardBookFilePath(Path cardBookFilePath) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void addCard(Card card) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setCardBook(ReadOnlyCardBook newData) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public CardBook getCardBook() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean hasCardDescription(Card card) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ReadOnlyNoteBook getNoteBook() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setNoteBook(ReadOnlyNoteBook noteBook) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void deleteNote(Note target) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void sortNoteBook() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void editNoteSortByCond(SortByCond sortByCond) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Predicate\u003cNote\u003e getFilteredNoteListPred() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Path getNoteBookFilePath() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setNoteBookFilePath(Path noteBookFilePath) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void commitNote() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void undoNote() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void redoNote() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Index getNoteIndex(Note note) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ObservableList\u003cPassword\u003e getFilteredPasswordList() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void updateFilteredPasswordList(Predicate\u003cPassword\u003e predicate) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void addPassword(Password password) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void deletePassword(Password password) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public PasswordBook getPasswordBook() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean hasPassword(Password password) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setPasswordBookFilePath(Path passwordBookFilePath) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Path getPasswordBookFilePath() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setPassword(Password target, Password editedPassword) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 326
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStubAcceptingFileAdded.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.FileBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * A Model stub that always accept the encrypted file being added."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class ModelStubAcceptingFileAdded extends ModelStub {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    final ArrayList\u003cEncryptedFile\u003e filesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean hasFile(EncryptedFile file) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return filesAdded.stream().anyMatch(file::isSameFile);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void addFile(EncryptedFile file) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        filesAdded.add(file);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ReadOnlyFileBook getFileBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new FileBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStubWithEncryptedFile.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * A Model stub that contains a single encrypted file."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class ModelStubWithEncryptedFile extends ModelStub {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final EncryptedFile file;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    ModelStubWithEncryptedFile(EncryptedFile file) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean hasFile(EncryptedFile file) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return this.file.isSameFile(file);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FilePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String INVALID_FULL_PATH \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String VALID_FILE_NAME \u003d \"Test.txt\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"/Users/Desktop\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String VALID_FULL_PATH \u003d \"/Users/Desktop/Test.txt\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void parseFileName_validValue_returnsFileName() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FileName expectedFileName \u003d new FileName(VALID_FILE_NAME);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(expectedFileName, ParserUtil.parseFileName(VALID_FULL_PATH));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void parseFileName_emptyPath_returnsFileName() throws Exception {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FileName expectedFileName \u003d new FileName(VALID_FILE_NAME);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(expectedFileName, ParserUtil.parseFileName(VALID_FILE_NAME));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void parseFileName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFileName(INVALID_FULL_PATH));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void parseFilePath_validValue_returnsFilePath() throws Exception {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FilePath expectedFilePath \u003d new FilePath(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(expectedFilePath, ParserUtil.parseFilePath(VALID_FULL_PATH));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void parseFileName_emptyPath_returnsFilePath() throws Exception {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FilePath expectedFileName \u003d new FilePath(\"\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(expectedFileName, ParserUtil.parseFilePath(VALID_FILE_NAME));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 35,
      "-": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.SECRETDIARY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.SECRETDOC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.testutil.NoteBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jityong"
        },
        "content": "        NoteBook noteBook \u003d new NoteBookBuilder().withNote(SECRETDIARY).withNote(SECRETDOC).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        FileBook fileBook \u003d new FileBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        CardBook cardBook \u003d new CardBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        PasswordBook passwordBook \u003d new PasswordBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jityong"
        },
        "content": "        NoteBook differentNoteBook \u003d new NoteBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, fileBook, cardBook, noteBook, passwordBook, userPrefs);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, fileBook, cardBook, noteBook,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                passwordBook, userPrefs);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jityong"
        },
        "content": "                differentUserPrefs)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 2,
      "jityong": 8,
      "hooncp": 5,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/model/file/EncryptedFileTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.testutil.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class EncryptedFileTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private EncryptedFile testFile \u003d new EncryptedFile("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            new FileName(\"Test File.txt\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            new FilePath(\"/Users/Shared\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void getFullPath() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(\"/Users/Shared/Test File.txt\", testFile.getFullPath());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void getEncryptedPath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(\"/Users/Shared/[LOCKED] Test File.txt\", testFile.getEncryptedPath());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void getFileExtention() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(\"txt\", testFile.getFileExtension());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void isSameFile() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // same"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertTrue(testFile.isSameFile(new EncryptedFile("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                new FileName(\"Test File.txt\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                new FilePath(\"/Users/Shared\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                new HashSet\u003c\u003e()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        )));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // not same"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertFalse(testFile.isSameFile(new EncryptedFile("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                new FileName(\"Text File.txt\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                new FilePath(\"/Users/Shared\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                new HashSet\u003c\u003e()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        )));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertFalse(testFile.isSameFile(new EncryptedFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                new FileName(\"Test File.txt\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                new FilePath(\"/User/Shared\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                new HashSet\u003c\u003e()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        )));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/model/file/FileNameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.testutil.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FileNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FileName(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void constructor_invalidFileName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        String invalidFileName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new FileName(invalidFileName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void constructWithExtension() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // null file name or extension"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileName.constructWithExtension(null, \"txt\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileName.constructWithExtension(\"Test File\", null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // with both file name and extension"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(\"Test File.txt\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                FileName.constructWithExtension(\"Test File\", \"txt\").value);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // with empty file name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(\".txt\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                FileName.constructWithExtension(\"\", \"txt\").value);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // with empty extension"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(\"Test File\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                FileName.constructWithExtension(\"Test File\", \"\").value);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void isValidFileName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // valid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertTrue(FileName.isValidFileName(\"Test File\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertTrue(FileName.isValidFileName(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // invalid"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void getFileNameWithoutExtension() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(\"Test File\", new FileName(\"Text File.txt\").getFileNameWithoutExtention());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(\"Test File\", new FileName(\"Text File\").getFileNameWithoutExtention());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void getExtension() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(\"txt\", new FileName(\"Text File.txt\").getExtension());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(\"\", new FileName(\"Text File\").getFileNameWithoutExtention());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/password/analyser/DictionaryAnalyserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.core.Dictionary;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.commons.exceptions.DictionaryException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordModifiedAt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.PasswordValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Username;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Website;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.match.DictionaryMatch;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "class DictionaryAnalyserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void getAllMatches_passwordWithoutLeet() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            Dictionary d \u003d Dictionary.build(\"passwords.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            Password p1 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    new PasswordValue(\"qwerty\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            DictionaryAnalyser a \u003d new DictionaryAnalyser(d);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            List\u003cDictionaryMatch\u003e actualMatches \u003d a.getAllMatches(p1.getPasswordValue().value);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            System.out.println(actualMatches.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            List\u003cDictionaryMatch\u003e expectedMatches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            expectedMatches.add(new DictionaryMatch(0, 5, \"qwerty\", 4));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            expectedMatches.add(new DictionaryMatch(0, 4, \"qwert\", 420));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            expectedMatches.add(new DictionaryMatch(0, 3, \"qwer\", 2322));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            expectedMatches.add(new DictionaryMatch(1, 4, \"wert\", 7620));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            expectedMatches.add(new DictionaryMatch(1, 5, \"werty\", 8340));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            expectedMatches.add(new DictionaryMatch(2, 5, \"erty\", 53112));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            for (int i \u003d 0; i \u003c expectedMatches.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                assertEquals(actualMatches.get(i), expectedMatches.get(i));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (DictionaryException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            System.out.println(\"should not happen\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void getAllMatches_passwordWithLeet() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            Dictionary d \u003d Dictionary.build(\"passwords.txt\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "            Password p1 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    new PasswordValue(\"qw3r+y\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                    new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            DictionaryAnalyser a \u003d new DictionaryAnalyser(d);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            List\u003cDictionaryMatch\u003e actualMatches \u003d a.getAllMatches(p1.getPasswordValue().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            System.out.println(actualMatches.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            List\u003cDictionaryMatch\u003e expectedMatches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            expectedMatches.add(new DictionaryMatch(0, 5, \"qwerty\", 4));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            expectedMatches.add(new DictionaryMatch(0, 4, \"qwert\", 420));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            expectedMatches.add(new DictionaryMatch(0, 3, \"qwer\", 2322));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            expectedMatches.add(new DictionaryMatch(1, 4, \"wert\", 7620));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            expectedMatches.add(new DictionaryMatch(1, 5, \"werty\", 8340));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            expectedMatches.add(new DictionaryMatch(2, 5, \"erty\", 53112));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            for (int i \u003d 0; i \u003c expectedMatches.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                assertEquals(actualMatches.get(i), expectedMatches.get(i));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        } catch (DictionaryException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            System.out.println(\"should not happen\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 70,
      "hooncp": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/model/password/analyser/SequenceAnalyserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordDescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordModifiedAt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.PasswordValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Username;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Website;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.match.SequenceMatch;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "class SequenceAnalyserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void analyse_passwordWithForwardNumericalSequence() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"123pass456word123456\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        SequenceAnalyser a \u003d new SequenceAnalyser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        List\u003cSequenceMatch\u003e actualMatches \u003d a.getAllMatches(p.getPasswordValue().value);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cSequenceMatch\u003e expectedMatches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new SequenceMatch(0, 2, \"123\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new SequenceMatch(7, 9, \"456\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new SequenceMatch(14, 19, \"123456\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (int i \u003d 0; i \u003c actualMatches.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            assertEquals(actualMatches.get(i), expectedMatches.get(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void analyse_passwordWithBackwardNumericalSequence() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"321pass654word654321\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        SequenceAnalyser a \u003d new SequenceAnalyser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        List\u003cSequenceMatch\u003e actualMatches \u003d a.getAllMatches(p.getPasswordValue().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cSequenceMatch\u003e expectedMatches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new SequenceMatch(0, 2, \"321\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new SequenceMatch(7, 9, \"654\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new SequenceMatch(14, 19, \"654321\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (int i \u003d 0; i \u003c actualMatches.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            assertEquals(actualMatches.get(i), expectedMatches.get(i));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void analyse_passwordWithForwardAlphaSequence() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"ABCpassXYZwordABCXYZ\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        SequenceAnalyser a \u003d new SequenceAnalyser();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        List\u003cSequenceMatch\u003e actualMatches \u003d a.getAllMatches(p.getPasswordValue().value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cSequenceMatch\u003e expectedMatches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new SequenceMatch(0, 2, \"ABC\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new SequenceMatch(7, 9, \"XYZ\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new SequenceMatch(14, 16, \"ABC\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new SequenceMatch(17, 19, \"XYZ\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (int i \u003d 0; i \u003c actualMatches.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            assertEquals(actualMatches.get(i), expectedMatches.get(i));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void analyse_passwordWithBackwardAlphaSequence() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"CBApassZYXwordCBAZYX\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cPassword\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        list.add(p);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        SequenceAnalyser a \u003d new SequenceAnalyser();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        List\u003cSequenceMatch\u003e actualMatches \u003d a.getAllMatches(p.getPasswordValue().value);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cSequenceMatch\u003e expectedMatches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new SequenceMatch(0, 2, \"CBA\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new SequenceMatch(7, 9, \"ZYX\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new SequenceMatch(14, 16, \"CBA\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new SequenceMatch(17, 19, \"ZYX\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (int i \u003d 0; i \u003c actualMatches.size(); i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            assertEquals(actualMatches.get(i), expectedMatches.get(i));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 89,
      "hooncp": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/model/password/analyser/SimilarityAnalyserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordModifiedAt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.PasswordValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Username;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Website;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.match.SimilarityMatch;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "class SimilarityAnalyserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void getAllMatches_withoutSimilarPasswords() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p1 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"password\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p2 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"asd\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p3 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"fgh\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p4 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"jkl\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cPassword\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        list.add(p2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        list.add(p3);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        list.add(p4);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        SimilarityAnalyser a \u003d new SimilarityAnalyser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        List\u003cSimilarityMatch\u003e actualMatches \u003d a.getAllMatches(p1, list);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertTrue(actualMatches.isEmpty());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void getAllMatches_withSimilarPasswords() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p1 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"password\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p2 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"p@ssw0rd\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p3 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"password123\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p4 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"ppaassword\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cPassword\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        list.add(p2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        list.add(p3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        list.add(p4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        SimilarityAnalyser a \u003d new SimilarityAnalyser();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        List\u003cSimilarityMatch\u003e actualMatches \u003d a.getAllMatches(p1, list);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        List\u003cSimilarityMatch\u003e expectedMatches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new SimilarityMatch(0, 7, \"p@ssw0rd\", p2, 0.75));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new SimilarityMatch(0, 7, \"password123\", p3, 0.7272727272727273));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new SimilarityMatch(0, 7, \"password123\", p4, 0.8));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedMatches.size(); i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            assertEquals(actualMatches.get(i), expectedMatches.get(i));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 57,
      "hooncp": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/password/analyser/StrengthAnalyserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordDescription;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordModifiedAt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.PasswordValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Username;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Website;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.result.StrengthResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "class StrengthAnalyserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void calculateStrength_passwordWeak() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p1 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"password\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StrengthResult actualResult1 \u003d StrengthAnalyser.calculateStrength(p1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StrengthResult expectedResult1 \u003d new StrengthResult(p1, \"weak\", true,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                true, false, false, false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertEquals(actualResult1, expectedResult1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p2 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"!@#\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StrengthResult actualResult2 \u003d StrengthAnalyser.calculateStrength(p2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StrengthResult expectedResult2 \u003d new StrengthResult(p2, \"weak\", false,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                false, false, false, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertEquals(actualResult2, expectedResult2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p3 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"123asddd\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StrengthResult actualResult3 \u003d StrengthAnalyser.calculateStrength(p3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StrengthResult expectedResult3 \u003d new StrengthResult(p3, \"weak\", true,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                true, false, true, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertEquals(actualResult3, expectedResult3);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void calculateStrength_passwordStrong() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p1 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"P@sSw0Rd\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StrengthResult actualResult1 \u003d StrengthAnalyser.calculateStrength(p1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        StrengthResult expectedResult1 \u003d new StrengthResult(p1, \"strong\", true,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                true, true, true, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertEquals(actualResult1, expectedResult1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 40,
      "hooncp": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/model/password/analyser/UniqueAnalyserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordModifiedAt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.PasswordValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Username;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Website;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.analyser.match.UniqueMatch;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "class UniqueAnalyserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void getAllMatches_listContainAllUniquePassword() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p1 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"password\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p2 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"p@ssw0rd\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p3 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"password123\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p4 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"ppaassword\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        UniqueAnalyser a \u003d new UniqueAnalyser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cPassword\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        list.add(p1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        list.add(p2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        list.add(p3);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        list.add(p4);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cPassword\u003e\u003e expectedPasswordToAccounts \u003d a.initHash(list);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        List\u003cUniqueMatch\u003e actualMatches \u003d a.getAllMatches(p1,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                expectedPasswordToAccounts.get(p1.getPasswordValue().value));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertTrue(actualMatches.isEmpty());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void getAllMatches_listContainNonUniquePassword() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p1 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"password\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p2 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"password\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p3 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"password\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p4 \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"password\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        UniqueAnalyser a \u003d new UniqueAnalyser();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        ArrayList\u003cPassword\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        list.add(p1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        list.add(p2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        list.add(p3);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        list.add(p4);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cPassword\u003e\u003e expectedPasswordToAccounts \u003d a.initHash(list);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        List\u003cUniqueMatch\u003e actualMatches \u003d a.getAllMatches(p1,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eejian97"
        },
        "content": "                expectedPasswordToAccounts.get(p1.getPasswordValue().value));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        List\u003cUniqueMatch\u003e expectedMatches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new UniqueMatch(0, 7, \"password\", p2));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new UniqueMatch(0, 7, \"password\", p3));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        expectedMatches.add(new UniqueMatch(0, 7, \"password\", p4));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedMatches.size(); i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            assertEquals(expectedMatches.get(i), actualMatches.get(i));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 69,
      "hooncp": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/password/analyser/match/BaseMatchTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.testutil.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "class BaseMatchTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void testConstructor() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        BaseMatch instance \u003d new BaseMatchImpl(0, 5, \"dummy\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        String token \u003d instance.getToken();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        int start \u003d instance.getStartIndex();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        int end \u003d instance.getEndIndex();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertEquals(\"dummy\", token);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertTrue(0 \u003d\u003d start);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertTrue(5 \u003d\u003d end);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new BaseMatchImpl(0, 5, null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void constructor_invalidMatchIndex_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BaseMatchImpl(5, 0, \"dummy\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void constructor_invalidMatchToken_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BaseMatchImpl(0, 5, \"\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public class BaseMatchImpl extends BaseMatch {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        public BaseMatchImpl(int start, int end, String token) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            super(start, end, token);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/password/analyser/match/DictionaryMatchTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "class DictionaryMatchTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void compareTo_equalRank_returnZero() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        DictionaryMatch instanceOne \u003d new DictionaryMatch(0, 4, \"token\", 1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        DictionaryMatch instanceTwo \u003d new DictionaryMatch(0, 4, \"nekot\", 1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertTrue(instanceOne.compareTo(instanceTwo) \u003d\u003d 0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void compareTo_unequalRank_returnNegative() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        DictionaryMatch instanceOne \u003d new DictionaryMatch(0, 4, \"lowerRank\", 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        DictionaryMatch instanceTwo \u003d new DictionaryMatch(0, 4, \"higherRank\", 5);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertTrue(instanceOne.compareTo(instanceTwo) \u003c 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/model/password/analyser/match/SimilarityMatchTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser.match;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordDescription;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.PasswordModifiedAt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.PasswordValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Username;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import seedu.address.model.password.Website;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "class SimilarityMatchTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void compareTo_equalSimilarity_returnZero() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"password\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        SimilarityMatch instanceOne \u003d new SimilarityMatch(0, 4, \"token\", p, 0.7);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        SimilarityMatch instanceTwo \u003d new SimilarityMatch(0, 4, \"nekot\", p, 0.7);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertTrue(instanceOne.compareTo(instanceTwo) \u003d\u003d 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    void compareTo_unequalRank_returnPositive() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        Password p \u003d new Password(new PasswordDescription(\"Gmail\"), new Username(\"Randomguy\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new PasswordValue(\"password\"), new PasswordModifiedAt(new Date()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new Website(\"NIL\"), getTagSet(\"SocialMedia\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        SimilarityMatch instanceOne \u003d new SimilarityMatch(0, 4, \"lowerRank\", p, 0.3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        SimilarityMatch instanceTwo \u003d new SimilarityMatch(0, 4, \"higherRank\", p, 0.5);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertTrue(instanceOne.compareTo(instanceTwo) \u003e 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 29,
      "hooncp": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/model/password/analyser/result/ResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eejian97"
        },
        "content": "package seedu.address.model.password.analyser.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eejian97"
        },
        "content": "import seedu.address.model.password.Password;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eejian97"
        },
        "content": "class ResultTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ResultImpl(null, \"dummy\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public class ResultImpl extends Result {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        public ResultImpl(Password p, String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            super(p, description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        public String getGreaterDetail() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eejian97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eejian97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eejian97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/TitleContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class TitleContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 1,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/TitleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/DateUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.model.util.DateUtil.findDaysPasswordExpireAt;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import static seedu.address.model.util.DateUtil.findPasswordExpireAt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hooncp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hooncp"
        },
        "content": "public class DateUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void findDaysPasswordExpireAt_correctResult() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        assertTrue(findDaysPasswordExpireAt(new Date(), new Date()) \u003d\u003d 0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        assertFalse(findDaysPasswordExpireAt(new Date(), new Date()) \u003d\u003d 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    public void findPasswordExpireAt_correctResult() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        assertFalse(findPasswordExpireAt(new Date()).equals(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        assertFalse(findPasswordExpireAt(new Date()).equals(new Date()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hooncp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hooncp": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/FileNameUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.testutil.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FileNameUtilTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void getFileNameWithPrefix() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(\"[LOCKED] Test File.txt\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                FileNameUtil.getFileNameWithPrefix(\"Test File.txt\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(\"[LOCKED] Test File.txt\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                FileNameUtil.getFileNameWithPrefix(\"[LOCKED] Test File.txt\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void getFileNameWithoutPrefix() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(\"Test File.txt\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                FileNameUtil.getFileNameWithoutPrefix(\"Test File.txt\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(\"Test File.txt\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                FileNameUtil.getFileNameWithoutPrefix(\"[LOCKED] Test File.txt\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String PASSWORD \u003d \"password1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath, PASSWORD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath), PASSWORD)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 3,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonNoteBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.ReadOnlyNoteBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class JsonNoteBookStorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonNoteBookStorageTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private static final String PASSWORD \u003d \"password1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void readNoteBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readNoteBook(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private java.util.Optional\u003cReadOnlyNoteBook\u003e readNoteBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new JsonNoteBookStorage(Paths.get(filePath)).readNoteBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "        assertFalse(readNoteBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readNoteBook(\"notJsonFormatNoteBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void readNoteBook_invalidNoteBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readNoteBook(\"invalidNoteBook.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void readNoteBook_invalidAndValidNoteBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readNoteBook(\"invalidAndValidNoteBook.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //    public void readAndSaveNoteBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //        Path filePath \u003d testFolder.resolve(\"TempNoteBook.json\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //        NoteBook original \u003d getTypicalNoteBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //        JsonNoteBookStorage jsonNoteBookStorage \u003d new JsonNoteBookStorage(filePath, PASSWORD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //        // Save in new file and read back"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //        jsonNoteBookStorage.saveNoteBook(original, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //        ReadOnlyNoteBook readBack \u003d jsonNoteBookStorage.readNoteBook(filePath).get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //        assertEquals(original, new NoteBook(readBack));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //        //        original.addNote(SECRETDIARY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //        //        original.removeNote(SECRETDOC);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //        jsonNoteBookStorage.saveNoteBook(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //        readBack \u003d jsonNoteBookStorage.readNoteBook(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //        assertEquals(original, new NoteBook(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //        // Save and read without specifying file path"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //        //        original.addNote(SECRETRECORDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //        jsonNoteBookStorage.saveNoteBook(original); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //        readBack \u003d jsonNoteBookStorage.readNoteBook().get(); // file path not specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //        assertEquals(original, new NoteBook(readBack));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jityong"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jityong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jityong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jityong"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath), PASSWORD)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jityong"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jityong"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jityong"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jityong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String PASSWORD \u003d \"password1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 700, 300, 100));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder), PASSWORD)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath, PASSWORD);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 3,
      "hooncp": 1,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String PASSWORD \u003d \"password1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"), PASSWORD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        JsonFileBookStorage fileBookStorage \u003d new JsonFileBookStorage(getTempFilePath(\"fb\"), PASSWORD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        JsonCardBookStorage cardBookStorage \u003d new JsonCardBookStorage(getTempFilePath(\"cb\"), PASSWORD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"), PASSWORD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "        JsonNoteBookStorage notePrefsStorage \u003d new JsonNoteBookStorage(getTempFilePath(\"note\"), PASSWORD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hooncp"
        },
        "content": "        JsonPasswordBookStorage passwordBookStorage \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                new JsonPasswordBookStorage(getTempFilePath(\"pw\"), PASSWORD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, fileBookStorage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hooncp"
        },
        "content": "                cardBookStorage, notePrefsStorage, passwordBookStorage, userPrefsStorage, PASSWORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 4,
      "yhtingg": 3,
      "jityong": 2,
      "hooncp": 3,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    public static void assertEquals(String dummyToken, String result) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eejian97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eejian97": 3,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EncryptedFileBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedAt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FilePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileStatus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.ModifiedAt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class EncryptedFileBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String DEFAULT_FILENAME \u003d \"Test File.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String DEFAULT_FILEPATH \u003d TestUtil.SANDBOX_FOLDER.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final Date DEFAULT_DATE \u003d new Date();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final FileStatus DEFAULT_STATUS \u003d FileStatus.ACTIVE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private FileName fileName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private FilePath filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private EncryptedAt encryptedAt;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private ModifiedAt modifiedAt;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private FileStatus fileStatus;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Initializes the EncryptedFileBuilder."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public EncryptedFileBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fileName \u003d new FileName(DEFAULT_FILENAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        filePath \u003d new FilePath(DEFAULT_FILEPATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        encryptedAt \u003d new EncryptedAt(DEFAULT_DATE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        modifiedAt \u003d new ModifiedAt(DEFAULT_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fileStatus \u003d DEFAULT_STATUS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Sets the {@code FileName} of the {@code EncryptedFile} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public EncryptedFileBuilder withFileName(String fileName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.fileName \u003d new FileName(fileName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Sets the {@code FilePath} of the {@code EncryptedFile} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public EncryptedFileBuilder withFilePath(String filePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.filePath \u003d new FilePath(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public EncryptedFile build() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new EncryptedFile(fileName, filePath, fileStatus, tags, encryptedAt, modifiedAt);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/NoteBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.NoteBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": " * A utility class to help with building Notebook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": " *     {@code AddressBook ab \u003d new NoteBookBuilder().withNote(\"secretDoc\",\"secretDiary\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class NoteBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private NoteBook noteBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NoteBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteBook \u003d new NoteBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NoteBookBuilder(NoteBook noteBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.noteBook \u003d noteBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Adds a new {@code Note} to the {@code NoteBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NoteBookBuilder withNote(Note note) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "        noteBook.addNote(note);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NoteBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return noteBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/NoteBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class NoteBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Secret Diary\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Work\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final String DEFAULT_CONTENT \u003d \"secret documents\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Content content;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NoteBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "        content \u003d new Content(DEFAULT_CONTENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NoteBuilder(Note noteToCopy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "        title \u003d noteToCopy.getTitle();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "        description \u003d noteToCopy.getDescription();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "        content \u003d noteToCopy.getContent();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(noteToCopy.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NoteBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NoteBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NoteBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public NoteBuilder withContent(String content) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.content \u003d new Content(content);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public Note build() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new Note(title, description, tags, content);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 1,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalNotes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jityong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.VersionedNoteBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jityong"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jityong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jityong"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "public class TypicalNotes {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final Note SECRETDOC \u003d new NoteBuilder().withTitle(\"Top Secret Document\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "            .withDescription(\"xyz project\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "            .withContent(\"1 + 1 \u003d 2\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jityong"
        },
        "content": "            .withTags(\"work\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final Note SECRETDIARY \u003d new NoteBuilder().withTitle(\"Diary\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jityong"
        },
        "content": "            .withDescription(\"use for personal diary\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "            .withContent(\"this is my personal life\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "            .withTags(\"personal\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static final Note SECRETRECORDS \u003d new NoteBuilder().withTitle(\"Records\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "            .withDescription(\"personal records\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "            .withContent(\"sold 500 teddy bears\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "            .withTags(\"personal\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private TypicalNotes() {} // prevents instantiation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "     * Returns an {@code NoteBook} with all the typical persons."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jityong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static VersionedNoteBook getTypicalNoteBook() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "        VersionedNoteBook ab \u003d new VersionedNoteBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "        for (Note note : getTypicalNotes()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "            ab.addNote(note);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static List\u003cNote\u003e getTypicalNotes() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SECRETDIARY, SECRETDOC, SECRETRECORDS));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jityong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jityong": 1,
      "-": 76
    }
  }
]
